{
  final List<RuleMatch> ruleMatches=new ArrayList<>();
  final AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  for (int i=0; i < tokens.length; i++) {
    final String posToken=tokens[i].getAnalyzedToken(0).getPOSTag();
    if (posToken != null && posToken.equals(JLanguageTool.SENTENCE_START_TAGNAME)) {
      continue;
    }
    final AnalyzedTokenReadings tokenReadings=tokens[i];
    final boolean relevantPronoun=isRelevantPronoun(tokens,i);
    boolean ignore=couldBeRelativeClause(tokens,i);
    if (i > 0) {
      final String prevToken=tokens[i - 1].getToken().toLowerCase();
      if ((tokens[i].getToken().equals("eine") || tokens[i].getToken().equals("einen")) && (prevToken.equals("der") || prevToken.equals("die") || prevToken.equals("das")|| prevToken.equals("des")|| prevToken.equals("dieses"))) {
        ignore=true;
      }
    }
    if (tokenReadings.getToken().equals("nichts") || tokenReadings.getToken().equals("alles") || tokenReadings.getToken().equals("dies")) {
      ignore=true;
    }
    boolean detAbbrev=i < tokens.length - 2 && tokens[i + 1].getToken().equals("Art") && tokens[i + 2].getToken().equals(".");
    boolean detAdjAbbrev=i < tokens.length - 3 && tokens[i + 2].getToken().equals("Art") && tokens[i + 3].getToken().equals(".");
    boolean followingParticiple=i < tokens.length - 3 && tokens[i + 2].hasPartialPosTag("PA1");
    if (detAbbrev || detAdjAbbrev || followingParticiple) {
      ignore=true;
    }
    if ((GermanHelper.hasReadingOfType(tokenReadings,POSType.DETERMINER) || relevantPronoun) && !ignore) {
      int tokenPos=i + 1;
      if (tokenPos >= tokens.length) {
        break;
      }
      AnalyzedTokenReadings nextToken=tokens[tokenPos];
      nextToken=maybeAddAdjectiveReadings(nextToken,tokens,tokenPos);
      if (isNonPredicativeAdjective(nextToken) || isParticiple(nextToken)) {
        tokenPos=i + 2;
        if (tokenPos >= tokens.length) {
          break;
        }
        if (GermanHelper.hasReadingOfType(tokens[tokenPos],POSType.NOMEN)) {
          final RuleMatch ruleMatch=checkDetAdjNounAgreement(tokens[i],nextToken,tokens[i + 2]);
          if (ruleMatch != null) {
            ruleMatches.add(ruleMatch);
          }
        }
      }
 else       if (GermanHelper.hasReadingOfType(nextToken,POSType.NOMEN)) {
        final RuleMatch ruleMatch=checkDetNounAgreement(tokens[i],tokens[i + 1]);
        if (ruleMatch != null) {
          ruleMatches.add(ruleMatch);
        }
      }
    }
  }
  return toRuleMatchArray(ruleMatches);
}
