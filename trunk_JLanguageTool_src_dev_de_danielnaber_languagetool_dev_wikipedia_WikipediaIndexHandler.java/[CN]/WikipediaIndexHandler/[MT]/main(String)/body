{
  if (args.length != 4) {
    System.out.println("Usage: " + WikipediaIndexHandler.class.getSimpleName() + " <wikipediaDump> <indexDir> <languageCode> <maxDocs>");
    System.out.println("\t<wikipediaDump> a Wikipedia XML dump");
    System.out.println("\t<indexDir> directory where Lucene index will be written to, existing index content will be removed");
    System.out.println("\t<languageCode> short code like en for English, de for German etc");
    System.out.println("\t<maxDocs> maximum number of documents to be indexed, use 0 for no limit");
    System.exit(1);
  }
  final String languageCode=args[2];
  final Language language=Language.getLanguageForShortName(languageCode);
  if (language == null) {
    throw new RuntimeException("Could not find language '" + languageCode + "'");
  }
  final int maxDocs=Integer.parseInt(args[3]);
  if (maxDocs == 0) {
    System.out.println("Going to index all documents from input");
  }
 else {
    System.out.println("Going to index up to " + maxDocs + " documents");
  }
  final long start=System.currentTimeMillis();
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  final SAXParser saxParser=factory.newSAXParser();
  final FSDirectory fsDirectory=FSDirectory.open(new File(args[1]));
  final WikipediaIndexHandler handler=new WikipediaIndexHandler(fsDirectory,language,1,maxDocs);
  try {
    saxParser.parse(new FileInputStream(new File(args[0])),handler);
  }
 catch (  DocumentLimitReachedException e) {
    System.out.println("Document limit (" + e.limit + ") reached, stopping indexing");
  }
 finally {
    handler.close();
  }
  final long end=System.currentTimeMillis();
  final float minutes=(end - start) / (float)(1000 * 60);
  System.out.printf("Indexing took %.2f minutes",minutes);
}
