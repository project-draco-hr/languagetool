{
  RuleMatch match=null;
  int count=0;
  int paragraphNumber=-1;
  for (  CheckedParagraph checkedParagraph : checkedParagraphs) {
    for (    RuleMatch ruleMatch : checkedParagraph.getRuleMatches()) {
      if (count >= i && !rulesToIgnore.contains(ruleMatch.getRule().getId())) {
        match=ruleMatch;
        paragraphNumber=checkedParagraph.getParagraphNumber();
        break;
      }
      count++;
    }
    if (match != null) {
      break;
    }
  }
  if (match == null || paragraphNumber == -1) {
    complete();
    return;
  }
  currentRuleMatch=match;
  currentRuleMatchPos=count;
  String msg=match.getMessage();
  msg=msg.replaceAll("<suggestion>","<b>");
  msg=msg.replaceAll("</suggestion>","</b>");
  StringBuilder sb=new StringBuilder();
  int totalMatches=getTotalRuleMatches();
  if (totalMatches == 1)   sb.append(totalMatches + " match in total");
 else   sb.append(totalMatches + " matches in total");
  sb.append("<br>\n<br>\n<b>" + (i + 1) + ".</b> ");
  sb.append("<b>Match:</b> ");
  sb.append(msg);
  sb.append("<br>\n");
  messageArea.setText(FONT_TAG + sb.toString());
  setSuggestions();
  if (xTextDoc != null) {
    XModel xModel=(XModel)UnoRuntime.queryInterface(XModel.class,xTextDoc);
    XController xController=xModel.getCurrentController();
    XTextViewCursorSupplier xViewCursorSupplier=(XTextViewCursorSupplier)UnoRuntime.queryInterface(XTextViewCursorSupplier.class,xController);
    int errorLength=currentRuleMatch.getToPos() - currentRuleMatch.getFromPos();
    if (xViewCursor == null) {
      XTextCursor cursor=xTextDoc.getText().createTextCursor();
      XParagraphCursor xParagraphCursor=(XParagraphCursor)UnoRuntime.queryInterface(XParagraphCursor.class,cursor);
      boolean hasNextParagraph=true;
      boolean foundError=false;
      int paraCount=0;
      while (hasNextParagraph) {
        xParagraphCursor.gotoStartOfParagraph(true);
        if (paraCount == paragraphNumber) {
          if (paragraphNumber != prevMatchParagraph)           replacementCorrection=0;
          String contentForDisplay=null;
          com.sun.star.container.XEnumerationAccess xParaAccess=(com.sun.star.container.XEnumerationAccess)UnoRuntime.queryInterface(com.sun.star.container.XEnumerationAccess.class,xTextDoc.getText());
          int innerParaCount=0;
          for (com.sun.star.container.XEnumeration xParaEnum=xParaAccess.createEnumeration(); xParaEnum.hasMoreElements(); ) {
            Object para=xParaEnum.nextElement();
            if (innerParaCount == paragraphNumber) {
              contentForDisplay=Main.getParagraphContent(para);
              break;
            }
            innerParaCount++;
          }
          contextArea.setText(FONT_TAG + Tools.getContext(match.getFromPos() - replacementCorrection,match.getToPos() - replacementCorrection,contentForDisplay,CONTEXT_SIZE));
          xParagraphCursor.gotoStartOfParagraph(false);
          xParagraphCursor.goRight((short)(currentRuleMatch.getFromPos() - replacementCorrection),false);
          xParagraphCursor.goRight((short)errorLength,true);
          myViewCursor=xViewCursorSupplier.getViewCursor();
          myViewCursor.gotoRange(xParagraphCursor.getStart(),false);
          myViewCursor.gotoRange(xParagraphCursor.getEnd(),true);
          prevMatchParagraph=paragraphNumber;
          foundError=true;
          break;
        }
        hasNextParagraph=xParagraphCursor.gotoNextParagraph(false);
        paraCount++;
      }
      if (!foundError)       throw new IllegalStateException("No position found in text that should be marked (paragraph=" + paragraphNumber + ")");
    }
 else {
      if (startTextRange == null) {
        startTextRange=xViewCursor.getStart();
      }
      int j=0;
      String contentForDisplay=null;
      for (Iterator iter=textToCheck.paragraphs.iterator(); iter.hasNext(); ) {
        String para=(String)iter.next();
        if (paragraphNumber == j) {
          contentForDisplay=para;
          break;
        }
        j++;
      }
      contextArea.setText(FONT_TAG + Tools.getContext(match.getFromPos(),match.getToPos(),contentForDisplay,CONTEXT_SIZE));
      xViewCursor.gotoRange(startTextRange,false);
      xViewCursor.goRight((short)(currentRuleMatch.getFromPos() - replacementCorrection),false);
      xViewCursor.goRight((short)errorLength,true);
    }
  }
}
