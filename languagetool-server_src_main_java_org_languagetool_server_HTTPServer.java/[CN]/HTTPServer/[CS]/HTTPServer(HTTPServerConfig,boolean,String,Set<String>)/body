{
  this.port=config.getPort();
  this.host=host;
  try {
    InetSocketAddress address=host != null ? new InetSocketAddress(host,port) : new InetSocketAddress(port);
    server=HttpServer.create(address,0);
    final RequestLimiter limiter=getRequestLimiterOrNull(config);
    final LinkedBlockingQueue<Runnable> workQueue=new LinkedBlockingQueue<>();
    httpHandler=new LanguageToolHttpHandler(config.isVerbose(),allowedIps,runInternally,limiter,workQueue);
    httpHandler.setMaxTextLength(config.getMaxTextLength());
    httpHandler.setAllowOriginUrl(config.getAllowOriginUrl());
    httpHandler.setMaxCheckTimeMillis(config.getMaxCheckTimeMillis());
    httpHandler.setTrustXForwardForHeader(config.getTrustXForwardForHeader());
    if (config.getMode() == HTTPServerConfig.Mode.AfterTheDeadline) {
      httpHandler.setAfterTheDeadlineMode(config.getAfterTheDeadlineLanguage());
    }
    httpHandler.setLanguageModel(config.getLanguageModelDir());
    httpHandler.setMaxWorkQueueSize(config.getMaxWorkQueueSize());
    server.createContext("/",httpHandler);
    executorService=getExecutorService(workQueue,config);
    server.setExecutor(executorService);
  }
 catch (  Exception e) {
    final ResourceBundle messages=JLanguageTool.getMessageBundle();
    final String message=Tools.makeTexti18n(messages,"http_server_start_failed",host,Integer.toString(port));
    throw new PortBindingException(message,e);
  }
}
