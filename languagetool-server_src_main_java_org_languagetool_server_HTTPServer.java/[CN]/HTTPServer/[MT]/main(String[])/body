{
  if (args.length > 5 || usageRequested(args)) {
    System.out.println("Usage: " + HTTPServer.class.getSimpleName() + " [--config propertyFile] [--port|-p port] [--public]");
    System.out.println("  --config file  a Java property file with values for:");
    System.out.println("                 'mode' - 'LanguageTool' or 'AfterTheDeadline' for emulation of After the Deadline output (optional, experimental)");
    System.out.println("                 'afterTheDeadlineLanguage' - language code like 'en' or 'en-GB' (required if mode is 'AfterTheDeadline')");
    System.out.println("                 'maxTextLength' - maximum text length, longer texts will cause an error (optional)");
    System.out.println("                 'maxCheckTimeMillis' - maximum time in milliseconds allowed per check (optional)");
    printCommonConfigFileOptions();
    printCommonOptions();
    System.exit(1);
  }
  final boolean runInternal=false;
  final HTTPServerConfig config=new HTTPServerConfig(args);
  try {
    final HTTPServer server;
    System.out.println("WARNING: running in HTTP mode, consider using SSL by running " + HTTPSServer.class.getName() + " instead");
    if (config.isPublicAccess()) {
      System.out.println("WARNING: running in public mode, LanguageTool API can be accessed without restrictions!");
      server=new HTTPServer(config,runInternal,null,null);
    }
 else {
      server=new HTTPServer(config,runInternal,DEFAULT_HOST,DEFAULT_ALLOWED_IPS);
    }
    server.run();
  }
 catch (  Exception e) {
    throw new RuntimeException("Could not start LanguageTool HTTP server on " + DEFAULT_HOST + ", port "+ config.getPort(),e);
  }
}
