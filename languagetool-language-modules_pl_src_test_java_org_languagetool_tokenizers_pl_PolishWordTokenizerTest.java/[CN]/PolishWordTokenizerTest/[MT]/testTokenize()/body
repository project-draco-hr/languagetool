{
  final PolishWordTokenizer wordTokenizer=new PolishWordTokenizer();
  final List<String> tokens=wordTokenizer.tokenize("To jest\u00A0 test");
  assertEquals(tokens.size(),6);
  assertEquals("[To,  , jest, \u00A0,  , test]",tokens.toString());
  final List<String> tokens2=wordTokenizer.tokenize("To\r??amie");
  assertEquals(3,tokens2.size());
  assertEquals("[To, \r, ??amie]",tokens2.toString());
  final List<String> tokens3=wordTokenizer.tokenize("A to jest-naprawd??-test!");
  assertEquals(tokens3.size(),6);
  assertEquals("[A,  , to,  , jest-naprawd??-test, !]",tokens3.toString());
  final List<String> tokens4=wordTokenizer.tokenize("Niemiecko- i angielsko-polski");
  assertEquals(tokens4.size(),6);
  assertEquals("[Niemiecko, -,  , i,  , angielsko-polski]",tokens4.toString());
  final List<String> tokens5=wordTokenizer.tokenize("Widz?? krow?? -i to dobrze!");
  assertEquals(11,tokens5.size());
  assertEquals("[Widz??,  , krow??,  , -, i,  , to,  , dobrze, !]",tokens5.toString());
  final List<String> tokens6=wordTokenizer.tokenize("A to jest zdanie???rzeczywi??cie???z wtr??ceniem.");
  assertEquals(tokens6.size(),14);
  assertEquals("[A,  , to,  , jest,  , zdanie, ???, rzeczywi??cie, ???, z,  , wtr??ceniem, .]",tokens6.toString());
  final String compoundSentence="To jest kobieta-wojownik w polsko-czeskim ubraniu, kt??ra wys??a??a dwa SMS-y.";
  List<String> compoundTokens=wordTokenizer.tokenize(compoundSentence);
  assertEquals(21,compoundTokens.size());
  assertEquals("[To,  , jest,  , kobieta-wojownik,  , w,  , polsko-czeskim,  , ubraniu, ,,  , kt??ra,  , wys??a??a,  , dwa,  , SMS-y, .]",compoundTokens.toString());
  Language pl=new Polish();
  wordTokenizer.setTagger(pl.getTagger());
  compoundTokens=wordTokenizer.tokenize(compoundSentence);
  assertEquals(25,compoundTokens.size());
  assertEquals("[To,  , jest,  , kobieta, -, wojownik,  , " + "w,  , polsko, -, czeskim,  , ubraniu, ,,  " + ", kt??ra,  , wys??a??a,  , dwa,  , SMS-y, .]",compoundTokens.toString());
  compoundTokens=wordTokenizer.tokenize("Mia??a osiemna??cie-dwadzie??cia lat.");
  assertEquals(8,compoundTokens.size());
  assertEquals("[Mia??a,  , osiemna??cie, -, dwadzie??cia,  , lat, .]",compoundTokens.toString());
  compoundTokens=wordTokenizer.tokenize("S??ownik polsko-niemiecko-indonezyjski");
  assertEquals(7,compoundTokens.size());
  assertEquals("[S??ownik,  , polsko, -, niemiecko, -, indonezyjski]",compoundTokens.toString());
}
