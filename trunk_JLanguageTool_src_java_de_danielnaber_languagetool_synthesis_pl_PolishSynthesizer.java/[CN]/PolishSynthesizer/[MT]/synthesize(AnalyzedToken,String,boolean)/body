{
  if (posTag == null) {
    return null;
  }
  if (posTagRegExp) {
    if (possibleTags == null) {
      possibleTags=loadWords(Tools.getStream(TAGS_FILE_NAME));
    }
    if (synthesizer == null) {
      setFileName();
      synthesizer=new Lametyzator();
    }
    final ArrayList<String> results=new ArrayList<String>();
    boolean isNegated=false;
    if (token.getPOSTag() != null) {
      isNegated=posTag.indexOf(NEGATION_TAG) > 0 || token.getPOSTag().indexOf(NEGATION_TAG) > 0 && !(posTag.indexOf(COMP_TAG) > 0) && !(posTag.indexOf(SUP_TAG) > 0);
    }
    if (isNegated) {
      posTag=posTag.replaceAll(NEGATION_TAG,POTENTIAL_NEGATION_TAG + "?");
    }
    final Pattern p=Pattern.compile(posTag.replace('+','|').replaceAll("m[1-5]","m[1-5]?"));
    for (    final String tag : possibleTags) {
      final Matcher m=p.matcher(tag);
      if (m.matches()) {
        String[] wordForms=null;
        if (isNegated) {
          wordForms=synthesizer.stem(token.getLemma() + "|" + tag.replaceAll(NEGATION_TAG,POTENTIAL_NEGATION_TAG));
          if (wordForms != null) {
            final String[] negForms=wordForms;
            for (int i=0; i < wordForms.length; i++) {
              negForms[i]="nie" + wordForms[i];
            }
            wordForms=negForms;
          }
        }
 else {
          wordForms=synthesizer.stem(token.getLemma() + "|" + tag);
        }
        if (wordForms != null) {
          results.addAll(Arrays.asList(wordForms));
        }
      }
    }
    return results.toArray(new String[results.size()]);
  }
 else {
    return synthesize(token,posTag);
  }
}
