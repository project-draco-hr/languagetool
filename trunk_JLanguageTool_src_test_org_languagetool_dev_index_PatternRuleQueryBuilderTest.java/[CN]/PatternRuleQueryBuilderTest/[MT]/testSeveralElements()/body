{
  assertMatches(makeRule("<token>How</token>"),1);
  assertMatches(makeRule("<token>how</token>"),1);
  assertMatches(makeRule("<token>LanguageTool</token>"),1);
  assertMatches(makeRule("<token>UnknownWord</token>"),0);
  assertMatches(makeCaseSensitiveRule("<token>How</token>"),1);
  assertMatches(makeCaseSensitiveRule("<token>how</token>"),0);
  assertMatches(makeRule("<token regexp=\"yes\">Foo|How</token>"),1);
  assertMatches(makeRule("<token regexp=\"yes\">Foo|how</token>"),1);
  assertMatches(makeRule("<token regexp=\"yes\">Foo|Bar</token>"),0);
  assertMatches(makeCaseSensitiveRule("<token regexp=\"yes\">Foo|How</token>"),1);
  assertMatches(makeCaseSensitiveRule("<token regexp=\"yes\">foo|HOW</token>"),0);
  assertMatches(makeCaseSensitiveRule("<token regexp=\"yes\">foo|how</token>"),0);
  assertMatches(makeRule("<token postag=\"WRB\"></token>"),1);
  assertMatches(makeRule("<token postag=\"FOO\"></token>"),0);
  assertMatches(makeRule("<token postag=\"[XW]RB\" postag_regexp=\"yes\"></token>"),1);
  assertMatches(makeRule("<token postag=\"FOO|WRB\" postag_regexp=\"yes\"></token>"),1);
  assertMatches(makeRule("<token postag=\"WRB|FOO\" postag_regexp=\"yes\"></token>"),1);
  assertMatches(makeRule("<token postag=\"[XY]OO\" postag_regexp=\"yes\"></token>"),0);
  assertMatches(makeRule("<token postag=\"WRB\">How</token>"),1);
  assertMatches(makeRule("<token postag=\"[XW]RB\" postag_regexp=\"yes\">How</token>"),1);
  assertMatches(makeRule("<token postag=\"WRB\">Foo</token>"),0);
  assertMatches(makeRule("<token postag=\"FOO\">How</token>"),0);
  assertMatches(makeRule("<token>How</token> <token>do</token>"),1);
  assertMatches(makeRule("<token>do</token> <token>How</token>"),0);
  assertMatches(makeRule("<token>How</token> <token>foo</token>"),0);
  assertMatches(makeRule("<token>How</token> <token>do</token> <token>you</token>"),1);
  assertMatches(makeRule("<token>How</token> <token>do</token> <token>foo</token>"),0);
  assertMatches(makeRule("<token regexp=\"yes\">Foo|How</token> <token>do</token>"),1);
  assertMatches(makeRule("<token skip=\"-1\">How</token> <token>wonderful</token>"),1);
  assertMatches(makeRule("<token skip=\"-1\">wonderful</token> <token>How</token>"),0);
  assertMatches(makeRule("<token skip=\"6\">How</token> <token>wonderful</token>"),1);
  assertMatches(makeRule("<token skip=\"5\">How</token> <token>wonderful</token>"),1);
  assertMatches(makeRule("<token skip=\"4\">How</token> <token>wonderful</token>"),0);
  assertMatches(makeRule("<token>How</token> <token skip=\"-1\">do</token> <token>wonderful</token>"),1);
  assertMatches(makeRule("<token>How</token> <token skip=\"4\">do</token> <token>wonderful</token>"),1);
  assertMatches(makeRule("<token>How</token> <token skip=\"3\">do</token> <token>wonderful</token>"),0);
  assertMatches(makeRule("<token skip=\"-1\">How</token> <token skip=\"-1\">thin</token> <token>wonderful</token>"),1);
  assertMatches(makeRule("<token skip=\"3\">How</token> <token skip=\"3\">thin</token> <token>wonderful</token>"),1);
  assertMatches(makeRule("<token skip=\"3\">How</token> <token skip=\"3\">thin</token> <token>foo</token>"),0);
  assertMatches(makeRule("<token>E</token> <token>.</token> <token>G</token> <token>.</token>"),1);
  assertMatches(makeRule("<token>X</token> <token>.</token> <token>G</token> <token>.</token>"),0);
  assertMatches(makeRule("<token>E</token> <token>,</token> <token>G</token> <token>.</token>"),0);
  assertMatches(makeRule("<token>E</token> <token>.</token> <token>G</token> <token>.</token> <token>LanguageTool</token>"),1);
  assertMatches(makeRule("<token>E</token> <token>.</token> <token>G</token> <token>.</token> <token>foo</token>"),0);
  assertRelaxedMatches(makeCaseSensitiveRule("<token>The</token> <token inflected=\"yes\">is</token>"),1);
  assertRelaxedMatches(makeRule("<token>The</token> <token><match no=\"1\"></match></token>"),1);
  assertMatches(makeRule("<token>How</token> <token negate=\"yes\">foo</token>"),1);
  assertMatches(makeRule("<token>How</token> <token negate=\"yes\">do</token>"),0);
  assertMatches(makeRule("<token>How</token> <token>do</token> <token negate=\"yes\">foo</token>"),1);
  assertMatches(makeRule("<token>How</token> <token negate=\"yes\">foo</token> <token>you</token>"),1);
  assertMatches(makeRule("<token>How</token> <token>do</token> <token negate=\"yes\">you</token>"),0);
  assertMatches(makeRule("<token>How</token> <token negate=\"yes\">do</token> <token>you</token>"),0);
  assertMatches(makeRule("<token>How</token> <token negate=\"yes\">do</token> <token negate=\"yes\">you</token>"),0);
}
