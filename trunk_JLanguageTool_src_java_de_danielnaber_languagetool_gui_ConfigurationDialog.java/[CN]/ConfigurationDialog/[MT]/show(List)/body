{
  dialog=new JDialog();
  dialog.setTitle("Options");
  checkBoxes.clear();
  checkBoxesRuleIds.clear();
  JPanel checkBoxPanel=new JPanel();
  checkBoxPanel.setLayout(new GridBagLayout());
  GridBagConstraints cons=new GridBagConstraints();
  cons.anchor=GridBagConstraints.NORTHWEST;
  cons.gridx=0;
  int row=0;
  for (Iterator iter=rules.iterator(); iter.hasNext(); ) {
    Rule rule=(Rule)iter.next();
    cons.gridy=row;
    JCheckBox checkBox=null;
    if (rule instanceof PatternRule) {
      PatternRule patternRule=(PatternRule)rule;
      checkBox=new JCheckBox(rule.getDescription() + " -- " + patternRule.getPattern());
    }
 else {
      checkBox=new JCheckBox(rule.getDescription());
    }
    if (inactivateRuleIds != null && inactivateRuleIds.contains(rule.getId()))     checkBox.setSelected(false);
 else     checkBox.setSelected(true);
    checkBoxes.add(checkBox);
    checkBoxesRuleIds.add(rule.getId());
    checkBoxPanel.add(checkBox,cons);
    row++;
  }
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new GridBagLayout());
  JButton okButton=new JButton(OK_BUTTON);
  okButton.addActionListener(this);
  JButton cancelButton=new JButton(CANCEL_BUTTON);
  cancelButton.addActionListener(this);
  buttonPanel.add(okButton);
  buttonPanel.add(cancelButton);
  Container contentPane=dialog.getContentPane();
  contentPane.setLayout(new GridBagLayout());
  cons.gridx=0;
  cons.gridy=0;
  cons.weightx=10.0f;
  cons.weighty=10.0f;
  cons.fill=GridBagConstraints.BOTH;
  contentPane.add(new JScrollPane(checkBoxPanel),cons);
  cons.gridx=0;
  cons.gridy=1;
  cons.weightx=0.0f;
  cons.weighty=0.0f;
  cons.fill=GridBagConstraints.NONE;
  contentPane.add(buttonPanel,cons);
  dialog.pack();
  dialog.setSize(500,500);
  dialog.setVisible(true);
}
