{
  dialog=new JDialog(owner,true);
  dialog.setTitle(messages.getString("guiConfigWindowTitle"));
  checkBoxes.clear();
  checkBoxesRuleIds.clear();
  categoryCheckBoxes.clear();
  checkBoxesCategoryNames.clear();
  Collections.sort(rules,new CategoryComparator());
  final KeyStroke stroke=KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0);
  final ActionListener actionListener=new ActionListener(){
    @SuppressWarnings("unused") public void actionPerformed(    ActionEvent actionEvent){
      dialog.setVisible(false);
    }
  }
;
  final JRootPane rootPane=dialog.getRootPane();
  rootPane.registerKeyboardAction(actionListener,stroke,JComponent.WHEN_IN_FOCUSED_WINDOW);
  checkBoxPanel=new JPanel();
  checkBoxPanel.setLayout(new GridBagLayout());
  GridBagConstraints cons=new GridBagConstraints();
  cons.anchor=GridBagConstraints.NORTHWEST;
  cons.gridx=0;
  int row=0;
  String prevID=null;
  String prevCategory=null;
  for (  final Rule rule : rules) {
    if (prevID == null || prevID != null && !prevID.equals(rule.getId())) {
      cons.gridy=row;
      final JCheckBox checkBox=new JCheckBox(rule.getDescription());
      if (inactiveRuleIds != null && (inactiveRuleIds.contains(rule.getId()) || inactiveCategoryNames.contains(rule.getCategory().getName()))) {
        checkBox.setSelected(false);
      }
 else {
        checkBox.setSelected(true);
      }
      if (rule.isDefaultOff() && !enabledRuleIds.contains(rule.getId())) {
        checkBox.setSelected(false);
      }
      if (rule.isDefaultOff()) {
        defaultOffRules.add(rule.getId());
        if (rule.getCategory().isDefaultOff()) {
          inactiveCategoryNames.add(rule.getCategory().getName());
        }
      }
 else {
        if (rule.getCategory().isDefaultOff()) {
          inactiveCategoryNames.remove(rule.getCategory().getName());
        }
      }
      final ActionListener ruleCheckBoxListener=new ActionListener(){
        public void actionPerformed(        final ActionEvent actionEvent){
          final JCheckBox cBox=(JCheckBox)actionEvent.getSource();
          final boolean selected=cBox.getModel().isSelected();
          int i=0;
          for (          final JCheckBox chBox : checkBoxes) {
            if (chBox.equals(cBox)) {
              final int catNo=checkBoxesCategoryNames.indexOf(checkBoxesCategories.get(i));
              if (selected && !categoryCheckBoxes.get(catNo).isSelected()) {
                categoryCheckBoxes.get(catNo).setSelected(true);
              }
            }
            i++;
          }
        }
      }
;
      checkBox.addActionListener(ruleCheckBoxListener);
      checkBoxes.add(checkBox);
      checkBoxesRuleIds.add(rule.getId());
      checkBoxesCategories.add(rule.getCategory().getName());
      final boolean showHeadline=rule.getCategory() != null && !rule.getCategory().getName().equals(prevCategory);
      if ((showHeadline || prevCategory == null) && rule.getCategory() != null) {
        final JCheckBox categoryCheckBox=new JCheckBox(rule.getCategory().getName());
        if (inactiveCategoryNames != null && inactiveCategoryNames.contains(rule.getCategory().getName())) {
          categoryCheckBox.setSelected(false);
        }
 else {
          categoryCheckBox.setSelected(true);
        }
        final ActionListener categoryCheckBoxListener=new ActionListener(){
          public void actionPerformed(          final ActionEvent actionEvent){
            final JCheckBox cBox=(JCheckBox)actionEvent.getSource();
            final boolean selected=cBox.getModel().isSelected();
            int i=0;
            for (            final JCheckBox ruleBox : checkBoxes) {
              if (ruleBox.isSelected() != selected) {
                if (checkBoxesCategories.get(i).equals(cBox.getText())) {
                  ruleBox.setSelected(selected);
                }
              }
              i++;
            }
          }
        }
;
        categoryCheckBox.addActionListener(categoryCheckBoxListener);
        categoryCheckBoxes.add(categoryCheckBox);
        checkBoxesCategoryNames.add(rule.getCategory().getName());
        checkBoxPanel.add(categoryCheckBox,cons);
        prevCategory=rule.getCategory().getName();
        cons.gridy++;
        row++;
      }
      checkBox.setMargin(new Insets(0,20,0,0));
      checkBoxPanel.add(checkBox,cons);
      row++;
    }
    prevID=rule.getId();
  }
  final JPanel motherTonguePanel=new JPanel();
  motherTonguePanel.add(new JLabel(messages.getString("guiMotherTongue")),cons);
  motherTongueBox=new JComboBox(getPossibleMotherTongues());
  if (motherTongue != null) {
    if (motherTongue == Language.DEMO) {
      motherTongueBox.setSelectedItem(NO_MOTHER_TONGUE);
    }
 else {
      motherTongueBox.setSelectedItem(messages.getString(motherTongue.getShortName()));
    }
  }
  motherTonguePanel.add(motherTongueBox,cons);
  final JPanel portPanel=new JPanel();
  portPanel.setLayout(new GridBagLayout());
  cons=new GridBagConstraints();
  cons.insets=new Insets(0,4,0,0);
  cons.gridx=0;
  cons.gridy=0;
  cons.anchor=GridBagConstraints.WEST;
  cons.fill=GridBagConstraints.NONE;
  cons.weightx=0.0f;
  if (!insideOOo) {
    serverCheckbox=new JCheckBox(StringTools.getLabel(messages.getString("guiRunOnPort")));
    serverCheckbox.setMnemonic(StringTools.getMnemonic(messages.getString("guiRunOnPort")));
    serverCheckbox.setSelected(serverMode);
    portPanel.add(serverCheckbox,cons);
    serverPortField=new JTextField(serverPort + "");
    serverPortField.setEnabled(serverCheckbox.isSelected());
    serverPortField.setMinimumSize(new Dimension(200,15));
    cons.gridx=1;
    serverCheckbox.addActionListener(new ActionListener(){
      public void actionPerformed(      @SuppressWarnings("unused") ActionEvent e){
        serverPortField.setEnabled(serverCheckbox.isSelected());
      }
    }
);
    portPanel.add(serverPortField,cons);
  }
  final JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new GridBagLayout());
  okButton=new JButton(StringTools.getLabel(messages.getString("guiOKButton")));
  okButton.setMnemonic(StringTools.getMnemonic(messages.getString("guiOKButton")));
  okButton.addActionListener(this);
  cancelButton=new JButton(StringTools.getLabel(messages.getString("guiCancelButton")));
  cancelButton.setMnemonic(StringTools.getMnemonic(messages.getString("guiCancelButton")));
  cancelButton.addActionListener(this);
  cons=new GridBagConstraints();
  cons.insets=new Insets(0,4,0,0);
  buttonPanel.add(okButton,cons);
  buttonPanel.add(cancelButton,cons);
  final Container contentPane=dialog.getContentPane();
  contentPane.setLayout(new GridBagLayout());
  cons=new GridBagConstraints();
  cons.insets=new Insets(4,4,4,4);
  cons.gridx=0;
  cons.gridy=0;
  cons.weightx=10.0f;
  cons.weighty=10.0f;
  cons.fill=GridBagConstraints.BOTH;
  contentPane.add(new JScrollPane(checkBoxPanel),cons);
  cons.gridx=0;
  cons.gridy=1;
  cons.weightx=0.0f;
  cons.weighty=0.0f;
  cons.fill=GridBagConstraints.NONE;
  cons.anchor=GridBagConstraints.WEST;
  contentPane.add(motherTonguePanel,cons);
  cons.gridx=0;
  cons.gridy=2;
  cons.weightx=0.0f;
  cons.weighty=0.0f;
  cons.fill=GridBagConstraints.NONE;
  cons.anchor=GridBagConstraints.WEST;
  contentPane.add(portPanel,cons);
  cons.gridx=0;
  cons.gridy=3;
  cons.weightx=0.0f;
  cons.weighty=0.0f;
  cons.fill=GridBagConstraints.NONE;
  cons.anchor=GridBagConstraints.EAST;
  contentPane.add(buttonPanel,cons);
  dialog.pack();
  dialog.setSize(500,500);
  final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
  final Dimension frameSize=dialog.getSize();
  dialog.setLocation(screenSize.width / 2 - frameSize.width / 2,screenSize.height / 2 - frameSize.height / 2);
  dialog.setVisible(true);
}
