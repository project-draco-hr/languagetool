{
  final List<RuleMatch> ruleMatches=new ArrayList<>();
  final AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  final AnalyzedTokenReadings[] tokensWithWS=sentence.getTokens();
  String prevToken="";
  for (int i=1; i < tokens.length; i++) {
    final String token=tokens[i].getToken();
    boolean isWord=isWord(token);
    final boolean isException=ignore(sentence,tokensWithWS,i);
    if (isWord && prevToken.equalsIgnoreCase(token) && !isException) {
      final String msg=messages.getString("repetition");
      final int prevPos=tokens[i - 1].getStartPos();
      final int pos=tokens[i].getStartPos();
      final RuleMatch ruleMatch=new RuleMatch(this,prevPos,pos + prevToken.length(),msg,messages.getString("desc_repetition_short"));
      final List<String> replacementSuggs=new ArrayList<>();
      replacementSuggs.add(prevToken + " " + token);
      replacementSuggs.add(prevToken);
      replacementSuggs.add(prevToken + "???");
      ruleMatch.setSuggestedReplacements(replacementSuggs);
      ruleMatches.add(ruleMatch);
    }
    prevToken=token;
  }
  return toRuleMatchArray(ruleMatches);
}
