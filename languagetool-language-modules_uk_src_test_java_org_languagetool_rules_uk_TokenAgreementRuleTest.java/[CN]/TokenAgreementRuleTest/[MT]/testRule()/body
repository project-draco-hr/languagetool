{
  assertEmptyMatch("?????? ??????????????");
  assertEmptyMatch("?????? ????????");
  assertEmptyMatch("???? ??????????");
  assertEmptyMatch("???? ???? ?????????????? ???????????????????????????????");
  assertEmptyMatch("???????? ???????????? ????????????");
  assertEmptyMatch("?? ?????????????? ?????????????????????? ??????????????????");
  assertEmptyMatch("?????????? ???????????????? ??????????");
  assertEmptyMatch("?? ?????????? ?????? ??????????");
  assertEmptyMatch("???? ????????????");
  assertEmptyMatch("?? ?????????????????? ????????????");
  assertEmptyMatch("???????? ?????????? ???????????????????????? ??????????????????");
  assertEmptyMatch("?????? ?????? ???? ?????????????????? ???? ????????????");
  assertEmptyMatch("???????? ?? ????????????????????");
  assertEmptyMatch("???????? ???????? ????????");
  assertEmptyMatch("???? ???? ???????? ???? ????????????");
  assertEmptyMatch("???? ???? ????????????");
  assertEmptyMatch("???? ?????????????????????? ???? ?????? ??????????????");
  assertEmptyMatch("???? ????????");
  assertEmptyMatch("?????????? ???? ????????????????");
  assertEmptyMatch("???? ???????????? ????????????");
  assertEmptyMatch("???????????????????? ?? ?????????????? ??????????????");
  assertEmptyMatch("?????? ?????????? 1 ???? ???????? 1");
  assertEmptyMatch("???? ?????????? ???????????? ????????");
  assertEmptyMatch("???? ?????????? ????????????????????");
  assertEmptyMatch("?????????? ?????????? 10");
  assertEmptyMatch("???? ???????????? 9-10");
  assertEmptyMatch("?????????????????????????? ???? ???????? ??????????????????");
  assertEmptyMatch("?????????? ???????? ???????????? ??????????????");
  assertEmptyMatch("?????????? ???????????? ???? ???????????? ??????????????");
  assertEmptyMatch("?????????????? ???? ?????? ?????????????? ?????? ??????????????");
  assertEmptyMatch("?????? ?? ???? ??");
  assertEmptyMatch("???? ???? ??????????");
  assertEmptyMatch("???? ???????? ??????????");
  assertEmptyMatch("?? ???????? ???? ????????????, ?????? ???????? ???? ????????");
  assertEmptyMatch("???? ?????? ???????????? ????????????????");
  assertEmptyMatch("?????????????? ???? ?????????????? ?????????? ???????????????????????????? ???????????????????? ??????????");
  assertEmptyMatch("???????? ?????????????? ???????????? ?????????????? ????????");
  assertEmptyMatch("???? ?????????? ?????????????????? ??????");
  assertEmptyMatch("?????? ?????? ???????? ?????? ????????????????????");
  assertEmptyMatch("???????? ???? ???????? ???????? ??????????????????????");
  assertEmptyMatch("???? ???? ???????? ?????????????? ???????????? ?????? ???? ????????????????????");
  assertEquals(1,rule.match(langTool.getAnalyzedSentence("?????????????? ???? ?????????????? ?????????? ???????????????????????????? ???????????????????? ??????????")).length);
  RuleMatch[] matches=rule.match(langTool.getAnalyzedSentence("?????? ????????"));
  assertEquals(1,matches.length);
  assertEquals(Arrays.asList("????????"),matches[0].getSuggestedReplacements());
  matches=rule.match(langTool.getAnalyzedSentence("???? ?? ?????????????? ?????????? ??????????    ??????????????????, ???????????????????????? ??????????????????"));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("???? ????????????"));
  assertEquals(1,matches.length);
  assertEquals(3,matches[0].getFromPos());
  assertEquals(9,matches[0].getToPos());
  assertEquals(Arrays.asList("????????????","??????????"),matches[0].getSuggestedReplacements());
  assertEquals(1,rule.match(langTool.getAnalyzedSentence("?? ??'?????????? ??????????")).length);
  assertEquals(1,rule.match(langTool.getAnalyzedSentence("?? ?????????? ??'?????????? ??????????")).length);
  AnalyzedSentence analyzedSentence=langTool.getAnalyzedSentence("?????????????? ???? ???????????? ????????????");
  RuleMatch[] match=rule.match(analyzedSentence);
  assertEquals(1,match.length);
  List<String> suggestedReplacements=match[0].getSuggestedReplacements();
  assertTrue("Did not find ??????????????: " + suggestedReplacements,suggestedReplacements.contains("??????????"));
  analyzedSentence=langTool.getAnalyzedSentence("?? ??????????????!");
  match=rule.match(analyzedSentence);
  assertEquals(1,match.length);
  suggestedReplacements=match[0].getSuggestedReplacements();
  assertTrue("Did not find ?????????????? ??????????????????: " + suggestedReplacements,suggestedReplacements.contains("??????????????"));
  matches=rule.match(langTool.getAnalyzedSentence("???? ?????????????????? ??????????????"));
  assertEquals(1,matches.length);
  assertEmptyMatch("???? ????????????");
  assertEmptyMatch("???? ????????????");
  assertEmptyMatch("???? ????????????");
  assertEmptyMatch("???? ??????????????????????");
  assertEmptyMatch("???? ????????????");
  assertEmptyMatch("???? ????????????????????");
  assertEmptyMatch("???? ???? ?????????? ??????????????");
  assertEmptyMatch("?????????????????? ???? ???????????????? ?????????????? ??????????????");
  assertEmptyMatch("???? ?????????????????? ?????????????? ????????");
  matches=rule.match(langTool.getAnalyzedSentence("?????????????????? ???? ???????????????? ?????????????? ????????????????"));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("?????? ?????????? ???????????????? ???? ?????????????????????? ??????????????"));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("???????????? ?? ??????????????????"));
  assertEquals(1,matches.length);
}
