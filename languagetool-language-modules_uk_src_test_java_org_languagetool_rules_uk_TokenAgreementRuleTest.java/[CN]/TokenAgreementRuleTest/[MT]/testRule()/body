{
  TokenAgreementRule rule=new TokenAgreementRule(TestTools.getMessages("uk"));
  JLanguageTool langTool=new JLanguageTool(new Ukrainian());
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("?????? ??????????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("?????? ????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("???? ??????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("???? ???? ?????????????? ???????????????????????????????")).length);
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("???????? ???????????? ????????????"))));
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("?? ?????????????? ?????????????????????? ??????????????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("?????????? ???????????????? ??????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("?? ?????????? ?????? ??????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("???? ????????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("?? ?????????????????? ????????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("???????? ?????????? ???????????????????????? ??????????????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("?????? ?????? ???? ?????????????????? ???? ????????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("???????? ?? ????????????????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("???? ???? ???????? ???? ????????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("???? ???? ????????????")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("???? ?????????????????????? ???? ?????? ??????????????")).length);
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("?????????? ???? ????????????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("???? ???????????? ????????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("???????????????????? ?? ?????????????? ??????????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("?????? ?????????? 1 ???? ???????? 1"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("???? ?????????? ???????????? ????????????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("???? ?????????? ????????????????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("?????????? ?????????? 10"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("?????????????????????????? ???? ???????? ??????????????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("?????????? ???????? ???????????? ??????????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("?????????? ???????????? ???? ???????????? ??????????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("?????????????? ???? ?????? ?????????????? ?????? ??????????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("?????? ?? ???? ??"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("???? ???? ??????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("???? ???????? ??????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("???? ?????? ???????????? ????????????????"))));
  assertEquals(new ArrayList<RuleMatch>(),Arrays.asList(rule.match(langTool.getAnalyzedSentence("?????????????? ???? ?????????????? ?????????? ???????????????????????????? ???????????????????? ??????????"))));
  assertEquals(1,rule.match(langTool.getAnalyzedSentence("?????????????? ???? ?????????????? ?????????? ???????????????????????????? ???????????????????? ??????????")).length);
  RuleMatch[] matches=rule.match(langTool.getAnalyzedSentence("?????? ????????"));
  assertEquals(1,matches.length);
  assertEquals(Arrays.asList("????????"),matches[0].getSuggestedReplacements());
  matches=rule.match(langTool.getAnalyzedSentence("???? ????????????"));
  assertEquals(1,matches.length);
  assertEquals(Arrays.asList("????????????","??????????"),matches[0].getSuggestedReplacements());
  assertEquals(1,rule.match(langTool.getAnalyzedSentence("?? ??'?????????? ??????????")).length);
  assertEquals(1,rule.match(langTool.getAnalyzedSentence("?? ?????????? ??'?????????? ??????????")).length);
  AnalyzedSentence analyzedSentence=langTool.getAnalyzedSentence("?????????????? ???? ???????????? ????????????");
  RuleMatch[] match=rule.match(analyzedSentence);
  assertEquals(1,match.length);
  List<String> suggestedReplacements=match[0].getSuggestedReplacements();
  assertTrue("Did not find ??????????????: " + suggestedReplacements,suggestedReplacements.contains("??????????"));
}
