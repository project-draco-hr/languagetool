{
  String tokenString=tokenReadings.getToken();
  Synthesizer ukrainianSynthesizer=ukrainian.getSynthesizer();
  ArrayList<String> suggestions=new ArrayList<>();
  String oldPosTag=tokenReadings.getAnalyzedToken(0).getPOSTag();
  String requiredPostTagsRegEx=":(" + StringUtils.join(posTagsToFind,"|") + ")";
  String posTag=oldPosTag.replaceFirst(":v_[a-z]+",requiredPostTagsRegEx);
  try {
    String[] synthesized=ukrainianSynthesizer.synthesize(tokenReadings.getAnalyzedToken(0),posTag,true);
    suggestions.addAll(Arrays.asList(synthesized));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  ArrayList<String> reqVidminkyNames=new ArrayList<>();
  for (  String vidm : posTagsToFind) {
    reqVidminkyNames.add(PosTagHelper.VIDMINKY_MAP.get(vidm));
  }
  ArrayList<String> foundVidminkyNames=new ArrayList<>();
  for (  AnalyzedToken token : tokenReadings) {
    String posTag2=token.getPOSTag();
    if (posTag2 != null && posTag2.contains(VIDMINOK_SUBSTR)) {
      String vidmName=PosTagHelper.VIDMINKY_MAP.get(posTag2.replaceFirst("^.*" + VIDMINOK_REGEX + ".*$","$1"));
      if (foundVidminkyNames.contains(vidmName)) {
        if (posTag2.contains(":p:")) {
          vidmName=vidmName + " (????.)";
          foundVidminkyNames.add(vidmName);
        }
      }
 else {
        foundVidminkyNames.add(vidmName);
      }
    }
  }
  String msg=MessageFormat.format("???????????????????? ??{0}?? ?????????????? ???????????? ????????????????: {1}, ?? ????????????????: {2}",reqTokenReadings.getToken(),StringUtils.join(reqVidminkyNames,", "),StringUtils.join(foundVidminkyNames,", "));
  if (tokenString.equals("????")) {
    msg+=". ?????????????? ?????? ???????????????? ???????????????????? ?????????????????? ???????????????";
    try {
      String newYihPostag="adj:p" + requiredPostTagsRegEx + ".*";
      String[] synthesized=ukrainianSynthesizer.synthesize(new AnalyzedToken("??????????","adj:m:v_naz:&pron:pos","??????????"),newYihPostag,true);
      suggestions.addAll(Arrays.asList(synthesized));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (reqTokenReadings.getToken().equalsIgnoreCase("??")) {
    for (    AnalyzedToken token : tokenReadings.getReadings()) {
      String posTag2=token.getPOSTag();
      if (posTag2.matches(".*:v_naz.*:anim.*")) {
        msg+=". ?????????????? ?????? ?????? ??? ???? ?????????? ?? ???????????????? ?????????????? ?????????????????";
        try {
          String newPostag=posTag2.replace("v_naz","v_kly");
          String[] synthesized=ukrainianSynthesizer.synthesize(token,newPostag,false);
          for (          String string : synthesized) {
            if (!string.equals(token.getToken()) && !suggestions.contains(string)) {
              suggestions.add(string);
            }
          }
          break;
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
  RuleMatch potentialRuleMatch=new RuleMatch(this,tokenReadings.getStartPos(),tokenReadings.getEndPos(),msg,getShort());
  potentialRuleMatch.setSuggestedReplacements(suggestions);
  return potentialRuleMatch;
}
