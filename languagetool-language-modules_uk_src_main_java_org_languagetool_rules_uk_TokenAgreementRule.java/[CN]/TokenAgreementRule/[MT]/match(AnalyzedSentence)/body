{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  boolean insideMultiword=false;
  AnalyzedTokenReadings reqTokenReadings=null;
  for (int i=0; i < tokens.length; i++) {
    AnalyzedTokenReadings tokenReadings=tokens[i];
    String posTag=tokenReadings.getAnalyzedToken(0).getPOSTag();
    if (posTag == null || posTag.contains(IPOSTag.unknown.getText()) || posTag.equals(JLanguageTool.SENTENCE_START_TAGNAME)) {
      reqTokenReadings=null;
      continue;
    }
    String thisToken=tokenReadings.getToken();
    if (i > 1 && thisToken.length() == 1 && Character.isUpperCase(thisToken.charAt(0)) && tokenReadings.isWhitespaceBefore() && !tokens[i - 1].getToken().matches("[:??????-]")) {
      reqTokenReadings=null;
      continue;
    }
    AnalyzedToken multiwordReqToken=getMultiwordToken(tokenReadings);
    if (multiwordReqToken != null) {
      String mwPosTag=multiwordReqToken.getPOSTag();
      if (mwPosTag.startsWith("</")) {
        insideMultiword=false;
      }
 else {
        insideMultiword=true;
      }
      if (mwPosTag.startsWith("</") && mwPosTag.contains(REQUIRE_VIDMINOK_SUBSTR)) {
        posTag=multiwordReqToken.getPOSTag();
        reqTokenReadings=tokenReadings;
        continue;
      }
 else {
        if (!mwPosTag.contains("adv") && !mwPosTag.contains("insert")) {
          reqTokenReadings=null;
        }
        continue;
      }
    }
    if (insideMultiword) {
      continue;
    }
    String token=tokenReadings.getAnalyzedToken(0).getToken();
    if (posTag.contains(REQUIRE_VIDMINOK_SUBSTR) && tokenReadings.getReadingsLength() == 1) {
      String prep=token;
      if (prep.equals("????") && reverseSearch(tokens,i,"????"))       continue;
      if (prep.equalsIgnoreCase("??????????"))       continue;
      if ((prep.equalsIgnoreCase("??????????") || prep.equalsIgnoreCase("????????")) && tokens.length > i + 1 && tokens[i + 1].getAnalyzedToken(0).getToken().equalsIgnoreCase("????")) {
        reqTokenReadings=null;
        continue;
      }
      reqTokenReadings=tokenReadings;
      continue;
    }
    if (reqTokenReadings == null)     continue;
    List<String> posTagsToFind=new ArrayList<>();
    String reqPosTag=reqTokenReadings.getAnalyzedToken(0).getPOSTag();
    String prep=reqTokenReadings.getAnalyzedToken(0).getLemma();
    if (prep.equalsIgnoreCase("??????????")) {
      posTagsToFind.add("v_naz");
    }
 else     if (prep.equalsIgnoreCase("??????????????")) {
      posTagsToFind.add("v_naz");
    }
    Matcher matcher=REQUIRE_VIDMINOK_REGEX.matcher(reqPosTag);
    while (matcher.find()) {
      posTagsToFind.add(matcher.group(1));
    }
    for (    AnalyzedToken readingToken : tokenReadings) {
      if (IPOSTag.numr.match(readingToken.getPOSTag())) {
        posTagsToFind.add("v_naz");
        break;
      }
    }
    if (!getReadingWithVidmPosTag(posTagsToFind,tokenReadings)) {
      if (isTokenToSkip(tokenReadings))       continue;
      if (prep.equalsIgnoreCase("??") || prep.equalsIgnoreCase("??") || prep.equals("????????")|| prep.equals("??????")|| prep.equals("????")) {
        if (PosTagHelper.hasPosTag(tokenReadings,"noun:anim.*:p:v_naz[^&]*")) {
          reqTokenReadings=null;
          continue;
        }
      }
      if (prep.equalsIgnoreCase("????")) {
        if ((Character.isUpperCase(token.charAt(0)) && posTag.matches("noun.*?:.:v_rod.*")) || (posTag.matches(".*[fl]name.*") && ((i > 1 && NAMES.contains(tokens[i - 2].getAnalyzedToken(0).getToken())) || (i > 2 && NAMES.contains(tokens[i - 3].getAnalyzedToken(0).getLemma()))))) {
          reqTokenReadings=null;
          continue;
        }
      }
      if (prep.equalsIgnoreCase("??")) {
        if (token.equals("????????")) {
          reqTokenReadings=null;
          continue;
        }
      }
      if (prep.equalsIgnoreCase("??????")) {
        if (token.equalsIgnoreCase("??") || token.equals("????????") || token.equals("??????????")|| token.equals("????????")) {
          reqTokenReadings=null;
          continue;
        }
      }
 else       if (prep.equalsIgnoreCase("????")) {
        if (token.equalsIgnoreCase("??") || token.equals("??????????") || token.equals("????????????")) {
          reqTokenReadings=null;
          continue;
        }
      }
      if (tokens.length > i + 1) {
        if (isCapitalized(token) && STREETS.contains(tokens[i + 1].getAnalyzedToken(0).getToken())) {
          reqTokenReadings=null;
          continue;
        }
        if (PosTagHelper.hasPosTag(tokens[i + 1],"num.*") && (token.equals("??????????") || token.equals("????????") || token.equals("??????????????")|| token.equals("????????????????"))) {
          reqTokenReadings=null;
          continue;
        }
        if (PosTagHelper.hasPosTag(tokenReadings,"noun.*?:.:v_oru.*") && tokens[i + 1].hasPartialPosTag("adjp")) {
          continue;
        }
        if ((prep.equalsIgnoreCase("??????????") || prep.equalsIgnoreCase("????")) && (posTag.startsWith("noun:inanim:p:v_naz") || posTag.startsWith("noun:inanim:p:v_rod")) && IPOSTag.isNum(tokens[i + 1].getAnalyzedToken(0).getPOSTag())) {
          reqTokenReadings=null;
          continue;
        }
        if ((token.equals("????????") || token.equals("??????????") || token.equals("??????")) && tokens[i + 1].getAnalyzedToken(0).getToken().startsWith("??")) {
          continue;
        }
        if ((token.equals("????????") || token.equals("????????") || token.equals("????")) && tokens[i + 1].getAnalyzedToken(0).getToken().startsWith("????????????")) {
          continue;
        }
        if ((token.equals("????????") || token.equals("????????")) && tokens[i + 1].getAnalyzedToken(0).getToken().startsWith("??????????")) {
          continue;
        }
        if (prep.equalsIgnoreCase("????") && token.equals("????????") && tokens[i + 1].getAnalyzedToken(0).getToken().equals("??????????")) {
          reqTokenReadings=null;
          continue;
        }
        if (tokens[i + 1].getAnalyzedToken(0).getToken().equals("??") && tokens[i].getAnalyzedToken(0).getPOSTag().contains(":abbr")) {
          reqTokenReadings=null;
          continue;
        }
        if (tokens.length > i + 2) {
          if (posTag.matches("adj.*:[mfn]:v_rod.*")) {
            String gender=PosTagHelper.getGender(posTag);
            if (gender == null) {
            }
            if (PosTagHelper.hasPosTag(tokens[i + 1],"noun.*:" + gender + ":v_rod.*")) {
              i+=1;
              continue;
            }
          }
          if ((token.equals("????????????") || token.equals("??????????") || token.equals("??????????")|| token.equals("????????????")) && tokens[i + 1].getAnalyzedToken(0).getToken().equals("????")) {
            continue;
          }
        }
      }
      RuleMatch potentialRuleMatch=createRuleMatch(tokenReadings,reqTokenReadings,posTagsToFind);
      ruleMatches.add(potentialRuleMatch);
    }
    reqTokenReadings=null;
  }
  return toRuleMatchArray(ruleMatches);
}
