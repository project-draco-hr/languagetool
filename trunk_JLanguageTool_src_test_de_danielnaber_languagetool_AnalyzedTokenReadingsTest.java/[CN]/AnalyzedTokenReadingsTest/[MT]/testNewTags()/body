{
  AnalyzedTokenReadings testanaTokRead=new AnalyzedTokenReadings(new AnalyzedToken("word","POS","lemma"));
  assertEquals(false,testanaTokRead.isLinebreak());
  assertEquals(false,testanaTokRead.isSentEnd());
  assertEquals(false,testanaTokRead.isParaEnd());
  assertEquals(false,testanaTokRead.isSentStart());
  testanaTokRead.setSentEnd();
  assertEquals(false,testanaTokRead.isSentStart());
  assertEquals(true,testanaTokRead.isSentEnd());
  testanaTokRead=new AnalyzedTokenReadings(new AnalyzedToken("word",null,"lemma"));
  testanaTokRead.addReading(new AnalyzedToken("word","SENT_END",null));
  assertEquals(true,testanaTokRead.isSentEnd());
  assertEquals(false,testanaTokRead.isParaEnd());
  testanaTokRead.addReading(new AnalyzedToken("word","PARA_END",null));
  assertEquals(true,testanaTokRead.isParaEnd());
  assertEquals(false,testanaTokRead.isSentStart());
  testanaTokRead.addReading(new AnalyzedToken("word","SENT_START",null));
  assertEquals(false,testanaTokRead.isSentStart());
  AnalyzedToken aTok=new AnalyzedToken("word","POS","lemma",13);
  aTok.setWhitespaceBefore(true);
  testanaTokRead=new AnalyzedTokenReadings(aTok);
  assertEquals(aTok,testanaTokRead.getAnalyzedToken(0));
  AnalyzedToken aTok2=new AnalyzedToken("word","POS","lemma",13);
  assertTrue(!aTok2.equals(testanaTokRead.getAnalyzedToken(0)));
  AnalyzedToken aTok3=new AnalyzedToken("word","POS","lemma");
  aTok3.setWhitespaceBefore(true);
  assertTrue(!aTok3.equals(testanaTokRead.getAnalyzedToken(0)));
}
