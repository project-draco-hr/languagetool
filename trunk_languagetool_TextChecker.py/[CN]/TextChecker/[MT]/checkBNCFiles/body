def checkBNCFiles(self, directory, checker):
    'Recursively load all files from a directory, extract\n\t\tall paragraphs and feed them to the style and grammar checker\n\t\tone by one.'
    para_regex = re.compile('<p>(.*?)</p>', re.DOTALL)
    sentence_regex = re.compile('<s n=\\d+>', re.DOTALL)
    xml_regex = re.compile('<.*?>', re.DOTALL)
    whitespace_regex = re.compile('\\s+', re.DOTALL)
    files = []
    filemode = 0
    if os.path.isfile(directory):
        files = [directory]
        filemode = 1
    else:
        files = os.listdir(directory)
    for file in files:
        filename = None
        if filemode:
            filename = file
        else:
            filename = os.path.join(directory, file)
        if os.path.isdir(filename):
            self.checkBNCFiles(filename, checker)
        elif (os.path.isfile(filename) and (filename.find('.') != (-1))):
            print  >> sys.stderr, ('Ignoring %s' % filename)
        elif os.path.isfile(filename):
            print  >> sys.stderr, ('FILE=%s' % filename)
            f = open(filename, 'r')
            s = f.read()
            f.close()
            s = unicode(s, 'iso-8859-1')
            s_matches = sentence_regex.findall(s)
            self.bnc_sentences = (self.bnc_sentences + len(s_matches))
            matches = para_regex.findall(s)
            for match in matches:
                self.bnc_paras = (self.bnc_paras + 1)
                s = xml_regex.sub('', match)
                s = whitespace_regex.sub(' ', s)
                s = Entities.Entities.cleanEntities(s)
                s = s.strip()
                (rule_matches, result, tagged_words) = checker.check(s)
                if (len(rule_matches) == 0):
                    pass
                else:
                    for rule_match in rule_matches:
                        s_mark = ('%s***%s' % (s[:rule_match.from_pos], s[rule_match.from_pos:]))
                        print ('%s:\n<!--%s: %s -->\n%s' % (rule_match.id, filename, s_mark.encode('utf8'), result.encode('utf8')))
    return
