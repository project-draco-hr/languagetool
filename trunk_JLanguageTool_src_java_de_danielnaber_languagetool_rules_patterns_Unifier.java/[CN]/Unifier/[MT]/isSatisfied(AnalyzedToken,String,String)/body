{
  if (allFeatsIn && equivalencesMatched.isEmpty()) {
    return false;
  }
  if (StringTools.isEmpty(feature)) {
    return false;
  }
  boolean unified=true;
  final String[] features=feature.split(",");
  String[] types;
  if (!allFeatsIn) {
    tokCnt++;
    if (equivalencesMatched.size() <= tokCnt) {
      final Map<String,Set<String>> mapTemp=new HashMap<String,Set<String>>();
      equivalencesMatched.add(mapTemp);
    }
    for (    String feat : features) {
      if (StringTools.isEmpty(type)) {
        types=equivalenceFeatures.get(feat).toArray(new String[equivalenceFeatures.get(feat).size()]);
      }
 else {
        types=type.split(",");
      }
      for (      String typename : types) {
        final Element testElem=equivalenceTypes.get(feat + ":" + typename);
        if (testElem == null) {
          return false;
        }
        if (testElem.isMatched(aToken)) {
          if (!equivalencesMatched.get(tokCnt).containsKey(feat)) {
            final Set<String> typeSet=new HashSet<String>();
            typeSet.add(typename);
            equivalencesMatched.get(tokCnt).put(feat,typeSet);
          }
 else {
            equivalencesMatched.get(tokCnt).get(feat).add(typename);
          }
        }
      }
      unified&=equivalencesMatched.get(tokCnt).containsKey(feat);
      if (!unified) {
        break;
      }
    }
    if (unified) {
      if (tokCnt == 0 || tokSequence.isEmpty()) {
        tokSequence.add(new AnalyzedTokenReadings(aToken));
      }
 else {
        tokSequence.get(0).addReading(aToken);
      }
    }
  }
 else {
    unified&=checkNext(aToken,features,type);
  }
  return unified ^ negation;
}
