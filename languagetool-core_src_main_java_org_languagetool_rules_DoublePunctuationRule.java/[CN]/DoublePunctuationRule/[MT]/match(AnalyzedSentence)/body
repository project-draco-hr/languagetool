{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=sentence.getTokens();
  int startPos=0;
  int dotCount=0;
  int commaCount=0;
  for (int i=1; i < tokens.length; i++) {
    String token=tokens[i].getToken();
    String nextToken=null;
    String prevToken=null;
    if (i < tokens.length - 1) {
      nextToken=tokens[i + 1].getToken();
    }
    if (i > 1) {
      prevToken=tokens[i - 2].getToken();
    }
    if (".".equals(token)) {
      dotCount++;
      commaCount=0;
      startPos=tokens[i].getStartPos();
    }
 else     if (getCommaCharacter().equals(token)) {
      commaCount++;
      dotCount=0;
      startPos=tokens[i].getStartPos();
    }
    if (dotCount == 2 && !".".equals(nextToken) && !"?".equals(prevToken) && !"!".equals(prevToken)) {
      int fromPos=Math.max(0,startPos - 1);
      RuleMatch ruleMatch=new RuleMatch(this,fromPos,startPos + 1,getDotMessage(),messages.getString("double_dots_short"));
      ruleMatch.setSuggestedReplacement(".");
      ruleMatches.add(ruleMatch);
      dotCount=0;
    }
 else     if (commaCount == 2 && !getCommaCharacter().equals(nextToken)) {
      int fromPos=Math.max(0,startPos - 1);
      RuleMatch ruleMatch=new RuleMatch(this,fromPos,startPos + 1,getCommaMessage(),messages.getString("double_commas_short"));
      ruleMatch.setSuggestedReplacement(getCommaCharacter());
      ruleMatches.add(ruleMatch);
      commaCount=0;
    }
    if (!".".equals(token) && !getCommaCharacter().equals(token)) {
      dotCount=0;
      commaCount=0;
    }
  }
  return toRuleMatchArray(ruleMatches);
}
