{
  String[] pattern=rule.get("pattern").split("\\ +");
  String oldSuggestion=null;
  if (rule.containsKey("word")) {
    oldSuggestion=rule.get("word");
  }
  String offendingToken="";
  int offendingTokenIndex=0;
  for (int i=0; i < pattern.length; i++) {
    String token=pattern[i];
    if (token.contains("'") && token.contains("|")) {
      offendingToken=token;
      offendingTokenIndex=i;
      break;
    }
  }
  String[] brokenToken=offendingToken.split("\\|");
  HashMap<String,ArrayList<String>> suffixMap=new HashMap<>();
  for (  String token : brokenToken) {
    if (!token.contains("'")) {
      suffixMap=addItemSmart(suffixMap,"regular",token);
    }
 else {
      String[] splitToken=token.split("'");
      if (splitToken.length == 1) {
        suffixMap=addItemSmart(suffixMap,"",splitToken[0]);
      }
 else {
        suffixMap=addItemSmart(suffixMap,splitToken[1],splitToken[0]);
      }
    }
  }
  Collection<String> newPatterns=new ArrayList<>();
  for (  String suffix : suffixMap.keySet()) {
    String newPattern="";
    for (int i=0; i < pattern.length; i++) {
      if (i == offendingTokenIndex) {
        Iterable<String> prefixes=suffixMap.get(suffix);
        String prefixString="";
        for (        String prefix : prefixes) {
          prefixString=prefixString + prefix + "|";
        }
        prefixString=prefixString.substring(0,prefixString.length() - 1);
        if (suffix.equals("regular")) {
          newPattern=newPattern + prefixString + " ";
        }
 else {
          newPattern=newPattern + prefixString + " ' "+ suffix+ " ";
        }
      }
 else {
        newPattern=newPattern + pattern[i] + " ";
      }
    }
    newPattern=newPattern.trim();
    newPatterns.add(newPattern);
  }
  List<HashMap<String,String>> allRules=new ArrayList<>();
  for (  String newPattern : newPatterns) {
    HashMap<String,String> r=new HashMap<>(rule);
    r.put("pattern",newPattern);
    if (oldSuggestion != null) {
    }
    allRules.add(r);
  }
  return allRules;
}
