{
  HashMap<String,String> urls=new HashMap<>();
  text=cleanup(text);
  if (text.contains(",")) {
    text=DECIMAL_COMMA_PATTERN.matcher(text).replaceAll(DECIMAL_COMMA_REPL);
  }
  if (text.contains("tp")) {
    Matcher matcher=URL_PATTERN.matcher(text);
    int urlReplaceChar=URL_START_REPLACE_CHAR;
    while (matcher.find()) {
      String urlGroup=matcher.group();
      String replaceChar=String.valueOf((char)urlReplaceChar);
      urls.put(replaceChar,urlGroup);
      text=matcher.replaceAll(replaceChar);
      urlReplaceChar++;
    }
  }
  int dotIndex=text.indexOf(".");
  boolean dotInsideSentence=dotIndex >= 0 && dotIndex < text.length() - 1;
  if (dotInsideSentence) {
    if (text.contains(ELLIPSIS)) {
      text=text.replace(ELLIPSIS,ELLIPSIS_SUBST);
    }
    if (text.contains(ELLIPSIS2)) {
      text=text.replace(ELLIPSIS2,ELLIPSIS2_SUBST);
    }
    if (text.contains(ELLIPSIS3)) {
      text=text.replace(ELLIPSIS3,ELLIPSIS3_SUBST);
    }
    text=DATE_PATTERN.matcher(text).replaceAll(DATE_PATTERN_REPL);
    text=DOTTED_NUMBERS_PATTERN.matcher(text).replaceAll(DOTTED_NUMBERS_REPL);
    text=ABBR_DOT_2_SMALL_LETTERS_PATTERN.matcher(text).replaceAll(ABBR_DOT_2_SMALL_LETTERS_REPL);
    text=ABBR_DOT_TYS_PATTERN.matcher(text).replaceAll("$1" + NON_BREAKING_DOT_SUBST + "$2");
    text=ABBR_DOT_LAT_PATTERN.matcher(text).replaceAll("$1" + NON_BREAKING_DOT_SUBST + "$2");
    text=ABBR_DOT_PROF_PATTERN.matcher(text).replaceAll("$1" + NON_BREAKING_DOT_SUBST + "$2");
    text=INITIALS_DOT_PATTERN_SP_2.matcher(text).replaceAll(INITIALS_DOT_REPL_SP_2);
    text=INITIALS_DOT_PATTERN_SP_1.matcher(text).replaceAll(INITIALS_DOT_REPL_SP_1);
    text=INITIALS_DOT_PATTERN_NSP_2.matcher(text).replaceAll(INITIALS_DOT_REPL_NSP_2);
    text=INITIALS_DOT_PATTERN_NSP_1.matcher(text).replaceAll(INITIALS_DOT_REPL_NSP_1);
    text=ABBR_DOT_KUB_SM_PATTERN.matcher(text).replaceAll("$1" + BREAKING_PLACEHOLDER + NON_BREAKING_DOT_SUBST);
    text=ABBR_DOT_S_G_PATTERN.matcher(text).replaceAll("$1" + NON_BREAKING_DOT_SUBST + "$2"+ NON_BREAKING_DOT_SUBST);
    text=ABBR_DOT_I_T_P_PATTERN.matcher(text).replaceAll("$1" + NON_BREAKING_DOT_SUBST + "$2"+ NON_BREAKING_DOT_SUBST);
    text=ABBR_DOT_RED_AVT_PATTERN.matcher(text).replaceAll("$1" + NON_BREAKING_DOT_SUBST + "$2");
    text=ABBR_DOT_NON_ENDING_PATTERN.matcher(text).replaceAll("$1" + NON_BREAKING_DOT_SUBST);
  }
  text=ABBR_DOT_ENDING_PATTERN.matcher(text).replaceAll("$1" + NON_BREAKING_DOT_SUBST);
  Matcher spacedDecimalMatcher=DECIMAL_SPACE_PATTERN.matcher(text);
  if (spacedDecimalMatcher.find()) {
    StringBuffer sb=new StringBuffer();
    do {
      String splitNumber=spacedDecimalMatcher.group(0);
      String splitNumberAdjusted=splitNumber.replace(' ',NON_BREAKING_SPACE_SUBST);
      splitNumberAdjusted=splitNumberAdjusted.replace('\u00A0',NON_BREAKING_SPACE_SUBST);
      spacedDecimalMatcher.appendReplacement(sb,splitNumberAdjusted);
    }
 while (spacedDecimalMatcher.find());
    spacedDecimalMatcher.appendTail(sb);
    text=sb.toString();
  }
  if (text.contains(":")) {
    text=COLON_NUMBERS_PATTERN.matcher(text).replaceAll(COLON_NUMBERS_REPL);
  }
  if (text.contains("(")) {
    text=BRACE_IN_WORD_PATTERN.matcher(text).replaceAll("$1" + LEFT_BRACE_SUBST + "$2"+ RIGHT_BRACE_SUBST);
  }
  if (text.contains(SOFT_HYPHEN_WRAP)) {
    text=text.replace(SOFT_HYPHEN_WRAP,SOFT_HYPHEN_WRAP_SUBST);
  }
  List<String> tokenList=new ArrayList<>();
  StringTokenizer st=new StringTokenizer(text,SPLIT_CHARS,true);
  while (st.hasMoreElements()) {
    String token=st.nextToken();
    if (token.equals(BREAKING_PLACEHOLDER))     continue;
    token=token.replace(DECIMAL_COMMA_SUBST,',');
    token=token.replace(NON_BREAKING_COLON_SUBST,':');
    token=token.replace(NON_BREAKING_SPACE_SUBST,' ');
    token=token.replace(LEFT_BRACE_SUBST,'(');
    token=token.replace(RIGHT_BRACE_SUBST,')');
    token=token.replace(NON_BREAKING_DOT_SUBST,'.');
    if (dotInsideSentence) {
      token=token.replace(ELLIPSIS_SUBST,ELLIPSIS);
      token=token.replace(ELLIPSIS2_SUBST,ELLIPSIS2);
      token=token.replace(ELLIPSIS3_SUBST,ELLIPSIS3);
    }
    token=token.replace(SOFT_HYPHEN_WRAP_SUBST,SOFT_HYPHEN_WRAP);
    if (!urls.isEmpty()) {
      for (      Entry<String,String> entry : urls.entrySet()) {
        token=token.replace(entry.getKey(),entry.getValue());
      }
    }
    tokenList.add(token);
  }
  return tokenList;
}
