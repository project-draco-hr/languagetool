{
  List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  String prevToken="";
  String prevPrevToken="";
  for (int i=1; i < tokens.length; i++) {
    String token=tokens[i].getToken();
    boolean isWord=true;
    if (token.length() == 1) {
      char c=token.charAt(0);
      if (!Character.isLetter(c)) {
        isWord=false;
      }
    }
    boolean germanException=false;
    if (prevPrevToken.equals(",") && language.equals(Language.GERMAN)) {
      germanException=true;
    }
    if (isWord && prevToken.toLowerCase().equals(token.toLowerCase()) && !germanException) {
      String msg=messages.getString("repetition");
      int prevPos=tokens[i - 1].getStartPos();
      int pos=tokens[i].getStartPos();
      RuleMatch ruleMatch=new RuleMatch(this,prevPos,pos + prevToken.length(),msg);
      ruleMatch.setSuggestedReplacement(prevToken);
      ruleMatches.add(ruleMatch);
    }
    prevPrevToken=prevToken;
    prevToken=token;
  }
  return toRuleMatchArray(ruleMatches);
}
