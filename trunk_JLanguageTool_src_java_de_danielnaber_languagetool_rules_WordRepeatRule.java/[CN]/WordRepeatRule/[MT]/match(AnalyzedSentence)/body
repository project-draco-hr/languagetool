{
  List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  AnalyzedTokenReadings[] tokens=text.getTokens();
  String prevToken="";
  String prevPrevToken="";
  int pos=0;
  int prevPos=0;
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i].getToken();
    if (token.trim().equals("")) {
    }
 else {
      boolean isWord=true;
      if (token.length() == 1) {
        char c=token.charAt(0);
        if (!Character.isLetter(c)) {
          isWord=false;
        }
      }
      boolean germanException=false;
      if (prevPrevToken.equals(",") && language == Language.GERMAN) {
        germanException=true;
      }
      if (isWord && prevToken.toLowerCase().equals(token.toLowerCase()) && !germanException) {
        String msg=messages.getString("repetition");
        RuleMatch ruleMatch=new RuleMatch(this,prevPos,pos + prevToken.length(),msg);
        ruleMatch.setSuggestedReplacement(prevToken);
        ruleMatches.add(ruleMatch);
      }
      prevPrevToken=prevToken;
      prevToken=token;
      prevPos=pos;
    }
    pos+=token.length();
  }
  return toRuleMatchArray(ruleMatches);
}
