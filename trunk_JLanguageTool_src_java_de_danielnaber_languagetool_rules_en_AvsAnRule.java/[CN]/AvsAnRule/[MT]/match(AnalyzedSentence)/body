{
  List ruleMatches=new ArrayList();
  AnalyzedToken[] tokens=text.getTokens();
  String prevToken="";
  int pos=0;
  int prevPos=0;
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i].getToken();
    String origToken=token;
    if (token.trim().equals("")) {
    }
 else {
      boolean doesRequireA=false;
      boolean doesRequireAn=false;
      boolean isException=false;
      String[] parts=token.split("[-']");
      if (parts.length >= 1 && !parts[0].equalsIgnoreCase("a")) {
        token=parts[0];
      }
      token=token.replaceAll("[^a-zA-Z0-9]","");
      if (token.length() == 0) {
        pos+=origToken.length();
        continue;
      }
      char tokenFirstChar=token.charAt(0);
      if (requiresA.contains(token.toLowerCase())) {
        isException=true;
        doesRequireA=true;
      }
      if (requiresAn.contains(token.toLowerCase())) {
        if (isException) {
          throw new IllegalStateException(token + " is listed in both det_a.txt and det_an.txt");
        }
        isException=true;
        doesRequireAn=true;
      }
      if (!isException) {
        if (isVowel(tokenFirstChar)) {
          doesRequireAn=true;
        }
 else {
          doesRequireA=true;
        }
      }
      String msg=null;
      if (prevToken.toLowerCase().equals("a") && doesRequireAn) {
        String repl="an";
        if (prevToken.equals("A"))         repl="An";
        msg="Use <em>" + repl + "</em> instead of '"+ prevToken+ "' if the following "+ "word starts with a vowel sound, e.g. 'an article', "+ "'an hour'";
      }
 else       if (prevToken.toLowerCase().equals("an") && doesRequireA) {
        String repl="a";
        if (prevToken.equals("An"))         repl="A";
        msg="Use <em>" + repl + "</em> instead of '"+ prevToken+ "' if the following "+ "word doesn't start with a vowel sound, e.g. 'a sentence', "+ "'a university'";
      }
      if (msg != null) {
        RuleMatch ruleMatch=new RuleMatch(this,prevPos,prevPos + prevToken.length(),msg);
        ruleMatches.add(ruleMatch);
      }
      prevToken=token;
      prevPos=pos;
    }
    pos+=origToken.length();
  }
  return toRuleMatchArray(ruleMatches);
}
