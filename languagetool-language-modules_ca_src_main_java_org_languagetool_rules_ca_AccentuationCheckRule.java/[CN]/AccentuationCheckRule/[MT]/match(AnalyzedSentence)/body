{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  for (int i=1; i < tokens.length; i++) {
    final String token;
    if (i == 1) {
      token=tokens[i].getToken().toLowerCase();
    }
 else {
      token=tokens[i].getToken();
    }
    final String prevToken=tokens[i - 1].getToken();
    String prevPrevToken="";
    if (i > 2) {
      prevPrevToken=tokens[i - 2].getToken();
    }
    String nextToken="";
    if (i < tokens.length - 1) {
      nextToken=tokens[i + 1].getToken();
    }
    String nextNextToken="";
    if (i < tokens.length - 2) {
      nextNextToken=tokens[i + 2].getToken();
    }
    boolean isRelevantWord=false;
    boolean isRelevantWord2=false;
    if (StringTools.isEmpty(token)) {
      continue;
    }
    if (relevantWords.containsKey(token)) {
      isRelevantWord=true;
    }
    if (relevantWords2.containsKey(token)) {
      isRelevantWord2=true;
    }
    String replacement=null;
    final Matcher mPreposicioDE=PREPOSICIO_DE.matcher(nextToken);
    final Matcher mExcepcionsDE=EXCEPCIONS_DARRERE_DE.matcher(nextNextToken);
    final Matcher mArticleELMS=ARTICLE_EL_MS.matcher(prevToken);
    final Matcher mArticleELFS=ARTICLE_EL_FS.matcher(prevToken);
    final Matcher mArticleELMP=ARTICLE_EL_MP.matcher(prevToken);
    final Matcher mArticleELFP=ARTICLE_EL_FP.matcher(prevToken);
    if (isRelevantWord && !matchPostagRegexp(tokens[i],GN)) {
      if (tokens[i - 1].hasPosTag("SPS00") && !tokens[i - 1].hasPosTag("RG") && !matchPostagRegexp(tokens[i - 1],DETERMINANT)&& !matchPostagRegexp(tokens[i],INFINITIU)) {
        replacement=relevantWords.get(token).getToken();
      }
 else       if (((matchPostagRegexp(tokens[i - 1],DETERMINANT_MS) && matchPostagRegexp(relevantWords.get(token),NOM_MS) && !token.equals("cantar")) || (matchPostagRegexp(tokens[i - 1],DETERMINANT_MP) && matchPostagRegexp(relevantWords.get(token),NOM_MP)) || (matchPostagRegexp(tokens[i - 1],DETERMINANT_FS) && matchPostagRegexp(relevantWords.get(token),NOM_FS) && !token.equals("venia")&& !token.equals("tenia")&& !token.equals("continua")&& !token.equals("genera")&& !token.equals("faria"))|| (matchPostagRegexp(tokens[i - 1],DETERMINANT_FP) && matchPostagRegexp(relevantWords.get(token),NOM_FP)))) {
        replacement=relevantWords.get(token).getToken();
      }
 else       if (i > 2 && matchPostagRegexp(tokens[i - 2],VERB_CONJUGAT) && ((matchPostagRegexp(tokens[i - 1],DETERMINANT_MS) && matchPostagRegexp(relevantWords.get(token),NOM_MS)) || (matchPostagRegexp(tokens[i - 1],DETERMINANT_MP) && matchPostagRegexp(relevantWords.get(token),NOM_MP)) || (matchPostagRegexp(tokens[i - 1],DETERMINANT_FS) && matchPostagRegexp(relevantWords.get(token),NOM_FS))|| (matchPostagRegexp(tokens[i - 1],DETERMINANT_FP) && matchPostagRegexp(relevantWords.get(token),NOM_FP)))) {
        replacement=relevantWords.get(token).getToken();
      }
 else       if (!matchPostagRegexp(tokens[i],PARTICIPI_MS) && !token.equals("venia") && !token.equals("venies")&& !token.equals("tenia")&& !token.equals("tenies")&& !token.equals("faria")&& !token.equals("faries")&& !token.equals("espero")&& !token.equals("continua")&& !token.equals("continues")&& !token.equals("cantar")&& !prevToken.equals("que")&& !prevToken.equals("qui")&& !prevToken.equals("qu??")&& mPreposicioDE.matches()&& !matchPostagRegexp(tokens[i - 1],NOT_IN_PREV_TOKEN)&& (i < tokens.length - 2)&& !matchPostagRegexp(tokens[i + 2],INFINITIU)&& !mExcepcionsDE.matches()&& !tokens[i - 1].hasPosTag("RG")) {
        replacement=relevantWords.get(token).getToken();
      }
 else       if (!token.equals("venia") && !token.equals("venies") && !token.equals("tenia")&& !token.equals("tenies")&& !token.equals("faria")&& !token.equals("faries")&& !token.equals("continua")&& !token.equals("continues")&& !token.equals("cantar")&& !token.equals("diferencia")&& !token.equals("diferencies")&& !token.equals("distancia")&& !token.equals("distancies")&& ((mArticleELMS.matches() && matchPostagRegexp(relevantWords.get(token),NOM_MS)) || (mArticleELFS.matches() && matchPostagRegexp(relevantWords.get(token),NOM_FS)) || (mArticleELMP.matches() && matchPostagRegexp(relevantWords.get(token),NOM_MP))|| (mArticleELFP.matches() && matchPostagRegexp(relevantWords.get(token),NOM_FP)))&& mPreposicioDE.matches()) {
        replacement=relevantWords.get(token).getToken();
      }
 else       if (!token.equals("pronuncia") && !token.equals("pronuncies") && !token.equals("venia")&& !token.equals("venies")&& !token.equals("tenia")&& !token.equals("tenies")&& !token.equals("continua")&& !token.equals("continues")&& !token.equals("faria")&& !token.equals("faries")&& !token.equals("genera")&& !token.equals("figuri")&& (i < tokens.length - 1)&& ((matchPostagRegexp(relevantWords.get(token),NOM_MS) && matchPostagRegexp(tokens[i + 1],ADJECTIU_MS)) || (matchPostagRegexp(relevantWords.get(token),NOM_FS) && matchPostagRegexp(tokens[i + 1],ADJECTIU_FS)) || (matchPostagRegexp(relevantWords.get(token),NOM_MP) && matchPostagRegexp(tokens[i + 1],ADJECTIU_MP))|| (matchPostagRegexp(relevantWords.get(token),NOM_FP) && matchPostagRegexp(tokens[i + 1],ADJECTIU_FP)))) {
        replacement=relevantWords.get(token).getToken();
      }
 else       if ((matchPostagRegexp(relevantWords.get(token),NOM_MS) && matchPostagRegexp(tokens[i - 1],ADJECTIU_MS) && !matchPostagRegexp(tokens[i],VERB_3S)&& !matchPostagRegexp(tokens[i],GRUP_VERBAL)) || (matchPostagRegexp(relevantWords.get(token),NOM_FS) && matchPostagRegexp(tokens[i - 1],ADJECTIU_FS) && !matchPostagRegexp(tokens[i],VERB_3S)) || (matchPostagRegexp(relevantWords.get(token),NOM_MP) && matchPostagRegexp(tokens[i - 1],ADJECTIU_MP))|| (matchPostagRegexp(relevantWords.get(token),NOM_FP) && matchPostagRegexp(tokens[i - 1],ADJECTIU_FP))) {
        replacement=relevantWords.get(token).getToken();
      }
 else       if (nextToken.equals("que") && ((mArticleELMS.matches() && matchPostagRegexp(relevantWords.get(token),NOM_MS)) || (mArticleELFS.matches() && matchPostagRegexp(relevantWords.get(token),NOM_FS)) || (mArticleELMP.matches() && matchPostagRegexp(relevantWords.get(token),NOM_MP))|| (mArticleELFP.matches() && matchPostagRegexp(relevantWords.get(token),NOM_FP)))) {
        replacement=relevantWords.get(token).getToken();
      }
    }
    if (isRelevantWord2 && !matchPostagRegexp(tokens[i],GN)) {
      if ((matchPostagRegexp(relevantWords2.get(token),ADJECTIU_MS) && matchPostagRegexp(tokens[i - 1],NOM_MS) && !tokens[i - 1].hasPosTag("_GN_FS")&& matchPostagRegexp(tokens[i],VERB_CONJUGAT)&& !matchPostagRegexp(tokens[i],VERB_3S)) || (matchPostagRegexp(relevantWords2.get(token),ADJECTIU_FS) && prevPrevToken.equalsIgnoreCase("de") && (prevToken.equals("manera") || prevToken.equals("forma"))) || (matchPostagRegexp(relevantWords2.get(token),ADJECTIU_MP) && matchPostagRegexp(tokens[i - 1],NOM_MP))|| (matchPostagRegexp(relevantWords2.get(token),ADJECTIU_FP) && matchPostagRegexp(tokens[i - 1],NOM_FP))) {
        replacement=relevantWords2.get(token).getToken();
      }
 else       if ((i < tokens.length - 1) && !prevToken.equals("que") && !matchPostagRegexp(tokens[i - 1],NOT_IN_PREV_TOKEN)&& ((matchPostagRegexp(relevantWords2.get(token),ADJECTIU_MS) && matchPostagRegexp(tokens[i + 1],NOM_MS) && matchPostagRegexp(tokens[i - 1],BEFORE_ADJECTIVE_MS)) || (matchPostagRegexp(relevantWords2.get(token),ADJECTIU_FS) && matchPostagRegexp(tokens[i + 1],NOM_FS) && matchPostagRegexp(tokens[i - 1],BEFORE_ADJECTIVE_FS)) || (matchPostagRegexp(relevantWords2.get(token),ADJECTIU_MP) && matchPostagRegexp(tokens[i + 1],NOM_MP) && matchPostagRegexp(tokens[i - 1],BEFORE_ADJECTIVE_MP))|| (matchPostagRegexp(relevantWords2.get(token),ADJECTIU_FP) && matchPostagRegexp(tokens[i + 1],NOM_FP) && matchPostagRegexp(tokens[i - 1],BEFORE_ADJECTIVE_FP)))) {
        replacement=relevantWords2.get(token).getToken();
      }
 else       if ((i < tokens.length - 1) && ((matchPostagRegexp(relevantWords2.get(token),ADJECTIU_MS) && matchPostagRegexp(tokens[i + 1],NOM_MS) && mArticleELMS.matches()) || (matchPostagRegexp(relevantWords2.get(token),ADJECTIU_FS) && matchPostagRegexp(tokens[i + 1],NOM_FS) && mArticleELFS.matches()) || (matchPostagRegexp(relevantWords2.get(token),ADJECTIU_MP) && matchPostagRegexp(tokens[i + 1],NOM_MP) && mArticleELMP.matches())|| (matchPostagRegexp(relevantWords2.get(token),ADJECTIU_FP) && matchPostagRegexp(tokens[i + 1],NOM_FP) && mArticleELFP.matches()))) {
        replacement=relevantWords2.get(token).getToken();
      }
    }
    if (replacement != null) {
      final String msg="Si \u00E9s un nom o un adjectiu, ha de portar accent.";
      final RuleMatch ruleMatch=new RuleMatch(this,tokens[i].getStartPos(),tokens[i].getStartPos() + token.length(),msg,"Falta un accent");
      ruleMatch.setSuggestedReplacement(replacement);
      ruleMatches.add(ruleMatch);
    }
  }
  return toRuleMatchArray(ruleMatches);
}
