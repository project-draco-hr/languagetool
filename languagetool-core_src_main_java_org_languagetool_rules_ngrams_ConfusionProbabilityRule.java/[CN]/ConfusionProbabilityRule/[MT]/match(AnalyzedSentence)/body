{
  String text=sentence.getText();
  List<GoogleToken> tokens=GoogleToken.getGoogleTokens(text,true,getWordTokenizer());
  List<RuleMatch> matches=new ArrayList<>();
  int pos=0;
  for (  GoogleToken googleToken : tokens) {
    String token=googleToken.token;
    List<ConfusionSet> confusionSets=wordToSets.get(token);
    boolean uppercase=false;
    if (confusionSets == null && token.length() > 0 && Character.isUpperCase(token.charAt(0))) {
      confusionSets=wordToSets.get(StringTools.lowercaseFirstChar(token));
      uppercase=true;
    }
    if (confusionSets != null) {
      for (      ConfusionSet confusionSet : confusionSets) {
        boolean isEasilyConfused=confusionSet != null;
        if (isEasilyConfused) {
          Set<ConfusionString> set=uppercase ? confusionSet.getUppercaseFirstCharSet() : confusionSet.getSet();
          ConfusionString betterAlternative=getBetterAlternativeOrNull(tokens.get(pos),tokens,set,confusionSet.getFactor());
          if (betterAlternative != null && !isException(text)) {
            ConfusionString stringFromText=getConfusionString(set,tokens.get(pos));
            String message=getMessage(stringFromText,betterAlternative);
            RuleMatch match=new RuleMatch(this,googleToken.startPos,googleToken.endPos,message);
            match.setSuggestedReplacement(betterAlternative.getString());
            matches.add(match);
          }
        }
      }
    }
    pos++;
  }
  return matches.toArray(new RuleMatch[matches.size()]);
}
