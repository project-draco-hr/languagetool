{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  for (int i=0; i < tokens.length; i++) {
    final String posToken=tokens[i].getAnalyzedToken(0).getPOSTag();
    if (posToken != null && posToken.equals(JLanguageTool.SENTENCE_START_TAGNAME))     continue;
    final AnalyzedGermanTokenReadings analyzedToken=(AnalyzedGermanTokenReadings)tokens[i];
    final boolean relevantPronoun=isRelevantPronoun(tokens,i);
    boolean ignore=couldBeRelativeClause(tokens,i);
    if (i > 0) {
      final String prevToken=tokens[i - 1].getToken().toLowerCase();
      if ((prevToken.equals("der") || prevToken.equals("die") || prevToken.equals("das")) && (tokens[i].getToken().equals("eine") || tokens[i].getToken().equals("einen"))) {
        ignore=true;
      }
    }
    if (analyzedToken.getToken().equals("nichts")) {
      ignore=true;
    }
    if ((analyzedToken.hasReadingOfType(POSType.DETERMINER) || relevantPronoun) && !ignore) {
      int tokenPos=i + 1;
      if (tokenPos >= tokens.length)       break;
      AnalyzedGermanTokenReadings nextToken=(AnalyzedGermanTokenReadings)tokens[tokenPos];
      nextToken=maybeAddAdjectiveReadings(nextToken,tokens,tokenPos);
      if (isNonPredicativeAdjective(nextToken)) {
        tokenPos=i + 2;
        if (tokenPos >= tokens.length)         break;
        final AnalyzedGermanTokenReadings nextNextToken=(AnalyzedGermanTokenReadings)tokens[tokenPos];
        if (nextNextToken.hasReadingOfType(POSType.NOMEN)) {
          final RuleMatch ruleMatch=checkDetAdjNounAgreement((AnalyzedGermanTokenReadings)tokens[i],nextToken,(AnalyzedGermanTokenReadings)tokens[i + 2]);
          if (ruleMatch != null) {
            ruleMatches.add(ruleMatch);
          }
        }
      }
 else       if (nextToken.hasReadingOfType(POSType.NOMEN)) {
        final RuleMatch ruleMatch=checkDetNounAgreement((AnalyzedGermanTokenReadings)tokens[i],(AnalyzedGermanTokenReadings)tokens[i + 1]);
        if (ruleMatch != null) {
          ruleMatches.add(ruleMatch);
        }
      }
    }
  }
  return toRuleMatchArray(ruleMatches);
}
