{
  if (!it.hasNext()) {
    return null;
  }
  final Element patternElement=it.next();
  patternElement.getExceptionList();
  final ArrayList<SpanQuery> list=new ArrayList<SpanQuery>();
  int skip=0;
  final SpanQuery termQuery=createSpanQuery(patternElement.getString(),"",patternElement.getNegation(),patternElement.isRegularExpression());
  final SpanQuery posQuery=createSpanQuery(patternElement.getPOStag(),LanguageToolFilter.POS_PREFIX,patternElement.getPOSNegation(),patternElement.isPOStagRegularExpression());
  if (termQuery != null && posQuery != null) {
    final SpanNearQuery q=new SpanNearQuery(new SpanQuery[]{termQuery,posQuery},0,false);
    list.add(q);
  }
 else   if (termQuery != null) {
    list.add(termQuery);
  }
 else   if (posQuery != null) {
    list.add(posQuery);
  }
 else {
    skip++;
  }
  if (patternElement.getSkipNext() >= 0) {
    skip+=patternElement.getSkipNext();
  }
 else {
    skip=Integer.MAX_VALUE;
  }
  final SpanQuery next=next(it);
  if (next != null) {
    list.add(next);
    return new SpanNearQuery(list.toArray(new SpanQuery[list.size()]),skip,true);
  }
 else {
    return list.get(0);
  }
}
