{
  final IStemmer dictLookup;
  try {
    dictLookup=new DictionaryLookup(getDictionary());
  }
 catch (  IOException e) {
    throw new RuntimeException("Could not load Catalan dictionary from " + getFileName(),e);
  }
  List<AnalyzedToken> additionalTaggedTokens=new ArrayList<>();
  if (word.endsWith("ment")) {
    final String lowerWord=word.toLowerCase(conversionLocale);
    final String possibleAdj=lowerWord.replaceAll("^(.+)ment$","$1");
    List<AnalyzedToken> taggerTokens;
    taggerTokens=asAnalyzedTokenList(possibleAdj,dictLookup.lookup(possibleAdj));
    for (    AnalyzedToken taggerToken : taggerTokens) {
      final String posTag=taggerToken.getPOSTag();
      if (posTag != null) {
        final Matcher m=ADJ_PART_FS.matcher(posTag);
        if (m.matches()) {
          additionalTaggedTokens.add(new AnalyzedToken(word,"RG",lowerWord));
          return additionalTaggedTokens;
        }
      }
    }
  }
  Matcher matcher=PREFIXES_FOR_VERBS.matcher(word);
  if (matcher.matches()) {
    final String possibleVerb=matcher.group(2).toLowerCase();
    List<AnalyzedToken> taggerTokens;
    taggerTokens=asAnalyzedTokenList(possibleVerb,dictLookup.lookup(possibleVerb));
    for (    AnalyzedToken taggerToken : taggerTokens) {
      final String posTag=taggerToken.getPOSTag();
      if (posTag != null) {
        final Matcher m=VERB.matcher(posTag);
        if (m.matches()) {
          String lemma=matcher.group(1).toLowerCase().concat(taggerToken.getLemma());
          additionalTaggedTokens.add(new AnalyzedToken(word,posTag,lemma));
        }
      }
    }
    return additionalTaggedTokens;
  }
  if (word.contains("\u0140") || word.contains("\u013f")) {
    final String lowerWord=word.toLowerCase(conversionLocale);
    final String possibleWord=lowerWord.replaceAll("\u0140","l??");
    List<AnalyzedToken> taggerTokens=asAnalyzedTokenList(word,dictLookup.lookup(possibleWord));
    return taggerTokens;
  }
  return null;
}
