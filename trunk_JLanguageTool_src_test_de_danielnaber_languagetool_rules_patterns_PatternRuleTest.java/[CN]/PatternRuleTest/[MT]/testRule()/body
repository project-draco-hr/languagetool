{
  PatternRule pr;
  RuleMatch[] matches;
  JLanguageTool langTool=new JLanguageTool();
  pr=new PatternRule("ID1",Language.ENGLISH,"\"one\"","test rule");
  matches=pr.match(langTool.getAnalyzedText("A non-matching sentence."));
  assertEquals(0,matches.length);
  matches=pr.match(langTool.getAnalyzedText("A matching sentence with one match."));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedText("one one and one: three matches"));
  assertEquals(3,matches.length);
  pr=new PatternRule("ID1",Language.ENGLISH,"\"one\" \"two\"","test rule");
  matches=pr.match(langTool.getAnalyzedText("this is one not two"));
  assertEquals(0,matches.length);
  matches=pr.match(langTool.getAnalyzedText("this is two one"));
  assertEquals(0,matches.length);
  matches=pr.match(langTool.getAnalyzedText("this is one two three"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedText("one two"));
  assertEquals(1,matches.length);
  pr=new PatternRule("ID1",Language.ENGLISH,"\"one|foo|xxxx\" \"two\"","test rule");
  matches=pr.match(langTool.getAnalyzedText("one foo three"));
  assertEquals(0,matches.length);
  matches=pr.match(langTool.getAnalyzedText("one two"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedText("foo two"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedText("one foo two"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedText("y x z one two blah foo"));
  assertEquals(1,matches.length);
  pr=new PatternRule("ID1",Language.ENGLISH,"\"one|foo|xxxx\" \"two|yyy\"","test rule");
  matches=pr.match(langTool.getAnalyzedText("one, yyy"));
  assertEquals(0,matches.length);
  matches=pr.match(langTool.getAnalyzedText("one yyy"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedText("xxxx two"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedText("xxxx yyy"));
  assertEquals(1,matches.length);
}
