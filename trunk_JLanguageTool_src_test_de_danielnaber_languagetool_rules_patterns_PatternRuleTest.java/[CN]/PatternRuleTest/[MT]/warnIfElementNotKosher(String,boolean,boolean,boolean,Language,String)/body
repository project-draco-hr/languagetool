{
  if (!isRegularExpression && PROBABLE_PATTERN.matcher(stringValue).find()) {
    System.err.println("The " + lang.toString() + " rule: "+ ruleId+ " contains "+ "\""+ stringValue+ "\" that is not marked as regular expression but probably is one.");
  }
  if (isRegularExpression && "".equals(stringValue)) {
    System.err.println("The " + lang.toString() + " rule: "+ ruleId+ " contains an empty string "+ "\""+ stringValue+ "\" that is marked as regular expression.");
  }
 else   if (isRegularExpression && !PROBABLE_PATTERN.matcher(stringValue).find()) {
    System.err.println("The " + lang.toString() + " rule: "+ ruleId+ " contains "+ "\""+ stringValue+ "\" that is marked as regular expression but probably is not one.");
  }
  if (isInflected && "".equals(stringValue)) {
    System.err.println("The " + lang.toString() + " rule: "+ ruleId+ " contains "+ "\""+ stringValue+ "\" that is marked as inflected but is empty, so the attribute is redundant.");
  }
  if (isRegularExpression && !isCaseSensitive) {
    final Matcher matcher=CASE_PATTERN.matcher(stringValue);
    if (matcher.find()) {
      final String letter1=matcher.group(1);
      final String letter2=matcher.group(2);
      final boolean lettersAreSameWithDifferentCase=!letter1.equals(letter2) && letter1.toLowerCase().equals(letter2.toLowerCase());
      if (lettersAreSameWithDifferentCase) {
        System.err.println("The " + lang.toString() + " rule: "+ ruleId+ " contains regexp part ["+ letter1+ letter2+ "] which is useless without case_sensitive=\"yes\".");
      }
    }
  }
  if (isRegularExpression && stringValue.contains("|")) {
    final String[] groups=stringValue.split("\\)");
    for (    final String group : groups) {
      final String[] alt=group.split("\\|");
      final Set<String> partSet=new HashSet<String>();
      final Set<String> partSetNoCase=new HashSet<String>();
      for (      String part : alt) {
        final String partNoCase=isCaseSensitive ? part : part.toLowerCase();
        if (partSetNoCase.contains(partNoCase)) {
          if (partSet.contains(part)) {
            System.err.println("The " + lang.toString() + " rule: "+ ruleId+ " contains duplicated disjunction part ("+ part+ ") within "+ "\""+ stringValue+ "\".");
          }
 else {
            System.err.println("The " + lang.toString() + " rule: "+ ruleId+ " contains duplicated non case sensitive disjunction part ("+ part+ ") within "+ "\""+ stringValue+ "\". Did you "+ "forget case_sensitive=\"yes\"?");
          }
        }
        partSetNoCase.add(partNoCase);
        partSet.add(part);
      }
    }
  }
}
