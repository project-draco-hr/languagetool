{
  final List<Rule> oldRules=new ArrayList<Rule>();
  final List<Rule> newRules=new ArrayList<Rule>();
  final List<Rule> modifiedRules=new ArrayList<Rule>();
  for (int i=0; i < 2; i++) {
    final List<Rule> rules;
    if (i == 0) {
      rules=oldRules;
    }
 else {
      rules=newRules;
    }
    final Scanner scanner=new Scanner(new FileReader(i == 0 ? "old" : "new"));
    Rule r=new Rule();
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine();
      if (line.contains("id=\"") && line.contains("rule")) {
        if (!line.contains("name=\"")) {
          line+=scanner.nextLine();
        }
        if (r.numberOfExamples() > 0) {
          rules.add(r);
          r=new Rule();
        }
        r.id=line;
        r.name=line;
        r.id=r.id.replaceAll(".*id=\"","").replaceAll("\".*","");
        r.name=r.name.replaceAll(".*name=\"","").replaceAll("\".*","");
        for (        Rule rule : rules) {
          if (r.name.equals(rule.name)) {
            r.name+=" ";
          }
        }
      }
 else       if (line.contains("type=\"correct\"")) {
        while (!line.contains("</example>")) {
          line+=scanner.nextLine();
        }
        r.correct.add(line.replaceAll("marker","b").replaceAll(".*<example.*?>","").replaceAll("</example>.*",""));
      }
 else       if (line.contains("type=\"incorrect\"")) {
        while (!line.contains("</example>")) {
          line+=scanner.nextLine();
        }
        r.incorrect.add(line.replaceAll("marker","b").replaceAll(".*<example.*?>","").replaceAll("</example>.*",""));
      }
    }
    scanner.close();
  }
  Collections.sort(oldRules);
  Collections.sort(newRules);
  final FileWriter fileWriter=new FileWriter("changes_" + lang + ".html");
  final BufferedWriter out=new BufferedWriter(fileWriter);
  for (  Rule newRule1 : newRules) {
    boolean found=false;
    for (int j=0; j < oldRules.size() && !found; j++) {
      if (newRule1.id.equals(oldRules.get(j).id) || newRule1.name.equals(oldRules.get(j).name)) {
        found=true;
        if (newRule1.numberOfExamples() > oldRules.get(j).numberOfExamples()) {
          final Rule r=newRule1;
          for (int k=0; k < r.correct.size(); k++) {
            for (int l=0; l < oldRules.get(j).correct.size(); l++) {
              if (r.correct.get(k).equals(oldRules.get(j).correct.get(l))) {
                r.correct.remove(k);
                if (k > 0)                 k--;
              }
            }
          }
          for (int k=0; k < r.incorrect.size(); k++) {
            for (int l=0; l < oldRules.get(j).incorrect.size(); l++) {
              if (r.incorrect.get(k).equals(oldRules.get(j).incorrect.get(l))) {
                r.incorrect.remove(k);
                if (k > 0)                 k--;
              }
            }
          }
          modifiedRules.add(r);
        }
      }
    }
    if (!found) {
      out.write("<tr class=\"new\"><td>4NEWRULE</td><td>" + newRule1.name + newRule1.getExamples(false)+ "</td></tr>\n");
    }
  }
  for (  Rule modifiedRule : modifiedRules) {
    out.write("<tr class=\"modified\"><td>6IMPROVEDRULE</td><td>" + modifiedRule.name + modifiedRule.getExamples(true)+ "</td></tr>\n");
  }
  for (  Rule oldRule : oldRules) {
    boolean found=false;
    for (    Rule newRule : newRules) {
      if (newRule.id.equals(oldRule.id) || newRule.name.equals(oldRule.name)) {
        found=true;
      }
    }
    if (!found) {
      out.write("<tr class=\"removed\"><td>5REMOVEDRULE</td><td>" + oldRule.name + "</td></tr>\n");
    }
  }
  out.close();
}
