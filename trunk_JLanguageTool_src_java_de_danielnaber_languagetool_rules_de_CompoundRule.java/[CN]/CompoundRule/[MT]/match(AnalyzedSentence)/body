{
  List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  Queue<AnalyzedTokenReadings> prevTokens=new ArrayBlockingQueue<AnalyzedTokenReadings>(MAX_TERMS);
  for (int i=0; i < tokens.length + MAX_TERMS / 2 + 1; i++) {
    AnalyzedTokenReadings token=null;
    if (i >= tokens.length)     token=new AnalyzedTokenReadings(new AnalyzedToken("","",prevTokens.peek().getStartPos()));
 else     token=tokens[i];
    if (i == 0) {
      addToQueue(token,prevTokens);
      continue;
    }
    StringBuilder sb=new StringBuilder();
    int j=0;
    AnalyzedTokenReadings firstMatchToken=null;
    List<String> stringsToCheck=new ArrayList<String>();
    Map<String,AnalyzedTokenReadings> stringToToken=new HashMap<String,AnalyzedTokenReadings>();
    for (Iterator iter=prevTokens.iterator(); iter.hasNext(); ) {
      AnalyzedTokenReadings atr=(AnalyzedTokenReadings)iter.next();
      if (j == 0)       firstMatchToken=atr;
 else       sb.append(" ");
      sb.append(atr.getToken());
      if (j >= 1) {
        stringsToCheck.add(sb.toString());
        stringToToken.put(sb.toString(),atr);
      }
      j++;
    }
    for (int k=stringsToCheck.size() - 1; k >= 0; k--) {
      String stringtoCheck=stringsToCheck.get(k);
      if (incorrectCompounds.contains(stringtoCheck)) {
        AnalyzedTokenReadings atr=stringToToken.get(stringtoCheck);
        String msg="Komposita werden ??blicherweise zusammen oder mit Bindestrich geschrieben.";
        RuleMatch ruleMatch=new RuleMatch(this,firstMatchToken.getStartPos(),atr.getStartPos() + atr.getToken().length(),msg);
        List<String> repl=new ArrayList<String>();
        repl.add(stringtoCheck.replace(' ','-'));
        if (!StringTools.isAllUppercase(stringtoCheck)) {
          repl.add(mergeCompound(stringtoCheck));
        }
        ruleMatch.setSuggestedReplacements(repl);
        ruleMatches.add(ruleMatch);
        break;
      }
    }
    addToQueue(token,prevTokens);
  }
  return toRuleMatchArray(ruleMatches);
}
