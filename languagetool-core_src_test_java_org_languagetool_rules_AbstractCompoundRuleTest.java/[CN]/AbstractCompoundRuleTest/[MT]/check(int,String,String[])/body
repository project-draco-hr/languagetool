{
  assertNotNull("Please initialize langTool!",langTool);
  assertNotNull("Please initialize 'rule'!",rule);
  RuleMatch[] ruleMatches=rule.match(langTool.getAnalyzedSentence(text));
  assertEquals("Expected " + expectedErrors + "errors, but got: "+ Arrays.toString(ruleMatches),expectedErrors,ruleMatches.length);
  if (expSuggestions != null && expectedErrors != 1) {
    throw new RuntimeException("Sorry, test case can only check suggestion if there's one rule match");
  }
  if (expSuggestions != null) {
    RuleMatch ruleMatch=ruleMatches[0];
    String errorMessage=String.format("Got these suggestions: %s, expected %s ",ruleMatch.getSuggestedReplacements(),Arrays.toString(expSuggestions));
    assertEquals(errorMessage,expSuggestions.length,ruleMatch.getSuggestedReplacements().size());
    int i=0;
    for (    Object element : ruleMatch.getSuggestedReplacements()) {
      String suggestion=(String)element;
      assertEquals(expSuggestions[i],suggestion);
      i++;
    }
  }
}
