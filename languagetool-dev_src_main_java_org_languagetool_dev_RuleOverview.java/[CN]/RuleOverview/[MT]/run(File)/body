{
  System.out.println("<b>Rules in LanguageTool " + JLanguageTool.VERSION + "</b><br />");
  System.out.println("Date: " + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + "<br /><br />\n");
  System.out.println("<table class=\"tablesorter sortable\" style=\"width: auto\">");
  System.out.println("<thead>");
  System.out.println("<tr>");
  System.out.println("  <th valign='bottom' width=\"200\">Language</th>");
  System.out.println("  <th valign='bottom' align=\"left\" width=\"60\">XML<br/>rules</th>");
  System.out.println("  <th></th>");
  System.out.println("  <th align=\"left\" width=\"60\">Java<br/>rules</th>");
  System.out.println("  <th align=\"left\" width=\"60\">False<br/>friends</th>");
  System.out.println("  <th align=\"left\" width=\"60\">Spell<br/>check</th>");
  System.out.println("  <th align=\"left\" width=\"60\">Confusion<br/>pairs</th>");
  System.out.println("  <th valign='bottom' align=\"left\" width=\"70\">Activity</th>");
  System.out.println("  <th valign='bottom' align=\"left\">Rule Maintainers</th>");
  System.out.println("</tr>");
  System.out.println("</thead>");
  System.out.println("<tbody>");
  final List<Language> sortedLanguages=getSortedLanguages();
  final String falseFriendFile=JLanguageTool.getDataBroker().getRulesDir() + File.separator + "false-friends.xml";
  final String falseFriendRules=StringTools.readStream(Tools.getStream(falseFriendFile),"utf-8").replaceAll("(?s)<!--.*?-->","").replaceAll("(?s)<rules.*?>","");
  int overallJavaCount=0;
  int langSpecificWebsiteCount=0;
  RuleActivityOverview activity=new RuleActivityOverview();
  for (  final Language lang : sortedLanguages) {
    if (lang.isVariant()) {
      continue;
    }
    System.out.print("<tr>");
    final String langCode=lang.getShortName();
    final File langSpecificWebsite=new File(webRoot,langCode);
    final List<String> variants=getVariantNames(sortedLanguages,lang);
    String variantsText="";
    if (variants.size() > 0) {
      variantsText="<br/><span class='langVariants'>Variants for: " + StringUtils.join(variants,", ") + "</span>";
    }
    if (langSpecificWebsite.isDirectory()) {
      System.out.print("<td valign=\"top\"><a href=\"../" + langCode + "/\">"+ lang.getName()+ "</a>"+ variantsText+ "</td>");
      langSpecificWebsiteCount++;
    }
 else {
      System.out.print("<td valign=\"top\">" + lang.getName() + " "+ variantsText+ "</td>");
    }
    int allRules=countRulesForLanguage(lang);
    if (allRules == 0) {
      System.out.println("<td valign=\"top\" align=\"right\">0</td>");
    }
 else {
      final String ruleBase="https://github.com/languagetool-org/languagetool/blob/master/languagetool-language-modules/" + langCode + "/src/main/resources/org/languagetool/rules/";
      System.out.print("<td valign=\"top\" align=\"right\">" + allRules + "</td>");
      System.out.print("<td valign=\"top\" align=\"right\">" + "<a href=\"http://community.languagetool.org/rule/list?lang=" + langCode + "\">Browse</a>,&nbsp;"+ "<a href=\""+ ruleBase+ langCode+ "/grammar.xml\">XML</a>"+ "</td>");
    }
    final File dir=new File("../languagetool-language-modules/" + langCode + "/src/main/java"+ JLanguageTool.getDataBroker().getRulesDir()+ "/"+ langCode);
    if (!dir.exists()) {
      System.out.print("<td valign=\"top\" align=\"right\">0</td>");
    }
 else {
      final File[] javaRules=dir.listFiles(new JavaFilter(lang.getName()));
      final int javaCount=javaRules.length;
      if (javaCount > 0) {
        final String sourceCodeLink="https://github.com/languagetool-org/languagetool/blob/master/languagetool-language-modules/" + langCode + "/src/main/java/org/languagetool/rules/"+ langCode+ "/";
        System.out.print("<td valign=\"top\" align=\"right\"><a href=\"" + sourceCodeLink + "\">"+ javaCount+ "</a></td>");
      }
 else {
        System.out.print("<td valign=\"top\" align=\"right\">" + javaCount + "</td>");
      }
      overallJavaCount++;
    }
    System.out.print("<td valign=\"top\" align=\"right\">" + countFalseFriendRules(falseFriendRules,lang) + "</td>");
    SpellcheckSupport spellcheckSupport=spellcheckSupport(lang,sortedLanguages);
    String spellSupportStr="";
    if (spellcheckSupport == SpellcheckSupport.Full) {
      spellSupportStr="???";
    }
 else     if (spellcheckSupport == SpellcheckSupport.NoSuggestion) {
      spellSupportStr="<span title='spell check without suggestions'>(???)</span>";
    }
    System.out.print("<td valign=\"top\" align=\"right\">" + spellSupportStr + "</td>");
    System.out.print("<td valign=\"top\" align=\"right\">" + countConfusionPairs(lang) + "</td>");
    int commits=activity.getActivityFor(lang,365 / 2);
    int width=(int)Math.max(commits * 0.5,1);
    String images="";
    if (width > 50) {
      images+="<img title='" + commits + " commits in the last 6 months' src='../images/bar-end.png' width='22' height='10'/>";
      width=50;
    }
    images+="<img title='" + commits + " commits in the last 6 months' src='../images/bar.png' width='"+ width+ "' height='10'/>";
    System.out.print("<td valign=\"top\" align=\"right\"><span style='display:none'>" + commits + "</span>"+ images+ "</td>");
    String maintainerInfo=getMaintainerInfo(lang);
    String maintainerText;
    boolean greyOutMaintainer=false;
    if (langCode.equals("pt")) {
      maintainerText="<span class='maintainerNeeded'><a href='http://wiki.languagetool.org/tasks-for-language-maintainers'>Looking for a maintainer for Brazilian Portuguese</a></span> - ";
    }
 else     if (lang.getMaintainedState() != LanguageMaintainedState.ActivelyMaintained) {
      maintainerText="<span class='maintainerNeeded'><a href='http://wiki.languagetool.org/tasks-for-language-maintainers'>Looking for maintainer</a></span> - ";
      greyOutMaintainer=true;
    }
 else {
      maintainerText="";
    }
    if (greyOutMaintainer) {
      maintainerInfo="<span class='previousMaintainer'><br>previous maintainer: " + maintainerInfo + "</span>";
    }
    System.out.print("<td valign=\"top\" align=\"left\">" + maintainerText + maintainerInfo+ "</td>");
    System.out.println("</tr>");
  }
  if (overallJavaCount == 0) {
    throw new RuntimeException("No Java rules found - start this script from the languagetool-standalone directory");
  }
  if (langSpecificWebsiteCount == 0) {
    throw new RuntimeException("No language specific websites found - please let the web root parameter " + "point to the 'www' directory (current value: '" + webRoot + "')");
  }
  System.out.println("</tbody>");
  System.out.println("</table>");
}
