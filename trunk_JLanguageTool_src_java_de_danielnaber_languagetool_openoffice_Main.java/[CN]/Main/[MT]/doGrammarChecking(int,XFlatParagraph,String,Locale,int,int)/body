{
  GrammarCheckingResult paRes=new GrammarCheckingResult();
  paRes.nEndOfSentencePos=suggEndOfSentencePos - startOfSentencePos;
  paRes.xFlatParagraph=xPara;
  paRes.xGrammarChecker=this;
  paRes.aText=paraText.substring(startOfSentencePos,suggEndOfSentencePos);
  paRes.aLocale=locale;
  paRes.nDocumentId=docID;
  if (hasLocale(locale)) {
    if (!Language.getLanguageForShortName(locale.Language).equals(docLanguage) || langTool == null) {
      docLanguage=Language.getLanguageForShortName(locale.Language);
      if (docLanguage == null) {
        return paRes;
      }
      try {
        langTool=new JLanguageTool(docLanguage,config.getMotherTongue());
        langTool.activateDefaultPatternRules();
        langTool.activateDefaultFalseFriendRules();
      }
 catch (      Exception exception) {
        showError(exception);
      }
    }
    if (config.getDisabledRuleIds() != null) {
      for (      String id : config.getDisabledRuleIds()) {
        langTool.disableRule(id);
      }
    }
    Set<String> disabledCategories=config.getDisabledCategoryNames();
    if (disabledCategories != null) {
      for (      String categoryName : disabledCategories) {
        langTool.disableCategory(categoryName);
      }
    }
    try {
      List<RuleMatch> ruleMatches=langTool.check(paraText.substring(startOfSentencePos,suggEndOfSentencePos));
      if (ruleMatches.size() > 0) {
        SingleGrammarError[] errorArray=new SingleGrammarError[ruleMatches.size()];
        ;
        int i=0;
        for (        RuleMatch myRuleMatch : ruleMatches) {
          errorArray[i]=createOOoError(locale,myRuleMatch);
          i++;
        }
        paRes.aGrammarErrors=errorArray;
      }
    }
 catch (    IOException exception) {
      showError(exception);
    }
  }
  return paRes;
}
