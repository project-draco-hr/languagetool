{
  println("======================");
  printf("Starting evaluation on " + sentences.size() + " sentences with %s/%s:\n",token,homophoneToken);
  JLanguageTool lt=new JLanguageTool(language);
  List<Rule> allActiveRules=lt.getAllActiveRules();
  for (  Rule activeRule : allActiveRules) {
    lt.disableRule(activeRule.getId());
  }
  for (  Sentence sentence : sentences) {
    String textToken=isCorrect ? token : homophoneToken;
    String plainText=sentence.getText();
    String replacement=plainText.indexOf(textToken) == 0 ? StringTools.uppercaseFirstChar(token) : token;
    String replacedTokenSentence=isCorrect ? plainText : plainText.replaceFirst("(?i)\\b" + textToken + "\\b",replacement);
    AnalyzedSentence analyzedSentence=lt.getAnalyzedSentence(replacedTokenSentence);
    for (    Long factor : evalFactors) {
      rule.setConfusionSet(new ConfusionSet(factor,homophoneToken,token));
      RuleMatch[] matches=rule.match(analyzedSentence);
      boolean consideredCorrect=matches.length == 0;
      String displayStr=plainText.replaceFirst("(?i)\\b" + textToken + "\\b","**" + replacement + "**");
      if (consideredCorrect && isCorrect) {
        evalValues.get(factor).trueNegatives++;
      }
 else       if (!consideredCorrect && isCorrect) {
        evalValues.get(factor).falsePositives++;
        println(factor + " false positive: " + displayStr);
      }
 else       if (consideredCorrect && !isCorrect) {
        evalValues.get(factor).falseNegatives++;
      }
 else {
        evalValues.get(factor).truePositives++;
      }
    }
  }
}
