{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  String prevToken="";
  for (int i=1; i < tokens.length; i++) {
    final String token=tokens[i].getToken();
    boolean isWord=true;
    if (token.length() == 1) {
      final char c=token.charAt(0);
      if (!Character.isLetter(c)) {
        isWord=false;
      }
    }
    final boolean isException=ignore(tokens,i);
    if (isWord && prevToken.toLowerCase().equals(token.toLowerCase()) && !isException) {
      final String msg=messages.getString("repetition");
      final int prevPos=tokens[i - 1].getStartPos();
      final int pos=tokens[i].getStartPos();
      final RuleMatch ruleMatch=new RuleMatch(this,prevPos,pos + prevToken.length(),msg,messages.getString("desc_repetition_short"));
      ruleMatch.setSuggestedReplacement(prevToken);
      ruleMatches.add(ruleMatch);
    }
    prevToken=token;
  }
  return toRuleMatchArray(ruleMatches);
}
