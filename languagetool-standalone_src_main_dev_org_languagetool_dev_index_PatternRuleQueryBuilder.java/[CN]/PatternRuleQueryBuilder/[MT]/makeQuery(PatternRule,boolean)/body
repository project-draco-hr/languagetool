{
  SpanQuery query=null;
  Element prevElement=null;
  int position=0;
  int skipCount=0;
  for (  Element element : patternRule.getElements()) {
    SpanQuery spanQuery;
    try {
      spanQuery=makeQuery(element,position,true);
    }
 catch (    UnsupportedPatternRuleException e) {
      if (throwExceptionOnUnsupportedElement) {
        throw e;
      }
 else {
        spanQuery=getMatchAllQuery(element);
      }
    }
    if (query == null) {
      if (element.getNegation()) {
        query=null;
      }
 else {
        query=spanQuery;
      }
    }
 else {
      final int skip=getSkip(prevElement);
      if (skip == 0) {
        skipCount++;
      }
 else {
        skipCount=0;
      }
      if (element.getNegation()) {
        final SpanNearQuery excludeQuery=new SpanNearQuery(new SpanQuery[]{query,spanQuery},getSkip(prevElement) + skipCount,true);
        query=new SpanNotQuery(query,excludeQuery);
      }
 else {
        query=new SpanNearQuery(new SpanQuery[]{query,spanQuery},getSkip(prevElement) + skipCount,true);
      }
    }
    prevElement=element;
    position++;
  }
  return query;
}
