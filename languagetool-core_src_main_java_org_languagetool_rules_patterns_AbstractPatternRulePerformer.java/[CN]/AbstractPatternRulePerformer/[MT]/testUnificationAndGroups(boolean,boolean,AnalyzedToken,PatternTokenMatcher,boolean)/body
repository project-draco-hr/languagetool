{
  boolean thisMatched=matched;
  boolean elemIsMatched=alreadyTested || elemMatcher.isMatched(matchToken);
  PatternToken elem=elemMatcher.getPatternToken();
  if (rule.testUnification) {
    if (matched && elem.isUnified()) {
      if (elem.isUniNegated()) {
        thisMatched=!unifier.isUnified(matchToken,elem.getUniFeatures(),lastReading,elemIsMatched);
      }
 else {
        if (elem.isLastInUnification()) {
          thisMatched=unifier.isUnified(matchToken,elem.getUniFeatures(),lastReading,elemIsMatched);
          if (thisMatched && rule.isGetUnified()) {
            unifiedTokens=unifier.getFinalUnified();
          }
        }
 else {
          unifier.isUnified(matchToken,elem.getUniFeatures(),lastReading,elemIsMatched);
        }
      }
    }
    if (!elem.isUnified()) {
      unifier.reset();
    }
  }
  elemMatcher.addMemberAndGroup(matchToken);
  if (lastReading) {
    thisMatched&=elemMatcher.checkAndGroup(thisMatched);
  }
  return thisMatched;
}
