{
  final List<AnalyzedToken> l=new ArrayList<>();
  if (formattedToken != null) {
    if (match.isStaticLemma()) {
      matchedToken.leaveReading(new AnalyzedToken(matchedToken.getToken(),match.getPosTag(),formattedToken.getToken()));
      formattedToken=matchedToken;
    }
    String token=formattedToken.getToken();
    Pattern regexMatch=match.getRegexMatch();
    String regexReplace=match.getRegexReplace();
    if (regexMatch != null && regexReplace != null) {
      token=regexMatch.matcher(token).replaceAll(regexReplace);
    }
    token=convertCase(token,token,null);
    String posTag=match.getPosTag();
    if (posTag != null) {
      final int numRead=formattedToken.getReadingsLength();
      if (match.isPostagRegexp()) {
        Pattern pPosRegexMatch=match.getPosRegexMatch();
        String posTagReplace=match.getPosTagReplace();
        String targetPosTag;
        for (int i=0; i < numRead; i++) {
          final String testTag=formattedToken.getAnalyzedToken(i).getPOSTag();
          if (testTag != null && pPosRegexMatch.matcher(testTag).matches()) {
            targetPosTag=testTag;
            if (posTagReplace != null) {
              targetPosTag=pPosRegexMatch.matcher(targetPosTag).replaceAll(posTagReplace);
            }
            l.add(new AnalyzedToken(token,targetPosTag,formattedToken.getAnalyzedToken(i).getLemma()));
            l.get(l.size() - 1).setWhitespaceBefore(formattedToken.isWhitespaceBefore());
          }
        }
        if (l.isEmpty()) {
          l.addAll(getNewToken(numRead,token));
        }
      }
 else {
        l.addAll(getNewToken(numRead,token));
      }
      String lemma=formattedToken.getAnalyzedToken(0).getLemma();
      if (formattedToken.isSentenceEnd()) {
        l.add(new AnalyzedToken(formattedToken.getToken(),SENTENCE_END_TAGNAME,lemma));
      }
      if (formattedToken.isParagraphEnd()) {
        l.add(new AnalyzedToken(formattedToken.getToken(),PARAGRAPH_END_TAGNAME,lemma));
      }
    }
  }
  if (l.isEmpty()) {
    return formattedToken;
  }
  final AnalyzedTokenReadings anTkRead=new AnalyzedTokenReadings(l.toArray(new AnalyzedToken[l.size()]),formattedToken.getStartPos());
  anTkRead.setWhitespaceBefore(formattedToken.isWhitespaceBefore());
  if (!formattedToken.getChunkTags().isEmpty()) {
    anTkRead.setChunkTags(formattedToken.getChunkTags());
  }
  if (formattedToken.isImmunized()) {
    anTkRead.immunize();
  }
  return anTkRead;
}
