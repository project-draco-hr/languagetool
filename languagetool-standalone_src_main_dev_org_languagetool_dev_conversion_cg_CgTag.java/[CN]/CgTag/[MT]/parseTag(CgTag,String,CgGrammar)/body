{
  tag.type=new HashSet<Integer>();
  ;
  if (to != null && to.length() > 0) {
    char[] tmp=to.toCharArray();
    int tmpIndex=0;
    while (tmp.length > 0 && (tmp[tmpIndex] == '!' || tmp[tmpIndex] == '^')) {
      if (tmp[tmpIndex] == '!') {
        tag.type.add(TAGS.T_NEGATIVE.value);
        tmpIndex++;
      }
      if (tmp[tmpIndex] == '^') {
        tag.type.add(TAGS.T_FAILFAST.value);
        tmpIndex++;
      }
    }
    if (tmp[tmpIndex] == 'T' && tmp[tmpIndex + 1] == ':') {
      System.out.println("Warning: the tag on line " + grammar.lines + " looks like a misplaced template marker.");
    }
    if (tmp[tmpIndex] == 'M' && tmp[tmpIndex + 1] == 'E' && tmp[tmpIndex + 2] == 'T' && tmp[tmpIndex + 3] == 'A' && tmp[tmpIndex + 4] == ':') {
      tag.type.add(TAGS.T_META.value);
      tmpIndex+=5;
    }
    if (tmp[tmpIndex] == 'V' && tmp[tmpIndex + 1] == 'A' && tmp[tmpIndex + 2] == 'R' && tmp[tmpIndex + 3] == ':') {
      tag.type.add(TAGS.T_VARIABLE.value);
      tmpIndex+=4;
    }
    if (tmp[tmpIndex] == 'S' && tmp[tmpIndex + 1] == 'E' && tmp[tmpIndex + 2] == 'T' && tmp[tmpIndex + 3] == ':') {
      tag.type.add(TAGS.T_SET.value);
      tmpIndex+=4;
    }
    if (tmp[tmpIndex] == 'V' && tmp[tmpIndex + 1] == 'S' && tmp[tmpIndex + 2] == 'T' && tmp[tmpIndex + 3] == 'R' && tmp[tmpIndex + 4] == ':') {
      tag.type.add(TAGS.T_VARSTRING.value);
      tag.type.add(TAGS.T_VSTR.value);
      tmpIndex+=5;
      StringBuilder sb=new StringBuilder();
      for (int i=tmpIndex; i < tmp.length; i++) {
        sb.append(tmp[i]);
      }
      tag.tag=sb.toString();
    }
    if (tmpIndex < tmp.length && (tmp[tmpIndex] == '"' || tmp[tmpIndex] == '<')) {
      int endIndex=tmp.length - 1;
      while (tmp[endIndex] == 'i' || tmp[endIndex] == 'r' || tmp[endIndex] == 'v') {
        if (!tag.type.contains(TAGS.T_VARSTRING.value) && tmp[endIndex] == 'v') {
          tag.type.add(TAGS.T_VARSTRING.value);
          endIndex--;
          continue;
        }
        if (!tag.type.contains(TAGS.T_REGEXP.value) && tmp[endIndex] == 'r') {
          tag.type.add(TAGS.T_REGEXP.value);
          endIndex--;
          continue;
        }
        if (!tag.type.contains(TAGS.T_CASE_INSENSITIVE.value) && tmp[endIndex] == 'i') {
          tag.type.add(TAGS.T_CASE_INSENSITIVE.value);
          endIndex--;
          continue;
        }
        break;
      }
      if (tmp[tmpIndex] == '"' && tmp[endIndex] == '"') {
        if (tmp[tmpIndex + 1] == '<' && tmp[endIndex - 1] == '>') {
          tag.type.add(TAGS.T_WORDFORM.value);
        }
 else {
          tag.type.add(TAGS.T_BASEFORM.value);
        }
      }
      if ((tmp[tmpIndex] == '"' && tmp[endIndex] == '"') || (tmp[tmpIndex] == '<' && tmp[endIndex] == '>')) {
        tag.type.add(TAGS.T_TEXTUAL.value);
      }
 else {
        if (tag.type.contains(TAGS.T_VARSTRING.value)) {
          tag.type.remove(TAGS.T_VARSTRING.value);
        }
        if (tag.type.contains(TAGS.T_REGEXP.value)) {
          tag.type.remove(TAGS.T_REGEXP.value);
        }
        if (tag.type.contains(TAGS.T_CASE_INSENSITIVE.value)) {
          tag.type.remove(TAGS.T_CASE_INSENSITIVE.value);
        }
        if (tag.type.contains(TAGS.T_WORDFORM.value)) {
          tag.type.remove(TAGS.T_WORDFORM.value);
        }
        if (tag.type.contains(TAGS.T_BASEFORM.value)) {
          tag.type.remove(TAGS.T_BASEFORM.value);
        }
        endIndex=tmp.length - 1;
      }
    }
    for (int i=0; i < tmp.length; ++i) {
      if (tmp[i] == '\\') {
        ++i;
      }
      if (i >= tmp.length) {
        break;
      }
      tag.tag=tag.tag.concat(Character.toString(tmp[i]));
    }
    if (tag.tag.isEmpty()) {
      System.err.println("Error: parsing tag on line " + grammar.lines + " resulted in an empty tag.");
      System.exit(1);
    }
    tag.comparison_hash=CgStrings.hash_sdbm_uchar(tag.tag,0,0);
    if (!tag.tag.isEmpty() && tag.tag.charAt(0) == '<' && tag.tag.charAt(tag.tag.length() - 1) == '>') {
      tag=parseNumeric(tag);
    }
    if (tag.tag.equals(CgTextualParser.stringbits[STRINGS.S_MULTIPLY.value])) {
      tag.type.add(TAGS.T_ANY.value);
    }
 else     if (tag.tag.equals(CgTextualParser.stringbits[STRINGS.S_UU_LEFT.value])) {
      tag.type.add(TAGS.T_PAR_LEFT.value);
    }
 else     if (tag.tag.equals(CgTextualParser.stringbits[STRINGS.S_UU_RIGHT.value])) {
      tag.type.add(TAGS.T_PAR_RIGHT.value);
    }
 else     if (tag.tag.equals(CgTextualParser.stringbits[STRINGS.S_UU_TARGET.value])) {
      tag.type.add(TAGS.T_TARGET.value);
    }
 else     if (tag.tag.equals(CgTextualParser.stringbits[STRINGS.S_UU_MARK.value])) {
      tag.type.add(TAGS.T_MARK.value);
    }
 else     if (tag.tag.equals(CgTextualParser.stringbits[STRINGS.S_UU_ATTACHTO.value])) {
      tag.type.add(TAGS.T_ATTACHTO.value);
    }
    if (tag.type.contains(TAGS.T_REGEXP.value)) {
      if (tag.tag.equals(CgTextualParser.stringbits[STRINGS.S_RXTEXT_ANY.value]) || tag.tag.equals(CgTextualParser.stringbits[STRINGS.S_RXBASE_ANY.value]) || tag.tag.equals(CgTextualParser.stringbits[STRINGS.S_RXWORD_ANY.value])) {
        tag.type.add(TAGS.T_REGEXP_ANY.value);
        if (tag.type.contains(TAGS.T_REGEXP.value)) {
          tag.type.remove(TAGS.T_REGEXP.value);
        }
      }
 else {
        String rt="^";
        rt=rt.concat(tag.tag);
        rt=rt.concat("$");
        if (tag.type.contains(TAGS.T_CASE_INSENSITIVE.value)) {
          regexp=Pattern.compile(rt,Pattern.CASE_INSENSITIVE);
        }
 else {
          regexp=Pattern.compile(rt);
        }
      }
    }
  }
  if (tag.type.contains(TAGS.T_SPECIAL.value)) {
    tag.type.remove(TAGS.T_SPECIAL.value);
  }
  if (tag.type.contains(TAGS.T_ANY.value) || tag.type.contains(TAGS.T_TARGET.value) || tag.type.contains(TAGS.T_MARK.value)|| tag.type.contains(TAGS.T_ATTACHTO.value)|| tag.type.contains(TAGS.T_PAR_LEFT.value)|| tag.type.contains(TAGS.T_PAR_RIGHT.value)|| tag.type.contains(TAGS.T_NUMERICAL.value)|| tag.type.contains(TAGS.T_VARIABLE.value)|| tag.type.contains(TAGS.T_META.value)|| tag.type.contains(TAGS.T_NEGATIVE.value)|| tag.type.contains(TAGS.T_FAILFAST.value)|| tag.type.contains(TAGS.T_CASE_INSENSITIVE.value)|| tag.type.contains(TAGS.T_REGEXP.value)|| tag.type.contains(TAGS.T_REGEXP_ANY.value)|| tag.type.contains(TAGS.T_VARSTRING.value)|| tag.type.contains(TAGS.T_SET.value)) {
    tag.type.add(TAGS.T_SPECIAL.value);
  }
  if (tag.type.contains(TAGS.T_VARSTRING.value) && (tag.type.contains(TAGS.T_REGEXP.value) || tag.type.contains(TAGS.T_REGEXP_ANY.value) || tag.type.contains(TAGS.T_VARIABLE.value)|| tag.type.contains(TAGS.T_META.value))) {
    System.err.println("Error: cannot mix varstring with any other special features on line " + grammar.lines);
    System.exit(1);
  }
  return tag;
}
