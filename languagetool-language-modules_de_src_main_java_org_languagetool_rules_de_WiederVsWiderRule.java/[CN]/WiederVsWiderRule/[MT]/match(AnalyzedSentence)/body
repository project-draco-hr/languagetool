{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  boolean foundSpiegelt=false;
  boolean foundWieder=false;
  boolean foundWider=false;
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i].getToken();
    if (token.equalsIgnoreCase("spiegelt") || token.equalsIgnoreCase("spiegeln") || token.equalsIgnoreCase("spiegelte")|| token.equalsIgnoreCase("spiegelten")|| token.equalsIgnoreCase("spiegelst")) {
      foundSpiegelt=true;
    }
 else     if (token.equalsIgnoreCase("wieder") && foundSpiegelt) {
      foundWieder=true;
    }
 else     if (token.equalsIgnoreCase("wider") && foundSpiegelt) {
      foundWider=true;
    }
    if (foundSpiegelt && foundWieder && !foundWider&& !(tokens.length > i + 2 && (tokens[i + 1].getToken().equals("wider") || tokens[i + 2].getToken().equals("wider")))) {
      String msg="'wider' in 'widerspiegeln' wird mit 'i' statt mit 'ie' " + "geschrieben, z.B. 'Das spiegelt die Situation gut wider.'";
      String shortMsg="'wider' in 'widerspiegeln' wird mit 'i' geschrieben";
      int pos=tokens[i].getStartPos();
      RuleMatch ruleMatch=new RuleMatch(this,pos,pos + token.length(),msg,shortMsg);
      ruleMatch.setSuggestedReplacement("wider");
      ruleMatches.add(ruleMatch);
      foundSpiegelt=false;
      foundWieder=false;
      foundWider=false;
    }
  }
  return toRuleMatchArray(ruleMatches);
}
