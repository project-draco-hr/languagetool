{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  boolean repetition=false;
  Set<String> inflectedWords=new TreeSet<>();
  String prevLemma;
  int curToken=0;
  for (int i=1; i < tokens.length; i++) {
    String token=tokens[i].getToken();
    boolean isWord=true;
    boolean hasLemma=true;
    if (token.length() < 2) {
      isWord=false;
    }
    for (    AnalyzedToken analyzedToken : tokens[i]) {
      String posTag=analyzedToken.getPOSTag();
      if (posTag != null) {
        if (StringTools.isEmpty(posTag)) {
          isWord=false;
          break;
        }
        String lemma=analyzedToken.getLemma();
        if (lemma == null) {
          hasLemma=false;
          break;
        }
        if (getExcludedWordsPattern().contains(lemma)) {
          isWord=false;
          break;
        }
        Matcher m2=getExcludedPos().matcher(posTag);
        if (m2.matches()) {
          isWord=false;
          break;
        }
      }
 else {
        hasLemma=false;
      }
    }
    Matcher m1=getExcludedNonWordsPattern().matcher(tokens[i].getToken());
    if (isWord && m1.matches()) {
      isWord=false;
    }
    prevLemma="";
    if (isWord) {
      boolean notSentEnd=false;
      for (      AnalyzedToken analyzedToken : tokens[i]) {
        String pos=analyzedToken.getPOSTag();
        if (pos != null) {
          notSentEnd|=JLanguageTool.SENTENCE_END_TAGNAME.equals(pos);
        }
        if (hasLemma) {
          String curLemma=analyzedToken.getLemma();
          if (!prevLemma.equals(curLemma) && !notSentEnd) {
            if (inflectedWords.contains(curLemma) && curToken != i) {
              repetition=true;
            }
 else {
              inflectedWords.add(analyzedToken.getLemma());
              curToken=i;
            }
          }
          prevLemma=curLemma;
        }
 else {
          if (inflectedWords.contains(tokens[i].getToken()) && !notSentEnd) {
            repetition=true;
          }
 else {
            inflectedWords.add(tokens[i].getToken());
          }
        }
      }
    }
    if (repetition) {
      int pos=tokens[i].getStartPos();
      RuleMatch ruleMatch=new RuleMatch(this,pos,pos + token.length(),getMessage(),getShortMessage());
      ruleMatches.add(ruleMatch);
      repetition=false;
    }
  }
  return toRuleMatchArray(ruleMatches);
}
