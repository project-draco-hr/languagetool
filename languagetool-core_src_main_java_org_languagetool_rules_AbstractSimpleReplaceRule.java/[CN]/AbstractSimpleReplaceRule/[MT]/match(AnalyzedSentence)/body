{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  for (  AnalyzedTokenReadings tokenReadings : tokens) {
    if (JLanguageTool.SENTENCE_START_TAGNAME.equals(tokenReadings.getAnalyzedToken(0).getPOSTag()))     continue;
    if (tokenReadings.isImmunized() || tokenReadings.isIgnoredBySpeller()) {
      continue;
    }
    String originalTokenStr=tokenReadings.getToken();
    if (ignoreTaggedWords && isTagged(tokenReadings)) {
      continue;
    }
    String tokenString=cleanup(originalTokenStr);
    List<String> possibleReplacements=getWrongWords().get(originalTokenStr);
    if (possibleReplacements == null) {
      possibleReplacements=getWrongWords().get(tokenString);
    }
    if (possibleReplacements == null && checkLemmas) {
      possibleReplacements=new ArrayList<>();
      List<String> lemmas=new ArrayList<>();
      for (      AnalyzedToken analyzedToken : tokenReadings.getReadings()) {
        String lemma=analyzedToken.getLemma();
        if (lemma != null && getWrongWords().containsKey(lemma) && !lemmas.contains(lemma)) {
          lemmas.add(cleanup(lemma));
        }
      }
      for (      String lemma : lemmas) {
        List<String> replacements=getWrongWords().get(lemma);
        possibleReplacements.addAll(replacements);
      }
      possibleReplacements=possibleReplacements.stream().distinct().collect(Collectors.toList());
    }
    if (possibleReplacements != null && possibleReplacements.size() > 0) {
      List<String> replacements=new ArrayList<>();
      replacements.addAll(possibleReplacements);
      if (replacements.contains(originalTokenStr)) {
        replacements.remove(originalTokenStr);
      }
      if (replacements.size() > 0) {
        RuleMatch potentialRuleMatch=createRuleMatch(tokenReadings,replacements);
        ruleMatches.add(potentialRuleMatch);
      }
    }
  }
  return toRuleMatchArray(ruleMatches);
}
