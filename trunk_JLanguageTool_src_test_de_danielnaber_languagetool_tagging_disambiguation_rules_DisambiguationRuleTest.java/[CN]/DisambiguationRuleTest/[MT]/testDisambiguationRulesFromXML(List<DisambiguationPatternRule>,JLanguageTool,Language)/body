{
  for (  final DisambiguationPatternRule rule : rules) {
    final String id=rule.getId();
    if (rule.getUntouchedExamples() != null) {
      final List<String> goodSentences=rule.getUntouchedExamples();
      for (      String goodSentence : goodSentences) {
        goodSentence=goodSentence.replaceAll("[\\n\\t]+","");
        goodSentence=cleanXML(goodSentence);
        assertTrue(goodSentence.trim().length() > 0);
        final AnalyzedSentence sent=disambiguateUntil(rules,id,languageTool.getRawAnalyzedSentence(goodSentence));
        assertTrue("The untouched example for rule " + id + "was touched!",sent.equals(rule.replace(sent)));
      }
    }
    final List<DisambiguatedExample> examples=rule.getExamples();
    if (examples != null) {
      for (      final DisambiguatedExample example : examples) {
        final String outputForms=example.getDisambiguated();
        assertTrue("No input form found for: " + id,outputForms != null);
        assertTrue(outputForms.trim().length() > 0);
        final int expectedMatchStart=example.getExample().indexOf("<marker>");
        final int expectedMatchEnd=example.getExample().indexOf("</marker>") - "<marker>".length();
        if (expectedMatchStart == -1 || expectedMatchEnd == -1) {
          fail(lang + ": No error position markup ('<marker>...</marker>') in bad example in rule " + rule);
        }
        final String inputForms=example.getAmbiguous();
        assertTrue("No input form found for: " + id,inputForms != null);
        assertTrue(inputForms.trim().length() > 0);
        assertTrue("Input and output forms for rule " + id + "are the same!",!outputForms.equals(inputForms));
        final AnalyzedSentence cleanInput=languageTool.getRawAnalyzedSentence(cleanXML(example.getExample()));
        final AnalyzedSentence sent=disambiguateUntil(rules,id,languageTool.getRawAnalyzedSentence(cleanXML(example.getExample())));
        final AnalyzedSentence disambiguatedSent=rule.replace(disambiguateUntil(rules,id,languageTool.getRawAnalyzedSentence(cleanXML(example.getExample()))));
        assertTrue("Disambiguated sentence is equal to the non-disambiguated sentence for rule :" + id,!cleanInput.equals(disambiguatedSent));
        assertTrue("Disambiguated sentence is equal to the input sentence for rule :" + id,!sent.equals(disambiguatedSent));
        String reading="";
        for (        final AnalyzedTokenReadings readings : sent.getTokens()) {
          if (readings.isSentStart() && inputForms.indexOf("<S>") == -1) {
            continue;
          }
          if (readings.getStartPos() == expectedMatchStart) {
            final AnalyzedTokenReadings r[]={readings};
            reading=new AnalyzedSentence(r).toString();
            assertTrue("Wrong marker position in the example for the rule " + id,readings.getStartPos() == expectedMatchStart && readings.getStartPos() + readings.getToken().length() == expectedMatchEnd);
            break;
          }
        }
        assertTrue("The input form for the rule " + id + " in the example: "+ example.toString()+ " is different than expected (expected "+ inputForms+ " but got "+ reading+ ").",reading.equals(inputForms));
        for (        final AnalyzedTokenReadings readings : disambiguatedSent.getTokens()) {
          if (readings.isSentStart() && outputForms.indexOf("<S>") == -1) {
            continue;
          }
          if (readings.getStartPos() == expectedMatchStart) {
            final AnalyzedTokenReadings r[]={readings};
            reading=new AnalyzedSentence(r).toString();
            assertTrue(readings.getStartPos() == expectedMatchStart && readings.getStartPos() + readings.getToken().length() == expectedMatchEnd);
            break;
          }
        }
        assertTrue("The output form for the rule " + id + " in the example: "+ example.toString()+ " is different than expected (expected "+ outputForms+ " but got "+ reading+ ").",reading.equals(outputForms));
      }
    }
  }
}
