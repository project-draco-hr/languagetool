{
  super(id,description,language,patternTokens,false);
  this.message=message;
  this.shortMessage=shortMessage;
  this.elementNo=new ArrayList<>();
  this.suggestionsOutMsg=Objects.requireNonNull(suggestionsOutMsg);
  String prevName="";
  String curName;
  int cnt=0;
  int loopCnt=0;
  boolean tempUseList=false;
  for (  PatternToken pToken : this.patternTokens) {
    if (pToken.isPartOfPhrase()) {
      curName=pToken.getPhraseName();
      if (StringTools.isEmpty(prevName) || prevName.equals(curName)) {
        cnt++;
        tempUseList=true;
      }
 else {
        elementNo.add(cnt);
        curName="";
        cnt=0;
      }
      prevName=curName;
      loopCnt++;
      if (loopCnt == this.patternTokens.size() && !StringTools.isEmpty(prevName)) {
        elementNo.add(cnt);
      }
    }
 else {
      if (cnt > 0) {
        elementNo.add(cnt);
      }
      elementNo.add(1);
      loopCnt++;
    }
  }
  useList=tempUseList;
  simpleRuleTokens=getSet(false);
  inflectedRuleTokens=getSet(true);
}
