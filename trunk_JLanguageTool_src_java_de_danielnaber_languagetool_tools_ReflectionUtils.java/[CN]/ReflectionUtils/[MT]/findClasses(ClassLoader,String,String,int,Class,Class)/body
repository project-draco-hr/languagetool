{
  final Map<Class,String> foundClasses=new HashMap<Class,String>();
  try {
    final String packagePath=packageName.replace('.','/');
    final Enumeration<URL> resources_=classLoader.getResources(packagePath);
    final Set<URI> uniqResources=new HashSet<URI>();
    while (resources_.hasMoreElements()) {
      final URI resource=resources_.nextElement().toURI();
      uniqResources.add(resource);
    }
    for (    final URI res : uniqResources) {
      final URL resource=res.toURL();
      if (resource.getProtocol().startsWith("jar")) {
        findClassesInJar(packageName,classNameRegEx,subdirLevel,classExtends,interfaceImplements,foundClasses,resource);
      }
 else {
        findClassesInDirectory(classLoader,packageName,classNameRegEx,subdirLevel,classExtends,interfaceImplements,foundClasses,resource);
      }
    }
  }
 catch (  final Exception ex) {
    throw new ClassNotFoundException("Loading rules failed: " + ex.getMessage(),ex);
  }
  return foundClasses.keySet().toArray(new Class[foundClasses.size()]);
}
