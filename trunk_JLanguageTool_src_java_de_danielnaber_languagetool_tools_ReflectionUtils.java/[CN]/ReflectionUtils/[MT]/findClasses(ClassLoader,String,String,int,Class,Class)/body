{
  List<Class> foundClasses=new ArrayList<Class>();
  try {
    String packagePath=packageName.replace('.','/');
    Enumeration<URL> resources_=classLoader.getResources(packagePath);
    Set<URL> uniqResources=new HashSet<URL>();
    for (; resources_.hasMoreElements(); ) {
      URL resource=resources_.nextElement();
      if (resource.getProtocol().equals("jar")) {
        String jarPath=resource.getPath().substring(0,resource.getPath().indexOf('!'));
        uniqResources.add(new URL(jarPath));
      }
 else {
        uniqResources.add(resource);
      }
    }
    for (    URL resource : uniqResources) {
      if (resource.getPath().endsWith("jar")) {
        JarFile currentFile=new JarFile(new File(resource.toURI()));
        for (Enumeration<JarEntry> e=currentFile.entries(); e.hasMoreElements(); ) {
          JarEntry current=(JarEntry)e.nextElement();
          String name=current.getName();
          if (name.endsWith(".class")) {
            String classNm=name.replaceAll("/",".").replace(".class","");
            int pointIdx=classNm.lastIndexOf('.');
            String classShortNm=pointIdx == -1 ? classNm : classNm.substring(pointIdx + 1);
            if (classNm.startsWith(packageName) && (classNameRegEx == null || classShortNm.matches(classNameRegEx))) {
              String subName=classNm.substring(packageName.length() + 1);
              if (countOccurences(subName,'.') > subdirLevel)               continue;
              Class clazz=Class.forName(classNm);
              if (!isMaterial(clazz))               continue;
              if (classExtends == null || isExtending(clazz,classExtends.getName())) {
                if (interfaceImplements == null || isImplementing(clazz,interfaceImplements)) {
                  foundClasses.add(clazz);
                }
              }
            }
          }
        }
      }
 else {
        File directory=new File(resource.toURI());
        if (!directory.exists() && !directory.isDirectory()) {
          throw new Exception("directory does not exist: " + directory.getAbsolutePath());
        }
        for (        File file : directory.listFiles()) {
          if (file.isFile() && file.getName().endsWith(".class")) {
            String classShortNm=file.getName().substring(0,file.getName().lastIndexOf('.'));
            if (classNameRegEx == null || classShortNm.matches(classNameRegEx)) {
              Class clazz=Class.forName(packageName + "." + classShortNm);
              if (!isMaterial(clazz))               continue;
              if (classExtends == null || isExtending(clazz,classExtends.getName())) {
                if (interfaceImplements == null || isImplementing(clazz,interfaceImplements)) {
                  foundClasses.add(clazz);
                }
              }
            }
          }
        }
        if (subdirLevel > 0) {
          for (          File dir : directory.listFiles()) {
            if (dir.isDirectory()) {
              Class[] subLevelClasses=findClasses(classLoader,packageName + "." + dir.getName(),classNameRegEx,subdirLevel - 1,classExtends,interfaceImplements);
              foundClasses.addAll(Arrays.asList(subLevelClasses));
            }
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    throw new ClassNotFoundException("Loading rules failed: " + ex.getMessage(),ex);
  }
  return foundClasses.toArray(new Class[0]);
}
