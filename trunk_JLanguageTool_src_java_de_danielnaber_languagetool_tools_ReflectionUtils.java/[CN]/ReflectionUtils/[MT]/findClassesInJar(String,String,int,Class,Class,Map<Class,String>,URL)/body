{
  final JarURLConnection conn=(JarURLConnection)resource.openConnection();
  final JarFile currentFile=conn.getJarFile();
  for (final Enumeration<JarEntry> e=currentFile.entries(); e.hasMoreElements(); ) {
    final JarEntry current=e.nextElement();
    final String name=current.getName();
    if (name.endsWith(".class")) {
      final String className=name.replaceAll("/",".").replace(".class","");
      final int pointIdx=className.lastIndexOf('.');
      final String classShortNm=pointIdx == -1 ? className : className.substring(pointIdx + 1);
      if (className.startsWith(packageName) && (classNameRegEx == null || classShortNm.matches(classNameRegEx))) {
        final String subName=className.substring(packageName.length() + 1);
        if (countOccurrences(subName,'.') > subdirLevel) {
          continue;
        }
        final Class clazz=Class.forName(className);
        if (foundClasses.containsKey(clazz)) {
          throw new RuntimeException("Duplicate class definition:\n" + clazz.getName() + ", found in\n"+ currentFile.getName()+ " and\n"+ foundClasses.get(clazz));
        }
        if (!isMaterial(clazz)) {
          continue;
        }
        if (classExtends == null || isExtending(clazz,classExtends.getName()) && interfaceImplements == null || isImplementing(clazz,interfaceImplements)) {
          foundClasses.put(clazz,currentFile.getName());
        }
      }
    }
  }
}
