{
  JarURLConnection conn=(JarURLConnection)resource.openConnection();
  JarFile currentFile=conn.getJarFile();
  for (Enumeration<JarEntry> e=currentFile.entries(); e.hasMoreElements(); ) {
    JarEntry current=(JarEntry)e.nextElement();
    String name=current.getName();
    if (name.endsWith(".class")) {
      String classNm=name.replaceAll("/",".").replace(".class","");
      int pointIdx=classNm.lastIndexOf('.');
      String classShortNm=pointIdx == -1 ? classNm : classNm.substring(pointIdx + 1);
      if (classNm.startsWith(packageName) && (classNameRegEx == null || classShortNm.matches(classNameRegEx))) {
        String subName=classNm.substring(packageName.length() + 1);
        if (countOccurences(subName,'.') > subdirLevel)         continue;
        Class clazz=Class.forName(classNm);
        if (foundClasses.contains(clazz)) {
          throw new RuntimeException("Duplicate class definition:\n" + clazz.getName() + ", found in\n"+ currentFile.getName());
        }
        if (!isMaterial(clazz))         continue;
        if (classExtends == null || isExtending(clazz,classExtends.getName())) {
          if (interfaceImplements == null || isImplementing(clazz,interfaceImplements)) {
            foundClasses.add(clazz);
          }
        }
      }
    }
  }
}
