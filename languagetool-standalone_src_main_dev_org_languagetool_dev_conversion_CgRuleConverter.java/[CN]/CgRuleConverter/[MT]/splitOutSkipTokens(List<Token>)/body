{
  ArrayList<List<Token>> list=new ArrayList<>();
  ArrayList<Token> scanningTokens=new ArrayList<>();
  ArrayList<Token> reverseScanningTokens=new ArrayList<>();
  ArrayList<Token> normalTokens=new ArrayList<>();
  for (  Token token : tokens) {
    if (token.scanahead)     scanningTokens.add(token);
 else     if (token.scanbehind)     reverseScanningTokens.add(token);
 else     normalTokens.add(token);
  }
  for (int s=0; s < scanningTokens.size(); s++) {
    final Token scanning=scanningTokens.get(s);
    for (int n=0; n < normalTokens.size(); n++) {
      final Token normal=normalTokens.get(n);
      if (normal.offset >= scanning.offset) {
        List<Token> newTokenList1=new ArrayList<>();
        List<Token> newTokenList2=new ArrayList<>();
        for (        Token ntoken : normalTokens) {
          newTokenList1.add(ntoken);
          newTokenList2.add(ntoken);
        }
        Token newNormalToken=new Token(scanning);
        newNormalToken.scanahead=false;
        newTokenList1.add(newNormalToken);
        scanning.offset++;
        newTokenList2.add(scanning);
        list.add(newTokenList1);
        list.add(newTokenList2);
        return list;
      }
    }
  }
  for (int s=0; s < reverseScanningTokens.size(); s++) {
    final Token scanning=reverseScanningTokens.get(s);
    for (int n=0; n < normalTokens.size(); n++) {
      final Token normal=normalTokens.get(n);
      if (normal.offset <= scanning.offset) {
        List<Token> newTokenList1=new ArrayList<>();
        List<Token> newTokenList2=new ArrayList<>();
        for (        Token ntoken : normalTokens) {
          newTokenList1.add(ntoken);
          newTokenList2.add(ntoken);
        }
        Token newNormalToken=new Token(scanning);
        newNormalToken.scanbehind=false;
        newTokenList1.add(newNormalToken);
        scanning.offset--;
        newTokenList2.add(scanning);
        list.add(newTokenList1);
        list.add(newTokenList2);
        return list;
      }
    }
  }
  return null;
}
