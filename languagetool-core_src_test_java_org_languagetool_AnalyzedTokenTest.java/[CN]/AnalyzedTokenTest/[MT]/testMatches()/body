{
  final AnalyzedToken testToken1=new AnalyzedToken("word","POS","lemma");
  assertFalse(testToken1.matches(new AnalyzedToken("",null,null)));
  assertTrue(testToken1.matches(new AnalyzedToken("word",null,null)));
  assertTrue(testToken1.matches(new AnalyzedToken("word","POS",null)));
  assertTrue(testToken1.matches(new AnalyzedToken("word","POS","lemma")));
  assertFalse(testToken1.matches(new AnalyzedToken("word","POS1","lemma")));
  assertFalse(testToken1.matches(new AnalyzedToken("word1","POS","lemma")));
  assertFalse(testToken1.matches(new AnalyzedToken("word","POS","lemma1")));
  assertTrue(testToken1.matches(new AnalyzedToken("","POS","lemma")));
  assertTrue(testToken1.matches(new AnalyzedToken("",null,"lemma")));
  assertTrue(makeToken("word","POS","lemma",null).matches(makeToken("word","POS","lemma",null)));
  assertTrue(makeToken("word","POS","lemma","chunk").matches(makeToken("word","POS","lemma","chunk")));
  assertTrue(makeToken("word","POS","lemma","chunk").matches(makeToken("word","POS","lemma",null)));
  assertFalse(makeToken("word","POS","lemma","chunk1").matches(makeToken("word","POS","lemma","chunk2")));
  assertFalse(makeToken("word","POS","lemma",null).matches(makeToken("word","POS","lemma","chunk")));
  assertFalse(testToken1.matches(makeToken("word","POS","lemma","chunk2")));
}
