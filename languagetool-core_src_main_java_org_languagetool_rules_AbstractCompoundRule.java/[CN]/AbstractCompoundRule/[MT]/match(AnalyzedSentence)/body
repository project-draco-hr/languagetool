{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  RuleMatch prevRuleMatch=null;
  Queue<AnalyzedTokenReadings> prevTokens=new ArrayBlockingQueue<>(MAX_TERMS);
  for (int i=0; i < tokens.length + MAX_TERMS - 1; i++) {
    AnalyzedTokenReadings token;
    if (i >= tokens.length) {
      token=new AnalyzedTokenReadings(new AnalyzedToken("","",null),prevTokens.peek().getStartPos());
    }
 else {
      token=tokens[i];
    }
    if (i == 0) {
      addToQueue(token,prevTokens);
      continue;
    }
    if (token.isImmunized()) {
      continue;
    }
    AnalyzedTokenReadings firstMatchToken=prevTokens.peek();
    List<String> stringsToCheck=new ArrayList<>();
    List<String> origStringsToCheck=new ArrayList<>();
    Map<String,AnalyzedTokenReadings> stringToToken=getStringToTokenMap(prevTokens,stringsToCheck,origStringsToCheck);
    for (int k=stringsToCheck.size() - 1; k >= 0; k--) {
      String stringToCheck=stringsToCheck.get(k);
      String origStringToCheck=origStringsToCheck.get(k);
      if (getCompoundRuleData().getIncorrectCompounds().contains(stringToCheck)) {
        AnalyzedTokenReadings atr=stringToToken.get(stringToCheck);
        String msg=null;
        List<String> replacement=new ArrayList<>();
        if (!getCompoundRuleData().getNoDashSuggestion().contains(stringToCheck)) {
          replacement.add(origStringToCheck.replace(' ','-'));
          msg=withHyphenMessage;
        }
        if (isNotAllUppercase(origStringToCheck) && !getCompoundRuleData().getOnlyDashSuggestion().contains(stringToCheck)) {
          replacement.add(mergeCompound(origStringToCheck));
          msg=withoutHyphenMessage;
        }
        String[] parts=stringToCheck.split(" ");
        if (parts.length > 0 && parts[0].length() == 1) {
          replacement.clear();
          replacement.add(origStringToCheck.replace(' ','-'));
          msg=withHyphenMessage;
        }
 else         if (replacement.isEmpty() || replacement.size() == 2) {
          msg=withOrWithoutHyphenMessage;
        }
        RuleMatch ruleMatch=new RuleMatch(this,firstMatchToken.getStartPos(),atr.getEndPos(),msg,shortDesc);
        ruleMatch.setSuggestedReplacements(replacement);
        if (prevRuleMatch != null && prevRuleMatch.getFromPos() == ruleMatch.getFromPos()) {
          prevRuleMatch=ruleMatch;
          break;
        }
        prevRuleMatch=ruleMatch;
        ruleMatches.add(ruleMatch);
        break;
      }
    }
    addToQueue(token,prevTokens);
  }
  return toRuleMatchArray(ruleMatches);
}
