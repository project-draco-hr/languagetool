"\n\n                                                          www.ScriptFoundry.com\n                                               (212) 228 0093\n                                                 development@scriptfoundry.com\n snakespell.py 1.01\n      A basic spelling module, original written for a\n      web based e-mail client, but can be used for\n      any spelling necessity.\n\n         o class SpellingChecker abstract class that\n           implements the basic model.\n         o class SpellingMistake abstract class\n         o class Spell a subclass of SpellingChecker\n           that implements the basic spell found on\n           most unix systems.\n         o class iSpell a subclass of SpellingChecker\n           implements the basic ispell now pretty\n           much standard on Linux. This offers a lot\n           of options and functionality.\n         o class aSpell coming real soon.\n         o pspell If only I had known... I will be\n           doing a pspell wrapper soon.\n         o Download (latest) tgz, zip or rpm and then\n           install\n\n class SpellingChecker\n      This abstract class that implements the basic\n      model.\n        1. A spelling checker can be instantiated\n           with a set of command line options,\n           e.g.. '-a -s -d /dictionaries/mydict.ddt'.\n           Implementations of this class can overload\n           the processOptions method. This method\n           takes a string and returns a string\n           weeding out illegal options, and inserting\n           the nececary ones to use the spelling\n           checker as a filter.\n        2. The spelling checker offers the following\n           member methods:\n              + check(self, text) that will pipe the\n                text through the spelling checker. It\n                creates an ordered dictionary of\n                SpellingMistakes and then returns the\n                number of mistakes.\n              + getMistakes() returns the ordered\n                dictionary of SpellingMistake. This\n                dictionary can be treated as a list\n                of the mistakes in the order in which\n                they were found, or as a dictionary\n                keyed by the mistake.\n              + In situations where the text is very\n                large, it is best to use the start,\n                feed, result combination.\n                   + call start()\n                   + then repeatedly call feed(text),\n                     to feed the text to the spell\n                     checker.\n                   + finally call result() the\n                     generate the SpellingMistake\n                     list and return the number of\n                     mistakes.\n\n\n\n      A spelling checker must overload and\n      implement the following member methods:\n\n         * pipeString(self, options): This\n           method should create, with the\n           options, and return the string to be\n           fed to popen2. for instance it could\n           be simplistically something like:\n           def pipeString(self, options): return\n           '/usr/bin/mySpeller %s' % options\n         * processLine(self, line): This method\n           invoked for each line generated by\n           the spelling checker. It should\n           process this line and then return\n           SpellingMistake instatiated with the\n           relevant values.\n           for example with the simpler\n           Speller.processLine(line):\n           return SpellingMistake(line)\n           or with the more complex\n           iSpeller.processLine(line):\n           return iSpellingMistake(original,\n           types[kind], offset, corrections)\n\n      A spelling checker could overload and\n      implement the following member method:\n      processOptions( options ) This is\n      discussed above.\n\n class SpellingMistake\n         o SpellingMistake object is instatiate with\n           three arguments (word, type='',\n           position=-1, correctionList=[]), where\n           word is the word in error, type is the\n           type of error, position is a long offset\n           of this mistake from the beginning of the\n           text,and correction list is a list of\n           possible corrections.\n         o getCorrections() returns a list of\n           possible corrections.\n         o getPositions() returns a list of long\n           offsets where the mistake is found in the\n           text.\n         o getMistake() returns the word in error.\n         o getType() returns the spell check result.\n         o appendPosition(offset) adds an a mistake\n           offset.\n\n class iSpell\n      Usage:\n\n      from scriptfoundry.snakespell import iSpell\n      ispell = iSpell()\n      ispell.check('frgy refries are the only kina of chios that we kina like')\n      for mistake in ispell.getMistakes():\n         print mistake\n\n class Spell\n\n       Usage:\n      from scriptfoundry.snakespell import Spell\n      spell = Spell()\n      spell.check('frgy refries are the only kina of chios that we kina like')\n      print ispell.getMistakes()[:]\n\n\n\n\n\n Installing\n\n tar xvzf snakespell1.01.tar.gz\n\n cd snakespell1.01\n\n python setup.py install\n\n or\n\n rpm -iv snakespell1.01.noarch.rpm\n\n then check it out by doing\n\n $python\n >> from snakespell import Spell\n >>spell = Spell()\n >>ispell.check('frgy refries are the only kina of chios that we kina like')\n >>ispell.getMistakes()[:]\n\n"
__version__ = '1.01'
from string import split, join, strip
from getopt import getopt
from orderdict import OrderDict
from popen2 import popen2
if (__name__ == '__main__'):
    import sys
    print sys.argv
    ispell = iSpell('-a -m ')
    print '         1         2         3         4         5         6     '
    print '12345678901234567890123456789012345678901234567890123456789012345'
    text = 'covocov frgy refries are the only kina of chios that we kina like'
    ispell.check(text)
    print ispell.getMistakes()
    for mistake in ispell.getMistakes():
        print mistake
    spell = Spell()
    spell.check(text)
    print ispell.getMistakes()[:]
