{
  final String lookupSql="SELECT id FROM corpus_match_hidden WHERE " + "language_code = ? AND sourceuri = ? AND ruleid = ? AND small_error_context = ?";
  final String insertSql="INSERT INTO corpus_match " + "(version, language_code, ruleid, rule_category, rule_subid, rule_description, message, error_context, small_error_context, corpus_date, " + "check_date, sourceuri, source_type, is_visible) "+ "VALUES (0, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 1)";
  try (PreparedStatement lookupSt=conn.prepareStatement(lookupSql);PreparedStatement insertSt=conn.prepareStatement(insertSql)){
    final java.sql.Date nowDate=new java.sql.Date(new Date().getTime());
    for (    RuleMatch match : ruleMatches) {
      final String smallContext=smallContextTools.getContext(match.getFromPos(),match.getToPos(),sentence.getText());
      if (ruleIsMarkedHidden(language,sentence.getUrl(),match,smallContext,lookupSt)) {
        System.out.println("Skipping match " + match.getRule().getId() + " for "+ sentence.getTitle()+ " as it is hidden");
        continue;
      }
      insertSt.setString(1,language.getShortName());
      final Rule rule=match.getRule();
      insertSt.setString(2,rule.getId());
      insertSt.setString(3,rule.getCategory().getName());
      if (rule instanceof PatternRule) {
        final PatternRule patternRule=(PatternRule)rule;
        insertSt.setString(4,patternRule.getSubId());
      }
 else {
        insertSt.setNull(4,Types.VARCHAR);
      }
      insertSt.setString(5,rule.getDescription());
      insertSt.setString(6,StringUtils.abbreviate(match.getMessage(),255));
      final String context=contextTools.getContext(match.getFromPos(),match.getToPos(),sentence.getText());
      if (context.length() > MAX_CONTEXT_LENGTH) {
        continue;
      }
      insertSt.setString(7,context);
      insertSt.setString(8,StringUtils.abbreviate(smallContext,255));
      insertSt.setDate(9,nowDate);
      insertSt.setDate(10,nowDate);
      insertSt.setString(11,sentence.getUrl());
      insertSt.setString(12,sentence.getSource());
      insertSt.executeUpdate();
      checkMaxErrors(++errorCount);
      if (errorCount % 100 == 0) {
        System.out.println("Storing error #" + errorCount + " for text:");
        System.out.println("  " + sentence.getText());
      }
    }
    checkMaxSentences(++sentenceCount);
  }
 catch (  DocumentLimitReachedException|ErrorLimitReachedException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException("Error storing matches for '" + sentence.getTitle() + "'",e);
  }
}
