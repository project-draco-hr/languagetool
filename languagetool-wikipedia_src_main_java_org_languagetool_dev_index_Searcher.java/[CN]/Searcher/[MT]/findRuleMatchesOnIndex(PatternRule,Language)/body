{
  open();
  try {
    final PatternRuleQueryBuilder patternRuleQueryBuilder=new PatternRuleQueryBuilder(language);
    final Query query=patternRuleQueryBuilder.buildRelaxedQuery(rule);
    if (query == null) {
      throw new NullPointerException("Cannot search on null query for rule: " + rule.getId());
    }
    final SearchRunnable runnable=new SearchRunnable(indexSearcher,query,language,rule);
    final Thread searchThread=new Thread(runnable);
    searchThread.start();
    try {
      searchThread.join(maxSearchTimeMillis);
      searchThread.interrupt();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException("Search thread got interrupted for query " + query,e);
    }
    if (searchThread.isInterrupted()) {
      throw new SearchTimeoutException("Search timeout of " + maxSearchTimeMillis + "ms reached for query "+ query);
    }
    final Exception exception=runnable.getException();
    if (exception != null) {
      if (exception instanceof SearchTimeoutException) {
        throw (SearchTimeoutException)exception;
      }
      throw new RuntimeException("Exception during search for query " + query + " on rule "+ rule.getId(),exception);
    }
    final List<MatchingSentence> matchingSentences=runnable.getMatchingSentences();
    final int sentencesChecked=getSentenceCheckCount(query,indexSearcher);
    final SearcherResult searcherResult=new SearcherResult(matchingSentences,sentencesChecked,query);
    searcherResult.setHasTooManyLuceneMatches(runnable.hasTooManyLuceneMatches());
    if (runnable.hasTooManyLuceneMatches()) {
      searcherResult.setDocCount(maxHits);
    }
 else {
      searcherResult.setDocCount(getDocCount(indexSearcher));
    }
    return searcherResult;
  }
  finally {
    close();
  }
}
