{
  final List<String> filenames=language.getRuleFileNames();
  final XPath xpath=XPathFactory.newInstance().newXPath();
  for (  String filename : filenames) {
    final InputStream is=this.getClass().getResourceAsStream(filename);
    try {
      final Document doc=getDocument(is);
      final Node ruleNode=(Node)xpath.evaluate("/rules/category/rule[@id='" + ruleId.getId() + "']",doc,XPathConstants.NODE);
      if (ruleNode != null) {
        return nodeToString(ruleNode);
      }
      if (ruleId.getSubId() != null) {
        final NodeList ruleGroupNodes=(NodeList)xpath.evaluate("/rules/category/rulegroup[@id='" + ruleId.getId() + "']/rule",doc,XPathConstants.NODESET);
        if (ruleGroupNodes != null) {
          for (int i=1; i <= ruleGroupNodes.getLength(); i++) {
            if (Integer.toString(i).equals(ruleId.getSubId())) {
              return nodeToString(ruleGroupNodes.item(i - 1));
            }
          }
        }
      }
 else {
        final Node ruleGroupNode=(Node)xpath.evaluate("/rules/category/rulegroup[@id='" + ruleId.getId() + "']",doc,XPathConstants.NODE);
        if (ruleGroupNode != null) {
          return nodeToString(ruleGroupNode);
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException("Could not turn rule " + ruleId + " for language "+ language+ " into a string",e);
    }
 finally {
      is.close();
    }
  }
  throw new RuntimeException("Could not find rule " + ruleId + " for language "+ language+ " in files: "+ filenames);
}
