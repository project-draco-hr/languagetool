{
  final ContextTools contextTools=new ContextTools();
  final StringBuilder sb=new StringBuilder();
  sb.append(startCheckText);
  sb.append("<br>\n");
  int i=0;
  for (  final RuleMatch match : ruleMatches) {
    final String output=Tools.makeTexti18n(messages,"result1",new Object[]{i + 1,match.getLine() + 1,match.getColumn()});
    sb.append(output);
    String msg=match.getMessage();
    msg=msg.replaceAll("<suggestion>","<b>");
    msg=msg.replaceAll("</suggestion>","</b>");
    msg=msg.replaceAll("<old>","<b>");
    msg=msg.replaceAll("</old>","</b>");
    sb.append("<b>" + messages.getString("errorMessage") + "</b> ");
    sb.append(msg);
    sb.append("<br>\n");
    if (match.getSuggestedReplacements().size() > 0) {
      final String repl=StringTools.listToString(match.getSuggestedReplacements(),"; ");
      sb.append("<b>" + messages.getString("correctionMessage") + "</b> "+ repl+ "<br>\n");
    }
    if (match.getRule() instanceof SpellingCheckRule) {
      contextTools.setErrorMarkerStart(SPELL_ERROR_MARKER_START);
    }
 else {
      contextTools.setErrorMarkerStart(LT_ERROR_MARKER_START);
    }
    final String context=contextTools.getContext(match.getFromPos(),match.getToPos(),text);
    sb.append("<b>" + messages.getString("errorContext") + "</b> "+ context);
    sb.append("<br>\n");
    if (match.getRule().getUrl() != null && Desktop.isDesktopSupported()) {
      sb.append("<b>" + messages.getString("moreInfo") + "</b> <a href=\"");
      final String url=match.getRule().getUrl().toString();
      sb.append(url);
      final String shortUrl=StringUtils.abbreviate(url,60);
      sb.append("\">" + shortUrl + "</a><br>\n");
    }
    i++;
  }
  sb.append(Main.HTML_GREY_FONT_START);
  final String checkDone=Tools.makeTexti18n(messages,"checkDone",new Object[]{ruleMatches.size(),runTime});
  sb.append("<br>\n");
  sb.append(checkDone);
  sb.append(Main.HTML_FONT_END);
  sb.append("<br>\n");
  return sb.toString();
}
