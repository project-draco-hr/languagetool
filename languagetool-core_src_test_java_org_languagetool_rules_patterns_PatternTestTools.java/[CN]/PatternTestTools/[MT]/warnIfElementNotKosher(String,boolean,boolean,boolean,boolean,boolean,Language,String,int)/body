{
  if (!isPos && !isRegularExpression && stringValue.length() > 1) {
    if (TOKEN_SEPARATOR_PATTERN.matcher(stringValue).find()) {
      System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], contains "+ "\""+ stringValue+ "\" that contains token separators, so can't possibly be matched.");
    }
  }
  final Pattern regexPattern=(isPos && lang.getShortName().equals("pl")) ? PROBABLE_PATTERN_PL_POS : PROBABLE_PATTERN;
  if (!isRegularExpression && stringValue.length() > 1 && regexPattern.matcher(stringValue).find()) {
    System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], contains "+ "\""+ stringValue+ "\" that is not marked as regular expression but probably is one.");
  }
  if (isRegularExpression && stringValue.isEmpty()) {
    System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], contains an empty string "+ "\""+ stringValue+ "\" that is marked as regular expression.");
  }
 else   if (isRegularExpression && stringValue.length() > 1 && !regexPattern.matcher(stringValue).find()) {
    System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], contains "+ "\""+ stringValue+ "\" that is marked as regular expression but probably is not one.");
  }
  if (isNegated && stringValue.isEmpty()) {
    System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], marked as negated but is "+ "empty so the negation is useless. Did you mix up "+ "negate=\"yes\" and negate_pos=\"yes\"?");
  }
  if (isInflected && stringValue.isEmpty()) {
    System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], contains "+ "\""+ stringValue+ "\" that is marked as inflected but is empty, so the attribute is redundant.");
  }
  if (isRegularExpression && ".*".equals(stringValue)) {
    System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], marked as regular expression contains "+ "regular expression \".*\" which is useless: "+ "(use an empty string without regexp=\"yes\" such as <token/>)");
  }
  if (isRegularExpression) {
    Matcher matcher=CHAR_SET_PATTERN.matcher(stringValue);
    if (matcher.find()) {
      Matcher strictMatcher=STRICT_CHAR_SET_PATTERN.matcher(stringValue);
      if (strictMatcher.find()) {
        final String s=strictMatcher.group(2).replaceAll("\\\\p\\{[^}]*\\}","");
        if (s.indexOf('|') >= 0) {
          System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], contains | (pipe) in "+ " regexp bracket expression ["+ strictMatcher.group(2)+ "] which is unlikely to be correct.");
        }
        final char[] sorted=s.toCharArray();
        Arrays.sort(sorted);
        for (int i=1; i < sorted.length; ++i) {
          final char c=sorted[i];
          if ("&\\-|".indexOf(c) < 0 && sorted[i - 1] == c) {
            System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], contains "+ " regexp part ["+ strictMatcher.group(2)+ "] which contains duplicated char ["+ c+ "].");
            break;
          }
        }
      }
    }
    if (stringValue.contains("|")) {
      if (stringValue.contains("||") || stringValue.charAt(0) == '|' || stringValue.charAt(stringValue.length() - 1) == '|') {
        System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], contains empty "+ "disjunction | within "+ "\""+ stringValue+ "\".");
      }
      final String[] groups=stringValue.split("\\)");
      for (      final String group : groups) {
        final String[] alt=group.split("\\|");
        final Set<String> partSet=new HashSet<>();
        final Set<String> partSetNoCase=new HashSet<>();
        boolean hasSingleChar=false;
        boolean hasSingleDot=false;
        for (        String part : alt) {
          if (part.length() == 1) {
            if (part.equals(".")) {
              hasSingleDot=true;
            }
 else {
              hasSingleChar=true;
            }
          }
          final String partNoCase=isCaseSensitive ? part : part.toLowerCase();
          if (partSetNoCase.contains(partNoCase)) {
            if (partSet.contains(part)) {
              System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], contains "+ "duplicated disjunction part ("+ part+ ") within "+ "\""+ stringValue+ "\".");
            }
 else {
              System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], contains duplicated "+ "non case sensitive disjunction part ("+ part+ ") within "+ "\""+ stringValue+ "\". Did you "+ "forget case_sensitive=\"yes\"?");
            }
          }
          partSetNoCase.add(partNoCase);
          partSet.add(part);
        }
        if (hasSingleDot && hasSingleChar) {
          System.err.println("The " + lang + " rule: "+ ruleId+ ", token ["+ tokenIndex+ "], contains a single dot (matching any char) "+ "so other single char disjunctions are useless within "+ "\""+ stringValue+ "\". Did you forget forget a backslash before the dot?");
        }
      }
    }
  }
}
