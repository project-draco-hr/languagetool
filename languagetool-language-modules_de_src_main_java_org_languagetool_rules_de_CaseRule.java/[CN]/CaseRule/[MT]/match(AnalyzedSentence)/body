{
  final List<RuleMatch> ruleMatches=new ArrayList<>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  boolean prevTokenIsDas=false;
  for (int i=0; i < tokens.length; i++) {
    final String posToken=tokens[i].getAnalyzedToken(0).getPOSTag();
    if (posToken != null && posToken.equals(JLanguageTool.SENTENCE_START_TAGNAME)) {
      continue;
    }
    if (i == 1) {
      if (nounIndicators.contains(tokens[i].getToken().toLowerCase())) {
        prevTokenIsDas=true;
      }
      continue;
    }
    if (i > 0 && (tokens[i - 1].getToken().equals("Herr") || tokens[i - 1].getToken().equals("Herrn") || tokens[i - 1].getToken().equals("Frau"))) {
      continue;
    }
    final AnalyzedGermanTokenReadings analyzedToken=(AnalyzedGermanTokenReadings)tokens[i];
    final String token=analyzedToken.getToken();
    List<AnalyzedGermanToken> readings=analyzedToken.getGermanReadings();
    AnalyzedGermanTokenReadings analyzedGermanToken2;
    boolean isBaseform=false;
    if (analyzedToken.getReadingsLength() >= 1 && analyzedToken.hasLemma(token)) {
      isBaseform=true;
    }
    if ((readings == null || analyzedToken.getAnalyzedToken(0).getPOSTag() == null || analyzedToken.hasReadingOfType(GermanToken.POSType.VERB)) && isBaseform) {
      analyzedGermanToken2=tagger.lookup(token.toLowerCase());
      if (analyzedGermanToken2 != null) {
        readings=analyzedGermanToken2.getGermanReadings();
      }
      boolean nextTokenIsPersonalPronoun=false;
      if (i < tokens.length - 1) {
        nextTokenIsPersonalPronoun=tokens[i + 1].hasPartialPosTag("PRO:PER") || tokens[i + 1].getToken().equals("Sie");
      }
      potentiallyAddLowercaseMatch(ruleMatches,tokens[i],prevTokenIsDas,token,nextTokenIsPersonalPronoun);
    }
    prevTokenIsDas=nounIndicators.contains(tokens[i].getToken().toLowerCase());
    if (readings == null) {
      continue;
    }
    final boolean hasNounReading=analyzedToken.hasReadingOfType(GermanToken.POSType.NOMEN);
    if (hasNounReading) {
      continue;
    }
    analyzedGermanToken2=tagger.lookup(token.toLowerCase());
    if (analyzedToken.getAnalyzedToken(0).getPOSTag() == null && analyzedGermanToken2 == null) {
      continue;
    }
    if (analyzedToken.getAnalyzedToken(0).getPOSTag() == null && analyzedGermanToken2 != null && analyzedGermanToken2.getAnalyzedToken(0).getPOSTag() == null) {
      continue;
    }
    potentiallyAddUppercaseMatch(ruleMatches,tokens,i,analyzedToken,token);
  }
  return toRuleMatchArray(ruleMatches);
}
