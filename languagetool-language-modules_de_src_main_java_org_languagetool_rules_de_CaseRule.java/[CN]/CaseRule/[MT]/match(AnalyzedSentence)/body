{
  final List<RuleMatch> ruleMatches=new ArrayList<>();
  final AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  boolean prevTokenIsDas=false;
  for (int i=0; i < tokens.length; i++) {
    final String posToken=tokens[i].getAnalyzedToken(0).getPOSTag();
    if (posToken != null && posToken.equals(JLanguageTool.SENTENCE_START_TAGNAME)) {
      continue;
    }
    if (i == 1) {
      if (nounIndicators.contains(tokens[i].getToken().toLowerCase())) {
        prevTokenIsDas=true;
      }
      continue;
    }
    if (i > 0 && isSalutation(tokens[i - 1].getToken())) {
      continue;
    }
    final AnalyzedTokenReadings analyzedToken=tokens[i];
    final String token=analyzedToken.getToken();
    List<AnalyzedToken> readings=analyzedToken.getReadings();
    boolean isBaseform=analyzedToken.getReadingsLength() >= 1 && analyzedToken.hasLemma(token);
    if ((readings == null || analyzedToken.getAnalyzedToken(0).getPOSTag() == null || GermanHelper.hasReadingOfType(analyzedToken,GermanToken.POSType.VERB)) && isBaseform) {
      AnalyzedTokenReadings lowercaseReadings=tagger.lookup(token.toLowerCase());
      if (lowercaseReadings != null) {
        readings=lowercaseReadings.getReadings();
      }
      boolean nextTokenIsPersonalPronoun=false;
      if (i < tokens.length - 1) {
        nextTokenIsPersonalPronoun=tokens[i + 1].hasPartialPosTag("PRO:PER") || tokens[i + 1].getToken().equals("Sie");
      }
      potentiallyAddLowercaseMatch(ruleMatches,tokens[i],prevTokenIsDas,token,nextTokenIsPersonalPronoun);
    }
    prevTokenIsDas=nounIndicators.contains(tokens[i].getToken().toLowerCase());
    if (readings == null) {
      continue;
    }
    if (hasNounReading(analyzedToken)) {
      continue;
    }
    AnalyzedTokenReadings lowercaseReadings=tagger.lookup(token.toLowerCase());
    if (analyzedToken.getAnalyzedToken(0).getPOSTag() == null && lowercaseReadings == null) {
      continue;
    }
    if (analyzedToken.getAnalyzedToken(0).getPOSTag() == null && lowercaseReadings != null && lowercaseReadings.getAnalyzedToken(0).getPOSTag() == null) {
      continue;
    }
    potentiallyAddUppercaseMatch(ruleMatches,tokens,i,analyzedToken,token);
  }
  return toRuleMatchArray(ruleMatches);
}
