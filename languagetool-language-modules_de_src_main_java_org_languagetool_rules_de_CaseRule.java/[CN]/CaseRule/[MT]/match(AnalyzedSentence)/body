{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=getSentenceWithImmunization(sentence).getTokensWithoutWhitespace();
  boolean prevTokenIsDas=false;
  for (int i=0; i < tokens.length; i++) {
    String posToken=tokens[i].getAnalyzedToken(0).getPOSTag();
    if (posToken != null && posToken.equals(JLanguageTool.SENTENCE_START_TAGNAME)) {
      continue;
    }
    if (i == 1) {
      if (nounIndicators.contains(tokens[1].getToken().toLowerCase())) {
        prevTokenIsDas=true;
      }
      continue;
    }
    if (i > 0 && isSalutation(tokens[i - 1].getToken())) {
      continue;
    }
    AnalyzedTokenReadings analyzedToken=tokens[i];
    String token=analyzedToken.getToken();
    markLowerCaseNounErrors(ruleMatches,tokens,i,analyzedToken);
    boolean isBaseform=analyzedToken.getReadingsLength() >= 1 && analyzedToken.hasLemma(token);
    if ((analyzedToken.getAnalyzedToken(0).getPOSTag() == null || GermanHelper.hasReadingOfType(analyzedToken,GermanToken.POSType.VERB)) && isBaseform) {
      boolean nextTokenIsPersonalPronoun=false;
      if (i < tokens.length - 1) {
        nextTokenIsPersonalPronoun=tokens[i + 1].hasPartialPosTag("PRO:PER") || tokens[i + 1].getToken().equals("Sie");
        if (tokens[i + 1].hasLemma("lassen")) {
          continue;
        }
        if (tokens[i + 1].isSentenceEnd()) {
          continue;
        }
      }
      if (isPrevProbablyRelativePronoun(tokens,i)) {
        continue;
      }
      if (isVerbFollowedByRelativeClause(i,tokens)) {
        continue;
      }
      potentiallyAddLowercaseMatch(ruleMatches,tokens[i],prevTokenIsDas,token,nextTokenIsPersonalPronoun);
    }
    prevTokenIsDas=nounIndicators.contains(tokens[i].getToken().toLowerCase());
    if (hasNounReading(analyzedToken)) {
      continue;
    }
    AnalyzedTokenReadings lowercaseReadings=tagger.lookup(token.toLowerCase());
    if (analyzedToken.getAnalyzedToken(0).getPOSTag() == null && lowercaseReadings == null) {
      continue;
    }
    if (analyzedToken.getAnalyzedToken(0).getPOSTag() == null && lowercaseReadings != null && (lowercaseReadings.getAnalyzedToken(0).getPOSTag() == null || analyzedToken.getToken().endsWith("innen"))) {
      continue;
    }
    potentiallyAddUppercaseMatch(ruleMatches,tokens,i,analyzedToken,token);
  }
  return toRuleMatchArray(ruleMatches);
}
