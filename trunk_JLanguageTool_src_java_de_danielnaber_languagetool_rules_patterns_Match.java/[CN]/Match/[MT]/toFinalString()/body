{
  String[] formattedString=new String[1];
  if (formattedToken != null) {
    if (posTag == null) {
      formattedString[0]=formattedToken.getToken();
      if (pRegexMatch != null) {
        formattedString[0]=pRegexMatch.matcher(formattedString[0]).replaceAll(regexReplace);
      }
switch (caseConversionType) {
case NONE:
        formattedString[0]=formattedString[0];
      break;
case STARTLOWER:
    formattedString[0]=formattedString[0].substring(0,1).toLowerCase() + formattedToken.getToken().substring(1);
  break;
case STARTUPPER:
formattedString[0]=formattedString[0].substring(0,1).toUpperCase() + formattedToken.getToken().substring(1);
break;
case ALLUPPER:
formattedString[0]=formattedString[0].toUpperCase();
break;
case ALLLOWER:
formattedString[0]=formattedString[0].toLowerCase();
break;
default :
formattedString[0]=formattedString[0];
break;
}
}
 else {
if (synthesizer == null) {
formattedString[0]=formattedToken.getToken();
}
 else if (postagRegexp) {
final int readingCount=formattedToken.getReadingsLength();
String targetPosTag=posTag;
if (staticLemma) {
final int numRead=matchedToken.getReadingsLength();
for (int i=0; i < numRead; i++) {
final String tst=matchedToken.getAnalyzedToken(i).getPOSTag();
if (tst != null) {
if (pPosRegexMatch.matcher(tst).matches()) {
targetPosTag=matchedToken.getAnalyzedToken(i).getPOSTag();
break;
}
}
}
if (pPosRegexMatch != null & posTagReplace != null) {
targetPosTag=pPosRegexMatch.matcher(targetPosTag).replaceAll(posTagReplace);
}
if (targetPosTag.indexOf("?") > 0) {
targetPosTag=targetPosTag.replaceAll("\\?","\\\\?");
}
}
 else {
final int numRead=formattedToken.getReadingsLength();
for (int i=0; i < numRead; i++) {
final String tst=formattedToken.getAnalyzedToken(i).getPOSTag();
if (tst != null) {
if (pPosRegexMatch.matcher(tst).matches()) {
targetPosTag=formattedToken.getAnalyzedToken(i).getPOSTag();
break;
}
}
}
if (pPosRegexMatch != null & posTagReplace != null) {
targetPosTag=pPosRegexMatch.matcher(targetPosTag).replaceAll(posTagReplace);
}
}
final TreeSet<String> wordForms=new TreeSet<String>();
for (int i=0; i < readingCount; i++) {
final String[] possibleWordForms=synthesizer.synthesize(formattedToken.getAnalyzedToken(i),targetPosTag,true);
if (possibleWordForms != null) {
for (final String form : possibleWordForms) {
wordForms.add(form);
}
}
}
if (wordForms != null) {
if (wordForms.size() > 0) {
formattedString=wordForms.toArray(new String[wordForms.size()]);
}
 else {
formattedString[0]="(" + formattedToken.getToken() + ")";
}
}
 else {
formattedString[0]=formattedToken.getToken();
}
}
 else {
final int readingCount=formattedToken.getReadingsLength();
final TreeSet<String> wordForms=new TreeSet<String>();
for (int i=0; i < readingCount; i++) {
final String[] possibleWordForms=synthesizer.synthesize(formattedToken.getAnalyzedToken(i),posTag);
if (possibleWordForms != null) {
for (final String form : possibleWordForms) {
wordForms.add(form);
}
}
}
if (wordForms != null) {
formattedString=wordForms.toArray(new String[wordForms.size()]);
}
 else {
formattedString[0]=formattedToken.getToken();
}
}
}
}
return formattedString;
}
