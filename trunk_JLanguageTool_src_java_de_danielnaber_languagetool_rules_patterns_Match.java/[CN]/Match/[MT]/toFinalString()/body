{
  String[] formattedString=new String[1];
  if (formattedToken != null) {
    formattedString[0]=formattedToken.getToken();
    if (pRegexMatch != null) {
      formattedString[0]=pRegexMatch.matcher(formattedString[0]).replaceAll(regexReplace);
    }
    formattedString[0]=convertCase(formattedString[0]);
    if (posTag != null) {
      if (synthesizer == null) {
        formattedString[0]=formattedToken.getToken();
      }
 else       if (postagRegexp) {
        final int readingCount=formattedToken.getReadingsLength();
        final TreeSet<String> wordForms=new TreeSet<String>();
        boolean oneForm=false;
        for (int k=0; k < readingCount; k++) {
          if (formattedToken.getAnalyzedToken(k).getLemma() == null) {
            final String posUnique=formattedToken.getAnalyzedToken(k).getPOSTag();
            if (posUnique == null) {
              wordForms.add(formattedToken.getToken());
              oneForm=true;
            }
 else {
              if (JLanguageTool.SENTENCE_START_TAGNAME.equals(posUnique) || JLanguageTool.SENTENCE_END_TAGNAME.equals(posUnique) || JLanguageTool.PARAGRAPH_END_TAGNAME.equals(posUnique)) {
                if (!oneForm) {
                  wordForms.add(formattedToken.getToken());
                }
                oneForm=true;
              }
 else {
                oneForm=false;
              }
            }
          }
        }
        final String targetPosTag=getTargetPosTag();
        if (!oneForm) {
          for (int i=0; i < readingCount; i++) {
            final String[] possibleWordForms=synthesizer.synthesize(formattedToken.getAnalyzedToken(i),targetPosTag,true);
            if (possibleWordForms != null) {
              for (              final String form : possibleWordForms) {
                wordForms.add(form);
              }
            }
          }
        }
        if (wordForms != null) {
          if (wordForms.isEmpty()) {
            formattedString[0]="(" + formattedToken.getToken() + ")";
          }
 else {
            formattedString=wordForms.toArray(new String[wordForms.size()]);
          }
        }
 else {
          formattedString[0]=formattedToken.getToken();
        }
      }
 else {
        final int readingCount=formattedToken.getReadingsLength();
        final TreeSet<String> wordForms=new TreeSet<String>();
        for (int i=0; i < readingCount; i++) {
          final String[] possibleWordForms=synthesizer.synthesize(formattedToken.getAnalyzedToken(i),posTag);
          if (possibleWordForms != null) {
            for (            final String form : possibleWordForms) {
              wordForms.add(form);
            }
          }
        }
        if (wordForms == null) {
          formattedString[0]=formattedToken.getToken();
        }
 else {
          formattedString=wordForms.toArray(new String[wordForms.size()]);
        }
      }
    }
  }
  return formattedString;
}
