{
  final ArrayList<AnalyzedToken> l=new ArrayList<AnalyzedToken>();
  if (formattedToken != null) {
    if (staticLemma) {
      formattedToken=new AnalyzedTokenReadings(new AnalyzedToken(matchedToken.getToken(),posTag,formattedToken.getToken(),matchedToken.getStartPos()));
    }
    String token=formattedToken.getToken();
    if (pRegexMatch != null) {
      token=pRegexMatch.matcher(token).replaceAll(regexReplace);
    }
    token=convertCase(token);
    if (posTag != null) {
      final int numRead=formattedToken.getReadingsLength();
      if (postagRegexp) {
        String targetPosTag=posTag;
        for (int i=0; i < numRead; i++) {
          final String tst=formattedToken.getAnalyzedToken(i).getPOSTag();
          if (tst != null) {
            if (pPosRegexMatch.matcher(tst).matches()) {
              targetPosTag=formattedToken.getAnalyzedToken(i).getPOSTag();
              if (posTagReplace != null) {
                targetPosTag=pPosRegexMatch.matcher(targetPosTag).replaceAll(posTagReplace);
              }
              l.add(new AnalyzedToken(token,targetPosTag,formattedToken.getAnalyzedToken(i).getLemma(),formattedToken.getStartPos()));
            }
          }
        }
        if (l.isEmpty()) {
          for (          AnalyzedToken anaTok : getNewToken(numRead,token)) {
            l.add(anaTok);
          }
        }
      }
 else {
        for (        AnalyzedToken anaTok : getNewToken(numRead,token)) {
          l.add(anaTok);
        }
      }
    }
  }
  if (l.isEmpty()) {
    return formattedToken;
  }
  return new AnalyzedTokenReadings(l.toArray(new AnalyzedToken[l.size()]));
}
