{
  String token=formattedToken.getToken();
  ArrayList<AnalyzedToken> l=new ArrayList<AnalyzedToken>();
  if (formattedToken != null) {
    if (pRegexMatch != null) {
      token=pRegexMatch.matcher(token).replaceAll(regexReplace);
    }
switch (caseConversionType) {
case NONE:
      break;
case STARTLOWER:
    token=token.substring(0,1).toLowerCase() + formattedToken.getToken().substring(1);
  break;
case STARTUPPER:
token=token.substring(0,1).toUpperCase() + formattedToken.getToken().substring(1);
break;
case ALLUPPER:
token=token.toUpperCase();
break;
case ALLLOWER:
token=token.toLowerCase();
break;
default :
break;
}
if (posTag != null) {
final int numRead=formattedToken.getReadingsLength();
if (postagRegexp) {
String targetPosTag=posTag;
for (int i=0; i < numRead; i++) {
final String tst=formattedToken.getAnalyzedToken(i).getPOSTag();
if (tst != null) {
if (pPosRegexMatch.matcher(tst).matches()) {
targetPosTag=formattedToken.getAnalyzedToken(i).getPOSTag();
if (pPosRegexMatch != null & posTagReplace != null) {
targetPosTag=pPosRegexMatch.matcher(targetPosTag).replaceAll(posTagReplace);
}
l.add(new AnalyzedToken(token,targetPosTag,formattedToken.getAnalyzedToken(i).getLemma(),formattedToken.getAnalyzedToken(i).getStartPos()));
}
}
}
if (l.size() == 0) {
String lemma="";
for (int j=0; j < numRead; j++) {
if (formattedToken.getAnalyzedToken(j).getPOSTag() != null) {
if (formattedToken.getAnalyzedToken(j).getPOSTag().equals(posTag)) {
if (formattedToken.getAnalyzedToken(j).getLemma() != null) {
lemma=formattedToken.getAnalyzedToken(j).getLemma();
}
}
if (lemma.equals("")) {
lemma=formattedToken.getAnalyzedToken(0).getLemma();
}
l.add(new AnalyzedToken(token,posTag,lemma,formattedToken.getStartPos()));
}
}
}
}
 else {
String lemma="";
for (int j=0; j < numRead; j++) {
if (formattedToken.getAnalyzedToken(j).getPOSTag() != null) {
if (formattedToken.getAnalyzedToken(j).getPOSTag().equals(posTag)) {
if (formattedToken.getAnalyzedToken(j).getLemma() != null) {
lemma=formattedToken.getAnalyzedToken(j).getLemma();
}
}
if (lemma.equals("")) {
lemma=formattedToken.getAnalyzedToken(0).getLemma();
}
l.add(new AnalyzedToken(token,posTag,lemma,formattedToken.getStartPos()));
}
}
}
}
}
return new AnalyzedTokenReadings(l.toArray(new AnalyzedToken[l.size()]));
}
