{
  if (qName.equals("source")) {
    checkMarkPositions();
    srcRule=finalizeRule();
  }
 else   if (qName.equals("target")) {
    checkMarkPositions();
    trgRule=finalizeRule();
  }
 else   if (qName.equals("rule")) {
    trgRule.setMessage(message.toString());
    if (suggestionMatches != null) {
      for (      final Match m : suggestionMatches) {
        trgRule.addSuggestionMatch(m);
      }
      if (phraseElementList.size() <= 1) {
        suggestionMatches.clear();
      }
    }
    final BitextPatternRule bRule=new BitextPatternRule(srcRule,trgRule);
    bRule.setCorrectBitextExamples(correctExamples);
    bRule.setIncorrectBitextExamples(incorrectExamples);
    bRule.setSourceLang(srcLang);
    rules.add(bRule);
  }
 else   if (qName.equals(EXCEPTION)) {
    finalizeExceptions();
  }
 else   if (qName.equals(AND)) {
    inAndGroup=false;
    andGroupCounter=0;
    tokenCounter++;
  }
 else   if (qName.equals(TOKEN)) {
    finalizeTokens();
  }
 else   if (qName.equals(PATTERN)) {
    inPattern=false;
    if (lastPhrase) {
      elementList.clear();
    }
    if (phraseElementList == null || phraseElementList.isEmpty()) {
      checkPositions(0);
    }
 else {
      for (      List<Element> elements : phraseElementList) {
        checkPositions(elements.size());
      }
    }
    tokenCounter=0;
  }
 else   if (qName.equals("trgExample")) {
    trgExample=setExample();
  }
 else   if (qName.equals("srcExample")) {
    srcExample=setExample();
  }
 else   if (qName.equals("example")) {
    if (inCorrectExample) {
      correctExamples.add(new StringPair(srcExample.getExample(),trgExample.getExample()));
    }
 else     if (inIncorrectExample) {
      if (trgExample.getCorrections() == null) {
        incorrectExamples.add(new IncorrectBitextExample(new StringPair(srcExample.getExample(),trgExample.getExample())));
      }
 else {
        List<String> l=trgExample.getCorrections();
        String str[]=l.toArray(new String[l.size()]);
        incorrectExamples.add(new IncorrectBitextExample(new StringPair(srcExample.getExample(),trgExample.getExample()),str));
      }
    }
    inCorrectExample=false;
    inIncorrectExample=false;
  }
 else   if (qName.equals("message")) {
    suggestionMatches=addLegacyMatches();
    inMessage=false;
  }
 else   if (qName.equals("short")) {
    inShortMessage=false;
  }
 else   if (qName.equals("match")) {
    if (inMessage) {
      suggestionMatches.get(suggestionMatches.size() - 1).setLemmaString(match.toString());
    }
 else     if (inToken) {
      tokenReference.setLemmaString(match.toString());
    }
    inMatch=false;
  }
 else   if (qName.equals("rulegroup")) {
    inRuleGroup=false;
  }
 else   if (qName.equals("suggestion") && inMessage) {
    message.append("</suggestion>");
    inSuggestion=false;
  }
 else   if (qName.equals(MARKER) && inCorrectExample) {
    correctExample.append("</marker>");
  }
 else   if (qName.equals(MARKER) && inIncorrectExample) {
    incorrectExample.append("</marker>");
  }
 else   if (qName.equals("phrase") && inPhrases) {
    finalizePhrase();
  }
 else   if (qName.equals("includephrases")) {
    elementList.clear();
  }
 else   if (qName.equals("phrases") && inPhrases) {
    inPhrases=false;
  }
 else   if (qName.equals("unification")) {
    inUnificationDef=false;
  }
 else   if (qName.equals("feature")) {
    equivalenceFeatures.put(uFeature,uTypeList);
    uTypeList=new ArrayList<String>();
  }
 else   if (qName.equals("unify")) {
    inUnification=false;
    equivalenceFeatures=new HashMap<String,List<String>>();
  }
}
