{
  int dashIdx=word.lastIndexOf('-');
  if (dashIdx == 0 || dashIdx == word.length() - 1)   return null;
  int firstDashIdx=word.indexOf('-');
  if (dashIdx != firstDashIdx)   return null;
  String leftWord=word.substring(0,dashIdx);
  String rightWord=word.substring(dashIdx + 1);
  List<TaggedWord> leftWdList=tagBothCases(leftWord);
  if (rightPartsWithLeftTagMap.containsKey(rightWord)) {
    if (leftWdList.isEmpty())     return null;
    Pattern leftTagRegex=rightPartsWithLeftTagMap.get(rightWord);
    List<AnalyzedToken> leftAnalyzedTokens=ukrainianTagger.asAnalyzedTokenListForTaggedWordsInternal(leftWord,leftWdList);
    List<AnalyzedToken> newAnalyzedTokens=new ArrayList<>(leftAnalyzedTokens.size());
    for (    AnalyzedToken analyzedToken : leftAnalyzedTokens) {
      String posTag=analyzedToken.getPOSTag();
      if (posTag != null && leftTagRegex.matcher(posTag).matches()) {
        newAnalyzedTokens.add(new AnalyzedToken(word,posTag,analyzedToken.getLemma()));
      }
    }
    return newAnalyzedTokens.isEmpty() ? null : newAnalyzedTokens;
  }
  if (UkrainianTagger.NUMBER.matcher(leftWord).matches()) {
    List<AnalyzedToken> newAnalyzedTokens=new ArrayList<>();
    if (NUMR_ENDING_MAP.containsKey(rightWord)) {
      List<String> tags=NUMR_ENDING_MAP.get(rightWord);
      for (      String tag : tags) {
        newAnalyzedTokens.add(new AnalyzedToken(word,IPOSTag.adj.getText() + tag,leftWord + "-" + "??"));
      }
    }
 else {
      List<TaggedWord> rightWdList=wordTagger.tag(rightWord);
      if (rightWdList.isEmpty())       return null;
      List<AnalyzedToken> rightAnalyzedTokens=ukrainianTagger.asAnalyzedTokenListForTaggedWordsInternal(rightWord,rightWdList);
      for (      AnalyzedToken analyzedToken : rightAnalyzedTokens) {
        if (analyzedToken.getPOSTag().startsWith(IPOSTag.adj.getText())) {
          newAnalyzedTokens.add(new AnalyzedToken(word,analyzedToken.getPOSTag(),leftWord + "-" + analyzedToken.getLemma()));
        }
      }
    }
    return newAnalyzedTokens.isEmpty() ? null : newAnalyzedTokens;
  }
  if (leftWord.equalsIgnoreCase("????") && rightWord.endsWith("????????")) {
    rightWord+="??";
  }
  List<TaggedWord> rightWdList=wordTagger.tag(rightWord);
  if (rightWdList.isEmpty())   return null;
  List<AnalyzedToken> rightAnalyzedTokens=ukrainianTagger.asAnalyzedTokenListForTaggedWordsInternal(rightWord,rightWdList);
  if (leftWord.equalsIgnoreCase("????")) {
    if (rightWord.endsWith("??????")) {
      return poAdvMatch(word,rightAnalyzedTokens,ADJ_TAG_FOR_PO_ADV_MIS);
    }
 else     if (rightWord.endsWith("??????????")) {
      return poAdvMatch(word,rightAnalyzedTokens,ADJ_TAG_FOR_PO_ADV_NAZ);
    }
    return null;
  }
  if (dashPrefixes.contains(leftWord) || dashPrefixes.contains(leftWord.toLowerCase()) || DASH_PREFIX_LAT_PATTERN.matcher(leftWord).matches()) {
    return getNvPrefixNounMatch(word,rightAnalyzedTokens,leftWord);
  }
  if (word.startsWith("??????-") && Character.isUpperCase(word.charAt(4))) {
    List<AnalyzedToken> newAnalyzedTokens=new ArrayList<>(rightAnalyzedTokens.size());
    for (    AnalyzedToken rightAnalyzedToken : rightAnalyzedTokens) {
      String rightPosTag=rightAnalyzedToken.getPOSTag();
      if (rightPosTag == null)       continue;
      if (NOUN_SING_V_ROD_REGEX.matcher(rightPosTag).matches()) {
        for (        String vid : PosTagHelper.VIDMINKY_MAP.keySet()) {
          if (vid.equals("v_kly"))           continue;
          String posTag=rightPosTag.replace("v_rod",vid);
          newAnalyzedTokens.add(new AnalyzedToken(word,posTag,word));
        }
      }
    }
    return newAnalyzedTokens;
  }
  if (Character.isUpperCase(leftWord.charAt(0)) && cityAvenue.contains(rightWord)) {
    if (leftWdList.isEmpty())     return null;
    List<AnalyzedToken> leftAnalyzedTokens=ukrainianTagger.asAnalyzedTokenListForTaggedWordsInternal(leftWord,leftWdList);
    return cityAvenueMatch(word,leftAnalyzedTokens);
  }
  if (!leftWdList.isEmpty()) {
    List<AnalyzedToken> leftAnalyzedTokens=ukrainianTagger.asAnalyzedTokenListForTaggedWordsInternal(leftWord,leftWdList);
    List<AnalyzedToken> tagMatch=tagMatch(word,leftAnalyzedTokens,rightAnalyzedTokens);
    if (tagMatch != null) {
      return tagMatch;
    }
  }
  if (O_ADJ_PATTERN.matcher(leftWord).matches()) {
    return oAdjMatch(word,rightAnalyzedTokens,leftWord);
  }
  debug_compound_unknown_write(word);
  return null;
}
