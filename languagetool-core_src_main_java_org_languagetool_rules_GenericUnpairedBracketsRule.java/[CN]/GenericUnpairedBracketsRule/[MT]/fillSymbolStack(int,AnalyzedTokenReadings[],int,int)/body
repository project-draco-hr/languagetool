{
  String token=tokens[i].getToken();
  int startPos=startPosBase + tokens[i].getStartPos();
  if (token.equals(startSymbols[j]) || token.equals(endSymbols[j])) {
    boolean precededByWhitespace=getPrecededByWhitespace(tokens,i,j);
    boolean followedByWhitespace=getFollowedByWhitespace(tokens,i,j);
    boolean noException=isNoException(token,tokens,i,j,precededByWhitespace,followedByWhitespace);
    if (noException && precededByWhitespace && token.equals(startSymbols[j])) {
      symbolStack.push(new SymbolLocator(startSymbols[j],i,startPos));
      return true;
    }
 else     if (noException && (followedByWhitespace || tokens[i].isSentenceEnd()) && token.equals(endSymbols[j])) {
      if (i > 1 && endSymbols[j].equals(")") && (numerals.matcher(tokens[i - 1].getToken()).matches() && !(!symbolStack.empty() && "(".equals(symbolStack.peek().symbol)))) {
      }
 else {
        if (symbolStack.empty()) {
          symbolStack.push(new SymbolLocator(endSymbols[j],i,startPos));
          return true;
        }
 else {
          if (symbolStack.peek().symbol.equals(startSymbols[j])) {
            symbolStack.pop();
            return true;
          }
 else {
            if (isEndSymbolUnique(endSymbols[j])) {
              symbolStack.push(new SymbolLocator(endSymbols[j],i,startPos));
              return true;
            }
 else {
              if (j == endSymbols.length - 1) {
                symbolStack.push(new SymbolLocator(endSymbols[j],i,startPos));
                return true;
              }
            }
          }
        }
      }
    }
  }
  return false;
}
