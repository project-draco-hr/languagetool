{
  final List<RuleMatch> ruleMatches=new ArrayList<>();
  final AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  if (endOfParagraph) {
    reset();
  }
  ruleMatchIndex=getMatchesIndex();
  for (int i=1; i < tokens.length; i++) {
    for (int j=0; j < startSymbols.length; j++) {
      final String token=tokens[i].getToken();
      if (token.equals(startSymbols[j]) || token.equals(endSymbols[j])) {
        boolean precededByWhitespace=getPrecededByWhitespace(tokens,i,j);
        boolean followedByWhitespace=getFollowedByWhitespace(tokens,i,j);
        final boolean noException=isNoException(token,tokens,i,j,precededByWhitespace,followedByWhitespace);
        if (noException && precededByWhitespace && token.equals(startSymbols[j])) {
          symbolStack.push(new SymbolLocator(startSymbols[j],i));
          break;
        }
 else         if (noException && (followedByWhitespace || tokens[i].isSentenceEnd()) && token.equals(endSymbols[j])) {
          if (i > 1 && endSymbols[j].equals(")") && (numerals.matcher(tokens[i - 1].getToken()).matches() && !(!symbolStack.empty() && "(".equals(symbolStack.peek().symbol)))) {
          }
 else {
            if (symbolStack.empty()) {
              symbolStack.push(new SymbolLocator(endSymbols[j],i));
              break;
            }
 else {
              if (symbolStack.peek().symbol.equals(startSymbols[j])) {
                symbolStack.pop();
                break;
              }
 else {
                if (isEndSymbolUnique(endSymbols[j])) {
                  symbolStack.push(new SymbolLocator(endSymbols[j],i));
                  break;
                }
 else {
                  if (j == endSymbols.length - 1) {
                    symbolStack.push(new SymbolLocator(endSymbols[j],i));
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  for (  final SymbolLocator sLoc : symbolStack) {
    final RuleMatch rMatch=createMatch(ruleMatches,tokens[sLoc.index].getStartPos(),sLoc.symbol);
    if (rMatch != null) {
      ruleMatches.add(rMatch);
    }
  }
  symbolStack.clear();
  if (tokens[tokens.length - 1].isParagraphEnd()) {
    endOfParagraph=true;
  }
  return toRuleMatchArray(ruleMatches);
}
