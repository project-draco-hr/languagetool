{
  LanguageIdentifierTools.addLtProfiles();
  try {
    config=new Configuration(new File(System.getProperty("user.home")),CONFIG_FILE,null);
  }
 catch (  IOException ex) {
    throw new RuntimeException("Could not load configuration",ex);
  }
  currentLanguage=getDefaultLanguage();
  warmUpChecker();
  redPainter=new HighlightPainter(Color.red);
  bluePainter=new HighlightPainter(Color.blue);
  checkExecutor=new ScheduledThreadPoolExecutor(1,new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      Thread t=new Thread(r);
      t.setDaemon(true);
      t.setPriority(Thread.MIN_PRIORITY);
      t.setName(t.getName() + "-lt-background");
      return t;
    }
  }
);
  check=new AtomicInteger(0);
  this.textComponent.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void insertUpdate(    DocumentEvent e){
      if (e.getDocument().getLength() == e.getLength() && config.getAutoDetect()) {
        mustDetectLanguage=true;
      }
      recalculateSpans(e.getOffset(),e.getLength(),false);
      if (backgroundCheckEnabled) {
        checkDelayed(null);
      }
    }
    @Override public void removeUpdate(    DocumentEvent e){
      if (e.getDocument().getLength() == 0 && config.getAutoDetect()) {
        mustDetectLanguage=true;
      }
      recalculateSpans(e.getOffset(),e.getLength(),true);
      if (backgroundCheckEnabled) {
        checkDelayed(null);
      }
    }
    @Override public void changedUpdate(    DocumentEvent e){
      if (e.getDocument().getLength() == e.getLength() && config.getAutoDetect()) {
        mustDetectLanguage=true;
      }
      if (backgroundCheckEnabled) {
        checkDelayed(null);
      }
    }
  }
);
  this.textComponent.addMouseListener(mouseListener=new MouseListener(){
    @Override public void mouseClicked(    MouseEvent me){
    }
    @Override public void mousePressed(    MouseEvent me){
      if (me.isPopupTrigger()) {
        showPopup(me);
      }
    }
    @Override public void mouseReleased(    MouseEvent me){
      if (me.isPopupTrigger()) {
        showPopup(me);
      }
    }
    @Override public void mouseEntered(    MouseEvent me){
    }
    @Override public void mouseExited(    MouseEvent me){
    }
  }
);
  actionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      _actionPerformed(e);
    }
  }
;
  mustDetectLanguage=config.getAutoDetect();
  if (!this.textComponent.getText().isEmpty() && backgroundCheckEnabled) {
    checkImmediately(null);
  }
}
