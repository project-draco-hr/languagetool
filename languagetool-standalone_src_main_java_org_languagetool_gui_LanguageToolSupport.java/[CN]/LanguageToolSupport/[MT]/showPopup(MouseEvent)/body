{
  if (documentSpans.isEmpty()) {
    return;
  }
  int offset=this.textComponent.viewToModel(event.getPoint());
  for (int i=0; i < documentSpans.size(); i++) {
    final Span span=documentSpans.get(i);
    if (span.end > span.start) {
      if ((span.start <= offset) && (offset < span.end)) {
        JPopupMenu popup=new JPopupMenu("Grammar Menu");
        JLabel msgItem=new JLabel(span.msg);
        msgItem.setToolTipText(span.desc);
        msgItem.setBorder(new JMenuItem().getBorder());
        popup.add(msgItem);
        popup.add(new JSeparator());
        JMenuItem moreItem=new JMenuItem("More...");
        moreItem.addActionListener(new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            showDialog(textComponent,span.msg,span.desc,span.url);
          }
        }
);
        popup.add(moreItem);
        JMenuItem ignoreItem=new JMenuItem(messages.getString("guiOOoIgnoreButton"));
        ignoreItem.addActionListener(new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            disableRule(span.rule);
          }
        }
);
        popup.add(ignoreItem);
        if (!this.languageTool.getDisabledRules().isEmpty()) {
          JMenu activateRuleItem=new JMenu("Activate Rule");
          int count=0;
          for (          String ruleId : languageTool.getDisabledRules()) {
            Rule rule=getRuleForId(ruleId);
            if (rule == null) {
              continue;
            }
            if (rule.isDefaultOff()) {
              continue;
            }
            final String id=rule.getId();
            JMenuItem ruleItem=new JMenuItem(rule.getDescription());
            ruleItem.addActionListener(new ActionListener(){
              @Override public void actionPerformed(              ActionEvent e){
                enableRule(id);
              }
            }
);
            activateRuleItem.add(ruleItem);
            count++;
          }
          if (count > 0) {
            popup.add(activateRuleItem);
          }
        }
        popup.add(new JSeparator());
        for (        String r : span.replacement) {
          ReplaceMenuItem item=new ReplaceMenuItem(r,i);
          popup.add(item);
          item.addActionListener(actionListener);
        }
        textComponent.setCaretPosition(span.start);
        textComponent.moveCaretPosition(span.end);
        popup.addPopupMenuListener(new PopupMenuListener(){
          @Override public void popupMenuWillBecomeVisible(          PopupMenuEvent e){
          }
          @Override public void popupMenuWillBecomeInvisible(          PopupMenuEvent e){
          }
          @Override public void popupMenuCanceled(          PopupMenuEvent e){
            textComponent.setCaretPosition(span.start);
          }
        }
);
        popup.show(textComponent,event.getPoint().x,event.getPoint().y);
      }
    }
  }
}
