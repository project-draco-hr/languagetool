{
  CommaWhitespaceRule rule=new CommaWhitespaceRule(TestTools.getEnglishMessages());
  RuleMatch[] matches;
  JLanguageTool langTool=new JLanguageTool(Language.ENGLISH);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("This is a test sentence.")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("This, is, a test sentence.")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("This (foo bar) is a test(!).")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("&quot;This is it,&quot; he said.")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("Das kostet ???2,45.")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("Das kostet 50,- Euro")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("In his book,\u0002 Einstein proved this to be true.")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("This is $1,000,000.")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("This is 1,5.")).length);
  assertEquals(0,rule.match(langTool.getAnalyzedSentence("This is a ,,test''.")).length);
  matches=rule.match(langTool.getAnalyzedSentence("This,is a test sentence."));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("This , is a test sentence."));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("This ,is a test sentence."));
  assertEquals(2,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence(",is a test sentence."));
  assertEquals(2,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("This ( foo bar) is a test(!)."));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("This (foo bar ) is a test(!)."));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("This [ foo bar) is a test(!)."));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("This (foo bar ] is a test(!)."));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("This { foo bar) is a test(!)."));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("This (foo bar } is a test(!)."));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("This is a sentence with an orphaned full stop ."));
  assertEquals(1,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("This is a sentence with ellipsis ..."));
  assertEquals(0,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("This is a figure: .5 and it's correct."));
  assertEquals(0,matches.length);
  matches=rule.match(langTool.getAnalyzedSentence("ABB (  z.B. )"));
  assertEquals(2,matches.length);
  assertEquals(4,matches[0].getFromPos());
  assertEquals(6,matches[0].getToPos());
  assertEquals(11,matches[1].getFromPos());
  assertEquals(13,matches[1].getToPos());
  matches=rule.match(langTool.getAnalyzedSentence("This is a test with a OOo footnote\u0002, which is denoted by 0x2 in the text."));
  assertEquals(0,matches.length);
}
