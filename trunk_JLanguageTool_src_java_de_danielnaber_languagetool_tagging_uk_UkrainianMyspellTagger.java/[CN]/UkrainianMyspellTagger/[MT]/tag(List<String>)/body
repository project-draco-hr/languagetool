{
  List<AnalyzedTokenReadings> tokenReadings=new ArrayList<AnalyzedTokenReadings>();
  int pos=0;
  if (wordsToPos == null) {
    wordsToPos=new HashMap<String,String[]>();
    InputStream resourceFile=Tools.getStream(RESOURCE_FILENAME);
    BufferedReader input=new BufferedReader(new InputStreamReader(resourceFile,Charset.forName("UTF-8")));
    String line;
    while ((line=input.readLine()) != null) {
      line=line.trim();
      if (line.matches("^[0-9]") || line.length() == 0)       continue;
      String[] wrd=line.split("/");
      if (wrd.length > 1) {
        String flags=wrd[1];
        List<String> posTags=new ArrayList<String>();
        if (flags.matches("[abcdefghijklmnop]+")) {
          posTags.add(IPOSTag.TAG_NOUN);
          if (flags.equals("b"))           posTags.add(IPOSTag.TAG_PLURAL);
        }
 else         if (flags.matches("[ABCDEFGHIJKLMN]+")) {
          posTags.add(IPOSTag.TAG_VERB);
          if (flags.matches("^[BDFHJLN]+"))           posTags.add(IPOSTag.TAG_REFL);
        }
 else         if (flags.matches("[UV]+"))         posTags.add(IPOSTag.TAG_ADJ);
        if (posTags.size() > 0)         wordsToPos.put(wrd[0],posTags.toArray(new String[0]));
      }
    }
    if (input != null) {
      input.close();
    }
  }
  for (Iterator<String> iter=sentenceTokens.iterator(); iter.hasNext(); ) {
    String word=iter.next();
    List<AnalyzedToken> analyzedTokens=new ArrayList<AnalyzedToken>();
    String[] posTags=wordsToPos.get(word);
    String[] lowerPosTags=null;
    if (posTags != null) {
      for (      String posTag : posTags)       analyzedTokens.add(new AnalyzedToken(word,posTag,word));
    }
 else {
      String lowerWord=word.toLowerCase();
      if (!word.equals(lowerWord)) {
        lowerPosTags=wordsToPos.get(lowerWord);
        if (lowerPosTags != null) {
          for (          String lowerPosTag : lowerPosTags)           analyzedTokens.add(new AnalyzedToken(lowerWord,lowerPosTag,lowerWord));
        }
      }
    }
    if (posTags == null && lowerPosTags == null)     analyzedTokens.add(new AnalyzedToken(word,null,pos));
    pos+=word.length();
    tokenReadings.add(new AnalyzedTokenReadings(analyzedTokens.toArray(new AnalyzedToken[analyzedTokens.size()])));
  }
  return tokenReadings;
}
