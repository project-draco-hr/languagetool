{
  List<AnalyzedToken> taggerTokens;
  List<AnalyzedToken> lowerTaggerTokens;
  List<AnalyzedToken> upperTaggerTokens;
  final List<AnalyzedTokenReadings> tokenReadings=new ArrayList<AnalyzedTokenReadings>();
  int pos=0;
  if (dictLookup == null) {
    final URL url=this.getClass().getResource(getFileName());
    dictLookup=new DictionaryLookup(Dictionary.read(url));
  }
  for (  String word : sentenceTokens) {
    final List<AnalyzedToken> l=new ArrayList<AnalyzedToken>();
    final String lowerWord=word.toLowerCase(conversionLocale);
    taggerTokens=asAnalyzedTokenList(word,dictLookup.lookup(word));
    lowerTaggerTokens=asAnalyzedTokenList(word,dictLookup.lookup(lowerWord));
    final boolean isLowercase=word.equals(lowerWord);
    addTokens(taggerTokens,l);
    if (!isLowercase) {
      addTokens(lowerTaggerTokens,l);
    }
    if (lowerTaggerTokens.isEmpty() && taggerTokens.isEmpty()) {
      if (isLowercase) {
        upperTaggerTokens=asAnalyzedTokenList(word,dictLookup.lookup(StringTools.uppercaseFirstChar(word)));
        if (!upperTaggerTokens.isEmpty()) {
          addTokens(upperTaggerTokens,l);
        }
 else {
          l.add(new AnalyzedToken(word,null,null));
        }
      }
 else {
        l.add(new AnalyzedToken(word,null,null));
      }
    }
    tokenReadings.add(new AnalyzedTokenReadings(l,pos));
    pos+=word.length();
  }
  return tokenReadings;
}
