{
  List<GoogleToken> tokens=GoogleToken.getGoogleTokens(sentence,true,getGoogleStyleWordTokenizer());
  List<RuleMatch> matches=new ArrayList<>();
  GoogleToken prevPrevToken=null;
  GoogleToken prevToken=null;
  int i=0;
  for (  GoogleToken googleToken : tokens) {
    String token=googleToken.token;
    if (prevPrevToken != null && prevToken != null) {
      if (i < tokens.size() - 1) {
        GoogleToken next=tokens.get(i + 1);
        Probability p=lm.getPseudoProbability(Arrays.asList(prevToken.token,token,next.token));
        String ngram=prevToken + " " + token+ " "+ next.token;
        double prob=p.getProb();
        if (prob < minProbability) {
          Alternatives betterAlternatives=getBetterAlternatives(prevToken,token,next,googleToken,p);
          if (!betterAlternatives.alternativesConsidered || betterAlternatives.alternatives.size() > 0) {
            String message="The phrase '" + ngram + "' rarely occurs in the reference corpus ("+ p.getOccurrences()+ " times)";
            RuleMatch match=new RuleMatch(this,prevToken.startPos,next.endPos,message);
            List<String> suggestions=new ArrayList<>();
            for (            Alternative betterAlternative : betterAlternatives.alternatives) {
              suggestions.add(prevToken.token + " " + betterAlternative.token+ " "+ next.token);
            }
            match.setSuggestedReplacements(suggestions);
            matches.add(match);
          }
 else {
            debug("Ignoring match as all alternatives are less probable: '%s' in '%s'\n",ngram,sentence.getText());
          }
        }
      }
    }
    prevPrevToken=prevToken;
    prevToken=googleToken;
    i++;
  }
  return matches.toArray(new RuleMatch[matches.size()]);
}
