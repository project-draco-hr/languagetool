{
  final Language lang=Language.getLanguageForShortName(langCode);
  final JLanguageTool languageTool=new MultiThreadedJLanguageTool(lang);
  languageTool.activateDefaultPatternRules();
  if (ruleIds != null) {
    enableOnlySpecifiedRules(ruleIds,languageTool);
  }
 else {
    applyRuleDeactivation(languageTool,disabledRules);
  }
  disableSpellingRules(languageTool);
  System.out.println("Working on: " + StringUtils.join(fileNames,", "));
  System.out.println("Sentence limit: " + (maxSentences > 0 ? maxSentences : "no limit"));
  System.out.println("Error limit: " + (maxErrors > 0 ? maxErrors : "no limit"));
  ResultHandler resultHandler=null;
  int ruleMatchCount=0;
  int sentenceCount=0;
  try {
    if (propFile != null) {
      resultHandler=new DatabaseHandler(propFile,maxSentences,maxErrors);
    }
 else {
      resultHandler=new StdoutHandler(maxSentences,maxErrors);
    }
    MixingSentenceSource mixingSource=MixingSentenceSource.create(fileNames,lang);
    while (mixingSource.hasNext()) {
      Sentence sentence=mixingSource.next();
      List<RuleMatch> matches=languageTool.check(sentence.getText());
      resultHandler.handleResult(sentence,matches,lang);
      sentenceCount++;
      ruleMatchCount+=matches.size();
    }
  }
 catch (  ErrorLimitReachedException|DocumentLimitReachedException e) {
    System.out.println(e);
  }
 finally {
    if (resultHandler != null) {
      final float matchesPerSentence=(float)ruleMatchCount / sentenceCount;
      System.out.printf(lang + ": %d total matches\n",ruleMatchCount);
      System.out.printf(lang + ": ??%.2f rule matches per sentence\n",matchesPerSentence);
      try {
        resultHandler.close();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
}
