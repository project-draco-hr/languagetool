{
  if ((event.getKeyCode() == KeyEvent.VK_ENTER) && (event.getModifiers() == 0)) {
    if (enterFlag) {
      event.consume();
      int start, end;
      String text=getText();
      int caretPosition=getCaretPosition();
      try {
        if (text.charAt(caretPosition) == NEW_LINE) {
          caretPosition--;
        }
      }
 catch (      IndexOutOfBoundsException e) {
      }
      start=text.lastIndexOf(NEW_LINE,caretPosition) + 1;
      end=start;
      try {
        if (text.charAt(start) != NEW_LINE) {
          while ((end < text.length()) && (Character.isWhitespace(text.charAt(end))) && (text.charAt(end) != NEW_LINE)) {
            end++;
          }
          if (end > start) {
            getDocument().insertString(getCaretPosition(),NEW_LINE + text.substring(start,end),null);
          }
 else {
            getDocument().insertString(getCaretPosition(),NEW_LINE.toString(),null);
          }
        }
 else {
          getDocument().insertString(getCaretPosition(),NEW_LINE.toString(),null);
        }
      }
 catch (      IndexOutOfBoundsException e) {
        try {
          getDocument().insertString(getCaretPosition(),NEW_LINE.toString(),null);
        }
 catch (        BadLocationException e1) {
          logger.log(Level.WARNING,e1.toString());
        }
      }
catch (      BadLocationException e) {
        logger.log(Level.WARNING,e.toString());
      }
    }
  }
}
