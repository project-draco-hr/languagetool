{
  BasicNetwork network=new BasicNetwork();
  network.addLayer(new BasicLayer(null,true,neurons));
  network.addLayer(new BasicLayer(new ActivationSigmoid(),false,4));
  network.addLayer(new BasicLayer(new ActivationSigmoid(),false,1));
  network.getStructure().finalizeStructure();
  network.reset(1234);
  ResilientPropagation train=new ResilientPropagation(network,trainingSet);
  int epoch=1;
  do {
    train.iteration();
    if (epoch % 1000 == 0) {
      System.out.println("Epoch #" + epoch + " Error:"+ train.getError());
    }
    epoch++;
    if (epoch >= MAX_ITERATIONS) {
      System.err.println("Warn: maximum iterations (" + MAX_ITERATIONS + ") reached, stopping training");
      break;
    }
  }
 while (train.getError() > MAX_ERROR);
  System.out.println("Epoch #" + epoch + " Error:"+ train.getError());
  train.finishTraining();
  EncogPersistor persistor=new PersistBasicNetwork();
  try (FileOutputStream outputStream=new FileOutputStream(outputFile)){
    persistor.save(outputStream,network);
  }
 }
