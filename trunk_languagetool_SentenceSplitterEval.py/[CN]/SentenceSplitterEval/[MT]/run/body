def run(self, bnc_string):
    self.s = SentenceSplitter.SentenceSplitter()
    bnc_paras = re.compile('<p>(.*?)</p>', re.DOTALL).findall(bnc_string)
    bnc_paras_str = str.join(' ', bnc_paras)
    bnc_sentences = re.compile('<s\\s.*?>(.*?)</s>', re.DOTALL).findall(bnc_paras_str)
    bnc_boundaries = []
    l = 0
    i = 0
    for s in bnc_sentences:
        s = bnc_sentences[i]
        s = Entities.Entities.cleanEntities(s)
        s = re.compile('<.*?>').sub('', s)
        s = s.strip()
        if (not s.endswith(' ')):
            s = (s + ' ')
        bnc_sentences[i] = s
        l = (l + len(s))
        bnc_boundaries.append(l)
        i = (i + 1)
    bnc_sentences_str = str.join('', bnc_sentences)
    detected_sentences = self.s.split(bnc_sentences_str)
    detected_boundaries = []
    l = 0
    for s in detected_sentences:
        l = (l + len(s))
        detected_boundaries.append(l)
    sent_count = 0
    recall_count = 0
    for real_boundary in bnc_boundaries:
        if (real_boundary in detected_boundaries):
            recall_count = (recall_count + 1)
        else:
            pass
            (s, s_disp) = self.findSentence(real_boundary, bnc_sentences)
            print ("Not found: '%s'" % s_disp)
        sent_count = (sent_count + 1)
    recall = 0
    if (len(bnc_boundaries) > 0):
        recall = (float(recall_count) / float(len(bnc_boundaries)))
    precision_count = 0
    for detected_boundary in detected_boundaries:
        if (detected_boundary in bnc_boundaries):
            precision_count = (precision_count + 1)
    precision = 0
    if (len(detected_boundaries) > 0):
        precision = (float(precision_count) / float(len(detected_boundaries)))
    print ('Real sentences = %d' % sent_count)
    print ('Recall = %.3f' % recall)
    print ('Precision = %.3f' % precision)
    return
