{
  if (text.length() > maxTextLength) {
    throw new IllegalArgumentException("Text is " + text.length() + " characters long, exceeding maximum length of "+ maxTextLength);
  }
  final String langParam=parameters.get("language");
  final String autodetectParam=parameters.get("autodetect");
  if (langParam == null && (autodetectParam == null || !autodetectParam.equals("1"))) {
    throw new IllegalArgumentException("Missing 'language' parameter. Specify language or use autodetect=1 for auto-detecting the language of the input text.");
  }
  final Language lang;
  if (autodetectParam != null && autodetectParam.equals("1")) {
    lang=detectLanguageOfString(text,langParam);
    print("Auto-detected language: " + lang.getShortNameWithVariant());
  }
 else {
    lang=Language.getLanguageForShortName(langParam);
  }
  final String motherTongueParam=parameters.get("motherTongue");
  Language motherTongue=null;
  if (null != motherTongueParam) {
    motherTongue=Language.getLanguageForShortName(motherTongueParam);
  }
  final String enabledParam=parameters.get("enabled");
  enabledRules=new String[0];
  if (null != enabledParam) {
    enabledRules=enabledParam.split(",");
  }
  final String disabledParam=parameters.get("disabled");
  disabledRules=new String[0];
  if (null != disabledParam) {
    disabledRules=disabledParam.split(",");
  }
  useQuerySettings=enabledRules.length > 0 || disabledRules.length > 0;
  final List<RuleMatch> matches;
  final String sourceText=parameters.get("srctext");
  if (sourceText == null) {
    final JLanguageTool lt=getLanguageToolInstance(lang,motherTongue);
    print("Checking " + text.length() + " characters of text, language "+ langParam);
    matches=lt.check(text);
  }
 else {
    if (motherTongueParam == null) {
      throw new IllegalArgumentException("Missing 'motherTongue' for bilingual checks");
    }
    print("Checking bilingual text, with source length " + sourceText.length() + " and target length "+ text.length()+ " (characters), source language "+ motherTongue+ " and target language "+ langParam);
    final JLanguageTool sourceLt=getLanguageToolInstance(motherTongue,null);
    final JLanguageTool targetLt=getLanguageToolInstance(lang,null);
    final List<BitextRule> bRules=Tools.getBitextRules(motherTongue,lang);
    matches=Tools.checkBitext(sourceText,text,sourceLt,targetLt,bRules);
  }
  httpExchange.getResponseHeaders().set("Content-Type",CONTENT_TYPE_VALUE);
  final String response=StringTools.ruleMatchesToXML(matches,text,CONTEXT_SIZE,StringTools.XmlPrintMode.NORMAL_XML,lang,motherTongue);
  httpExchange.sendResponseHeaders(HttpURLConnection.HTTP_OK,response.getBytes(ENCODING).length);
  httpExchange.getResponseBody().write(response.getBytes(ENCODING));
}
