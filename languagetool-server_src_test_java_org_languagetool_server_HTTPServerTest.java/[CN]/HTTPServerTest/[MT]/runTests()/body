{
  final String matchAttr="software=\"LanguageTool\" version=\"[1-9].*?\" buildDate=\".*?\"";
  final String emptyResultPattern="<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<matches " + matchAttr + ">\n<language shortname=\"de\" name=\"German\"/>\n</matches>\n";
  final German german=new German();
  final String result1=check(german,"");
  assertTrue("Got " + result1 + ", expected "+ emptyResultPattern,result1.matches(emptyResultPattern));
  final String result2=check(german,"Ein kleiner test");
  assertTrue("Got " + result2 + ", expected "+ emptyResultPattern,result2.matches(emptyResultPattern));
  assertTrue(check(german,"ein kleiner test.").contains("UPPERCASE_SENTENCE_START"));
  final String result=check(german,"ein kleiner test. Und wieder Erwarten noch was: \u00f6\u00e4\u00fc\u00df.");
  assertTrue("Got result without 'UPPERCASE_SENTENCE_START': " + result,result.contains("UPPERCASE_SENTENCE_START"));
  assertTrue("Got result without 'WIEDER_WILLEN': " + result,result.contains("WIEDER_WILLEN"));
  assertTrue("Expected special chars, got: '" + result + "'",result.contains("\u00f6\u00e4\u00fc\u00df"));
  final XMLValidator validator=new XMLValidator();
  validator.validateXMLString(result,JLanguageTool.getDataBroker().getResourceDir() + "/api-output.dtd","matches");
  validator.checkSimpleXMLString(result);
  assertTrue(!check(german,"bla <script>").contains("<script>"));
  final String germanSpecialChars=check(german,"ein kleiner test. Und wieder Erwarten noch was: ????????+ ????????.");
  assertTrue("Expected special chars, got: '" + germanSpecialChars + "'",germanSpecialChars.contains("????????+"));
  final String romanianSpecialChars=check(new Romanian(),"bla bla ?????????? ?????????? ??i c??teva caractere speciale");
  assertTrue("Expected special chars, got: '" + romanianSpecialChars + "'",romanianSpecialChars.contains("??????????"));
  final Polish polish=new Polish();
  final String polishSpecialChars=check(polish,"M??wi??a d??ugo, ??eby tylko m??wi?? m??wi?? d??ugo.");
  assertTrue("Expected special chars, got: '" + polishSpecialChars + "'",polishSpecialChars.contains("m??wi??"));
  assertTrue(checkByPOST(new Romanian(),"gre??it gre??it").contains("gre??it"));
  final URL url=new URL("http://localhost:" + HTTPTools.getDefaultPort() + "/Languages");
  final String languagesXML=StringTools.streamToString((InputStream)url.getContent(),"UTF-8");
  if (!languagesXML.contains("Romanian") || !languagesXML.contains("English")) {
    fail("Error getting supported languages: " + languagesXML);
  }
  if (!languagesXML.contains("abbr=\"de\"") || !languagesXML.contains("abbrWithVariant=\"de-DE\"")) {
    fail("Error getting supported languages: " + languagesXML);
  }
  final English english=new English();
  assertTrue(check(english,"Me & you you").contains("&"));
  assertTrue(check(english,german,"We will berate you").contains("BERATE"));
  assertTrue(check(german,english,"Man sollte ihn nicht so beraten.").contains("BERATE"));
  assertTrue(check(polish,english,"To jest frywolne.").contains("FRIVOLOUS"));
  assertTrue(bitextCheck(polish,english,"This is frivolous.","To jest frywolne.").contains("FRIVOLOUS"));
  assertTrue(!bitextCheck(polish,english,"This is something else.","To jest frywolne.").contains("FRIVOLOUS"));
  final String[] nothing={};
  assertEquals(check(english,german,"We will berate you"),checkWithOptions(english,german,"We will berate you",nothing,nothing,false));
  final String[] disableAvsAn={"EN_A_VS_AN"};
  assertTrue(!checkWithOptions(english,german,"This is an test",nothing,disableAvsAn,false).contains("an test"));
  assertTrue(checkWithOptions(english,german,"This is an test",disableAvsAn,nothing,false).contains("an test"));
  assertTrue(checkWithOptions(english,german,"We will berate you",disableAvsAn,nothing,false).contains("BERATE"));
  assertTrue(!checkWithOptions(english,german,"We will berate you",disableAvsAn,nothing,true).contains("BERATE"));
  final String[] twoRules={"EN_A_VS_AN","BERATE"};
  String resultEn=checkWithOptions(english,german,"This is an test. We will berate you.",twoRules,nothing,false);
  assertTrue("Result: " + resultEn,resultEn.contains("EN_A_VS_AN"));
  assertTrue("Result: " + resultEn,resultEn.contains("BERATE"));
  String result3=checkWithOptions(english,german,"This is an test. We will berate you.",nothing,twoRules,false);
  assertFalse("Result: " + result3,result3.contains("EN_A_VS_AN"));
  assertFalse("Result: " + result3,result3.contains("BERATE"));
  String result4=checkWithOptions(english,german,"This is an test. We will berate you.",disableAvsAn,twoRules,false);
  assertTrue("Result: " + result4,result4.contains("EN_A_VS_AN"));
  assertFalse("Result: " + result4,result4.contains("BERATE"));
  String result5=bitextCheckDisabled(polish,english,"a","To jest okropnie d??ugi tekst, naprawd??!",nothing);
  assertTrue("Result: " + result5,result5.contains("TRANSLATION_LENGTH"));
  assertFalse("Result: " + result5,result5.contains("-2"));
  final String[] disableTranslationLen={"TRANSLATION_LENGTH"};
  String result6=bitextCheckDisabled(polish,english,"a","This is a very long text. Really!",disableTranslationLen);
  assertFalse("Result: " + result6,result6.contains("TRANSLATION_LENGTH"));
}
