{
  final List<String> l=new ArrayList<>();
  String auxText=text;
  Matcher matcher=ELA_GEMINADA.matcher(auxText);
  auxText=matcher.replaceAll("$1\u0001\u0001ELA_GEMINADA\u0001\u0001$2");
  matcher=ELA_GEMINADA_UPPERCASE.matcher(auxText);
  auxText=matcher.replaceAll("$1\u0001\u0001ELA_GEMINADA_UPPERCASE\u0001\u0001$2");
  matcher=APOSTROPHE.matcher(auxText);
  auxText=matcher.replaceAll("$1\u0001\u0001CA_APOS\u0001\u0001$2");
  matcher=APOSTROPHE_1.matcher(auxText);
  auxText=matcher.replaceAll("$1\u0001\u0001CA_APOS\u0001\u0001$2");
  matcher=NEARBY_HYPHENS.matcher(auxText);
  auxText=matcher.replaceAll("$1\u0001\u0001CA_HYPHEN\u0001\u0001$2\u0001\u0001CA_HYPHEN\u0001\u0001$3");
  matcher=HYPHENS.matcher(auxText);
  auxText=matcher.replaceAll("$1\u0001\u0001CA_HYPHEN\u0001\u0001$2");
  matcher=DECIMAL_POINT.matcher(auxText);
  auxText=matcher.replaceAll("$1\u0001\u0001CA_DECIMALPOINT\u0001\u0001$2");
  matcher=DECIMAL_COMMA.matcher(auxText);
  auxText=matcher.replaceAll("$1\u0001\u0001CA_DECIMALCOMMA\u0001\u0001$2");
  matcher=SPACE_DIGITS.matcher(auxText);
  auxText=matcher.replaceAll("$1\u0001\u0001CA_SPACE\u0001\u0001$2");
  final StringTokenizer st=new StringTokenizer(auxText,"\u0020\u00A0\u115f\u1160\u1680" + "\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007" + "\u2008\u2009\u200A\u200B\u200c\u200d\u200e\u200f"+ "\u2012\u2013\u2014\u2015\u2022"+ "\u2028\u2029\u202a\u202b\u202c\u202d\u202e\u202f"+ "\u205F\u2060\u2061\u2062\u2063\u206A\u206b\u206c\u206d"+ "\u206E\u206F\u3000\u3164\ufeff\uffa0\ufff9\ufffa\ufffb"+ ",.;()[]{}=*#???+????<>!?:~/\\\"'???????????????????`?????????\t\n\r-",true);
  String s;
  String groupStr;
  while (st.hasMoreElements()) {
    s=st.nextToken().replace("\u0001\u0001CA_APOS\u0001\u0001","'").replace("\u0001\u0001CA_HYPHEN\u0001\u0001","-").replace("\u0001\u0001CA_DECIMALPOINT\u0001\u0001",".").replace("\u0001\u0001CA_DECIMALCOMMA\u0001\u0001",",").replace("\u0001\u0001CA_SPACE\u0001\u0001"," ").replace("\u0001\u0001ELA_GEMINADA\u0001\u0001","l.l").replace("\u0001\u0001ELA_GEMINADA_UPPERCASE\u0001\u0001","L.L");
    boolean matchFound=false;
    int j=0;
    while (j < maxPatterns && !matchFound) {
      matcher=patterns[j].matcher(s);
      matchFound=matcher.find();
      j++;
    }
    if (matchFound) {
      for (int i=1; i <= matcher.groupCount(); i++) {
        groupStr=matcher.group(i);
        l.addAll(wordsToAdd(groupStr));
      }
    }
 else {
      l.addAll(wordsToAdd(s));
    }
  }
  return joinUrls(l);
}
