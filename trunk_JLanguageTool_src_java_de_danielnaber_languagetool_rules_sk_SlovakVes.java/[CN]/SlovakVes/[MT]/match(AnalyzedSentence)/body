{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  boolean tag, tag2, tag3;
  final String pomoc;
  final char znak;
  tag=false;
  tag2=false;
  tag3=false;
  pomoc=tokens[1].getToken();
  if (pomoc.length() >= 1) {
    znak=pomoc.charAt(0);
  }
 else {
    znak='.';
  }
  if (znak == '?') {
  }
  for (int i=1; i < tokens.length; i++) {
    final String token=tokens[i].getToken();
    final char pomocnik;
    boolean bodka;
    boolean pady;
    pady=false;
    pomocnik=token.charAt(0);
    bodka=false;
    if (token.charAt(0) == '.' || token.charAt(0) == '?' || token.charAt(0) == '!') {
      bodka=true;
    }
    if (tokens[i].hasPosTag("AAfs1x") || tokens[i].hasPosTag("AAfs2x") || tokens[i].hasPosTag("AAfs3x")|| tokens[i].hasPosTag("AAfs4x")|| tokens[i].hasPosTag("AAfs6x")|| tokens[i].hasPosTag("AAfs7x")) {
      pady=true;
    }
    if (pady && Character.isUpperCase(pomocnik)) {
      tag=true;
    }
    if (tag && !tag2) {
      if (pady && Character.isLowerCase(pomocnik)) {
        tag2=true;
      }
    }
    if (tag2) {
      if (token.equals("Ves") || token.equals("Vsi") || token.equals("Vsou")) {
        tag3=true;
      }
    }
    if (tag3 && !bodka) {
      String spravne;
      char prve;
      prve=tokens[i - 1].getToken().charAt(0);
      prve=Character.toUpperCase(prve);
      spravne=tokens[i - 1].getToken().substring(1,tokens[i - 1].getToken().length());
      final String msg="Zme??te za??iato??n?? p??smeno na ve??k??: <suggestion> " + prve + spravne+ " </suggestion>";
      final int pos=tokens[i - 1].getStartPos();
      final int pos2=tokens[i - 1].getToken().length();
      final RuleMatch ruleMatch=new RuleMatch(this,pos,pos + pos2,msg,"Zme??te za??iato??n?? p??smeno na ve??k??: ");
      ruleMatches.add(ruleMatch);
    }
  }
  return toRuleMatchArray(ruleMatches);
}
