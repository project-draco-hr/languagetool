{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  String prevToken="";
  int skipped=0;
  for (int i=1; i < tokens.length; i++) {
    String token=tokens[i].getToken();
    boolean doesRequireEl=false;
    token=token.replaceAll("[^a-z??????????????A-Z??????????????0-9\\.']","");
    if (StringTools.isEmpty(token)) {
      skipped++;
      continue;
    }
    if (requiresEl.contains(token.toLowerCase()) || requiresEl.contains(token)) {
      doesRequireEl=true;
    }
    if (prevToken.equals("La") && token.equals("Haya")) {
      doesRequireEl=false;
    }
    String msg=null;
    String repl=null;
    if (prevToken.equalsIgnoreCase("la") && doesRequireEl) {
      repl="el";
      if (prevToken.equals("La")) {
        repl="El";
      }
    }
 else     if (prevToken.equalsIgnoreCase("una") && doesRequireEl) {
      repl="un";
      if (prevToken.equals("Una")) {
        repl="Un";
      }
    }
 else     if (prevToken.equalsIgnoreCase("alguna") && doesRequireEl) {
      repl="alg\u00fan";
      if (prevToken.equals("Alguna")) {
        repl="Alg\u00fan";
      }
    }
 else     if (prevToken.equalsIgnoreCase("ninguna") && doesRequireEl) {
      repl="ning\u00fan";
      if (prevToken.equals("Ninguna")) {
        repl="Ning\u00fan";
      }
    }
    msg="Use <suggestion>" + repl + "</suggestion> en lugar de '"+ prevToken+ "' si la siguiente "+ "palabra comienza por 'a' o 'ha' t\u00f3nicas, por ejemplo 'el hampa', "+ "'un agua'";
    if (repl != null) {
      final int prevPos=tokens[i - skipped - 1].getStartPos();
      final RuleMatch ruleMatch=new RuleMatch(this,prevPos,prevPos + prevToken.length(),msg,"Art\u00edculo incorrecto");
      ruleMatches.add(ruleMatch);
    }
    if (tokens[i].hasPosTag("DA0FS0") || tokens[i].hasPosTag("DI0FS0")) {
      skipped=0;
      prevToken=token;
    }
 else {
      prevToken="";
    }
  }
  return toRuleMatchArray(ruleMatches);
}
