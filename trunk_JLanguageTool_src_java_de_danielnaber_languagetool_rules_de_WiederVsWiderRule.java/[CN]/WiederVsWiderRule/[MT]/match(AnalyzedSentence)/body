{
  List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  AnalyzedTokenReadings[] tokens=text.getTokens();
  int pos=0;
  boolean foundSpiegelt=false;
  boolean foundWieder=false;
  boolean foundWider=false;
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i].getToken();
    if (token.trim().equals("")) {
    }
 else {
      if (token.equalsIgnoreCase("spiegelt") || token.equalsIgnoreCase("spiegeln") || token.equalsIgnoreCase("spiegelte")|| token.equalsIgnoreCase("spiegelten")|| token.equalsIgnoreCase("spiegelst")) {
        foundSpiegelt=true;
      }
 else       if (token.equalsIgnoreCase("wieder") && foundSpiegelt) {
        foundWieder=true;
      }
 else       if (token.equalsIgnoreCase("wider") && foundSpiegelt) {
        foundWider=true;
      }
      if (foundSpiegelt && foundWieder && !foundWider) {
        String msg="'wider' in 'widerspiegeln' wird mit 'i' statt mit 'ie' " + "geschrieben, z.B. 'Das spiegelt die Situation gut wider.'";
        RuleMatch ruleMatch=new RuleMatch(this,pos,pos + token.length(),msg);
        ruleMatch.setSuggestedReplacement("wider");
        ruleMatches.add(ruleMatch);
        foundSpiegelt=false;
        foundWieder=false;
        foundWider=false;
      }
    }
    pos+=token.length();
  }
  return toRuleMatchArray(ruleMatches);
}
