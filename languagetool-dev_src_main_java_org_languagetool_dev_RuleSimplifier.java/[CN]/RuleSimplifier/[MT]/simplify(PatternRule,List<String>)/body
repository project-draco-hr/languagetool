{
  List<Integer> linesToRemove=new ArrayList<>();
  String currentRuleId=null;
  Pattern pattern=Pattern.compile(".*id=[\"'](.*?)[\"'].*");
  String expectedSubId=rule.getSubId();
  int lineCount=0;
  int subRuleCount=0;
  int removedCount=0;
  boolean inRuleGroup=false;
  String newRegex=null;
  boolean inAntiPattern=false;
  for (lineCount=0; lineCount < xmlLines.size(); lineCount++) {
    String xmlLine=xmlLines.get(lineCount);
    if (xmlLine.contains("<rulegroup")) {
      subRuleCount=0;
      inRuleGroup=true;
    }
 else     if (xmlLine.contains("</rulegroup>")) {
      subRuleCount=0;
      inRuleGroup=false;
    }
 else     if ((xmlLine.contains("<rule ") || xmlLine.contains("<rule>")) && inRuleGroup) {
      subRuleCount++;
    }
    Matcher m=pattern.matcher(xmlLine);
    if (m.matches()) {
      currentRuleId=m.group(1);
    }
    if (currentRuleId != null && !currentRuleId.equals(rule.getId())) {
      continue;
    }
    if (!inRuleGroup) {
      subRuleCount=1;
    }
    if (!expectedSubId.equals("0") && !expectedSubId.equals(String.valueOf(subRuleCount))) {
      continue;
    }
    if (xmlLine.matches(".*<antipattern.*")) {
      inAntiPattern=true;
    }
    if (inAntiPattern) {
      continue;
    }
    if (xmlLine.matches(".*</antipattern.*")) {
      inAntiPattern=false;
      continue;
    }
    if (xmlLine.matches(".*<(token|pattern).*") || xmlLine.matches("\\s*</?marker>.*")) {
      linesToRemove.add(lineCount);
    }
    if (xmlLine.matches(".*</pattern.*")) {
      linesToRemove.add(lineCount);
      int lastTokenIndent=xmlLine.indexOf("<");
      newRegex=Strings.repeat(" ",lastTokenIndent) + getRegex(rule);
    }
  }
  Collections.reverse(linesToRemove);
  for (  Integer s : linesToRemove) {
    xmlLines.remove(s.intValue());
    removedCount++;
  }
  if (removedCount == 0) {
    System.err.println("No line removed: " + rule + "["+ expectedSubId+ "]");
  }
 else {
    xmlLines.add(linesToRemove.get(linesToRemove.size() - 1),newRegex);
    touchedRulesCount++;
  }
}
