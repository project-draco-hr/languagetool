{
  for (  ErrorSentence sentence : corpus) {
    List<RuleMatch> matches=evaluator.check(sentence.getAnnotatedText());
    sentenceCount++;
    errorsInCorpusCount+=sentence.getErrors().size();
    System.out.println(sentence.getMarkupText() + " => " + matches.size());
    for (    RuleMatch match : matches) {
      int length=match.getToPos() - match.getFromPos();
      System.out.println(StringUtils.repeat(" ",match.getFromPos()) + StringUtils.repeat("^",length));
    }
    List<Span> detectedErrorPositions=new ArrayList<>();
    int tmpGoodMatches=0;
    for (    RuleMatch match : matches) {
      boolean alreadyCounted=errorAlreadyCounted(match,detectedErrorPositions);
      if (!alreadyCounted && sentence.hasErrorCoveredByMatchAndGoodFirstSuggestion(match)) {
        tmpGoodMatches++;
        matchCount++;
        System.out.println("    [++] " + match + ": "+ match.getSuggestedReplacements());
      }
 else       if (!alreadyCounted && sentence.hasErrorOverlappingWithMatch(match)) {
        tmpGoodMatches++;
        matchCount++;
        System.out.println("    [+ ] " + match + ": "+ match.getSuggestedReplacements());
      }
 else       if (alreadyCounted) {
        System.out.println("    [//]  " + match + ": "+ match.getSuggestedReplacements());
      }
 else {
        System.out.println("    [  ] " + match + ": "+ match.getSuggestedReplacements());
        matchCount++;
      }
      detectedErrorPositions.add(new Span(match.getFromPos(),match.getToPos()));
    }
    goodMatches+=Math.min(tmpGoodMatches,1);
  }
}
