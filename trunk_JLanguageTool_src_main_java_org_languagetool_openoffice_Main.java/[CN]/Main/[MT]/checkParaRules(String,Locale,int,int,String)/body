{
  if (startPos == 0) {
    try {
      paragraphMatches=langTool.check(paraText,false,JLanguageTool.ParagraphHandling.ONLYPARA);
      this.docID=docID;
    }
 catch (    final Throwable t) {
      showError(t);
    }
  }
  if (paragraphMatches != null && !paragraphMatches.isEmpty() && docID.equals(this.docID)) {
    final List<SingleProofreadingError> errorList=new ArrayList<SingleProofreadingError>(paragraphMatches.size());
    for (    final RuleMatch myRuleMatch : paragraphMatches) {
      final int startErrPos=myRuleMatch.getFromPos();
      final int endErrPos=myRuleMatch.getToPos();
      if (startErrPos >= startPos && startErrPos < endPos && endErrPos >= startPos && endErrPos < endPos) {
        errorList.add(createOOoError(myRuleMatch,0));
      }
    }
    if (!errorList.isEmpty()) {
      final SingleProofreadingError[] errorArray=errorList.toArray(new SingleProofreadingError[errorList.size()]);
      Arrays.sort(errorArray,new ErrorPositionComparator());
      return errorArray;
    }
  }
  return null;
}
