{
  StringBuilder sb=new StringBuilder();
  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?> <rules lang=\"en\"> <category name=\"Test\"> <rule id=\"TEST_RULE\" name=\"test\"> <pattern>");
  sb.append("<token skip=\"-1\">both<exception scope=\"next\">and</exception></token>");
  sb.append("</pattern> </rule> </category> </rules>");
  InputStream input=new ByteArrayInputStream(sb.toString().getBytes());
  final PatternRuleLoader ruleLoader=new PatternRuleLoader();
  final PatternRuleQueryBuilder patternRuleQueryBuilder=new PatternRuleQueryBuilder();
  List<PatternRule> rules=ruleLoader.getRules(input,"test.xml");
  try {
    patternRuleQueryBuilder.buildQuery(rules.get(0),true);
    fail("Exception should be thrown for unsupported PatternRule");
  }
 catch (  UnsupportedPatternRuleException expected) {
  }
  try {
    patternRuleQueryBuilder.buildQuery(rules.get(0),false);
  }
 catch (  UnsupportedPatternRuleException e) {
    fail("Exception should not be thrown, if not checkUnsupportedRule");
  }
  sb=new StringBuilder();
  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?> <rules lang=\"en\"> <category name=\"Test\"> <rule id=\"TEST_RULE\" name=\"test\"> <pattern>");
  sb.append("<token inflected=\"yes\">suppose</token>");
  sb.append("</pattern> </rule> </category> </rules>");
  input=new ByteArrayInputStream(sb.toString().getBytes());
  rules=ruleLoader.getRules(input,"test.xml");
  try {
    patternRuleQueryBuilder.buildQuery(rules.get(0),true);
    fail("Exception should be thrown for unsupported PatternRule");
  }
 catch (  UnsupportedPatternRuleException expected) {
  }
  try {
    patternRuleQueryBuilder.buildQuery(rules.get(0),false);
  }
 catch (  UnsupportedPatternRuleException e) {
    fail("Exception should not be thrown, if not checkUnsupportedRule");
  }
}
