{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  int pos=0;
  boolean prevTokenIsDas=false;
  for (int i=0; i < tokens.length; i++) {
    final String posToken=tokens[i].getAnalyzedToken(0).getPOSTag();
    if (posToken != null && posToken.equals(JLanguageTool.SENTENCE_START_TAGNAME))     continue;
    if (i == 1) {
      if (nounIndicators.contains(tokens[i].getToken().toLowerCase())) {
        prevTokenIsDas=true;
      }
      continue;
    }
    final AnalyzedGermanTokenReadings analyzedToken=(AnalyzedGermanTokenReadings)tokens[i];
    final String token=analyzedToken.getToken();
    List<AnalyzedGermanToken> readings=analyzedToken.getGermanReadings();
    AnalyzedGermanTokenReadings analyzedGermanToken2=null;
    boolean isBaseform=false;
    if (analyzedToken.getReadingsLength() > 1 && token.equals(analyzedToken.getAnalyzedToken(0).getLemma())) {
      isBaseform=true;
    }
    if ((readings == null || analyzedToken.getAnalyzedToken(0).getPOSTag() == null || analyzedToken.hasReadingOfType(GermanToken.POSType.VERB)) && isBaseform) {
      try {
        analyzedGermanToken2=tagger.lookup(token.toLowerCase());
        if (analyzedGermanToken2 != null) {
          readings=analyzedGermanToken2.getGermanReadings();
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      if (prevTokenIsDas) {
        final String newToken=StringTools.uppercaseFirstChar(token);
        try {
          analyzedGermanToken2=tagger.lookup(newToken);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        if (Character.isLowerCase(token.charAt(0)) && !substVerbenExceptions.contains(token)) {
          final String msg="Substantivierte Verben werden gro?? geschrieben.";
          final RuleMatch ruleMatch=new RuleMatch(this,tokens[i].getStartPos(),tokens[i].getStartPos() + token.length(),msg);
          final String word=tokens[i].getToken();
          final String fixedWord=StringTools.uppercaseFirstChar(word);
          ruleMatch.setSuggestedReplacement(fixedWord);
          ruleMatches.add(ruleMatch);
        }
      }
    }
    prevTokenIsDas=nounIndicators.contains(tokens[i].getToken().toLowerCase());
    if (readings == null)     continue;
    final boolean hasNounReading=analyzedToken.hasReadingOfType(GermanToken.POSType.NOMEN);
    if (hasNounReading)     continue;
    try {
      analyzedGermanToken2=tagger.lookup(token.toLowerCase());
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    if (analyzedToken.getAnalyzedToken(0).getPOSTag() == null && analyzedGermanToken2 == null) {
      continue;
    }
    if (analyzedToken.getAnalyzedToken(0).getPOSTag() == null && analyzedGermanToken2 != null && analyzedGermanToken2.getAnalyzedToken(0).getPOSTag() == null) {
      continue;
    }
    if (Character.isUpperCase(token.charAt(0)) && token.length() > 1 && !sentenceStartExceptions.contains(tokens[i - 1].getToken()) && !StringTools.isAllUppercase(token) && !exceptions.contains(token) && !analyzedToken.hasReadingOfType(POSType.PROPER_NOUN) && !analyzedToken.isSentenceEnd() && !isExceptionPhrase(i,tokens)) {
      final String msg="Au??er am Satzanfang werden nur Nomen und Eigennamen gro?? geschrieben";
      final RuleMatch ruleMatch=new RuleMatch(this,tokens[i].getStartPos(),tokens[i].getStartPos() + token.length(),msg);
      final String word=tokens[i].getToken();
      final String fixedWord=Character.toLowerCase(word.charAt(0)) + word.substring(1);
      ruleMatch.setSuggestedReplacement(fixedWord);
      ruleMatches.add(ruleMatch);
    }
    pos+=token.length();
  }
  return toRuleMatchArray(ruleMatches);
}
