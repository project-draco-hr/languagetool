{
  List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  int pos=0;
  boolean prevTokenIsDas=false;
  for (int i=0; i < tokens.length; i++) {
    String posToken=tokens[i].getAnalyzedToken(0).getPOSTag();
    if (posToken != null && posToken.equals(JLanguageTool.SENTENCE_START_TAGNAME))     continue;
    if (i == 1) {
      if (tokens[i].getToken().equalsIgnoreCase("das")) {
        prevTokenIsDas=true;
      }
      continue;
    }
    AnalyzedGermanTokenReadings analyzedToken=(AnalyzedGermanTokenReadings)tokens[i];
    String token=analyzedToken.getToken();
    List<AnalyzedGermanToken> readings=analyzedToken.getGermanReadings();
    AnalyzedGermanTokenReadings analyzedGermanToken2=null;
    boolean isBaseform=false;
    if (analyzedToken.getReadingsLength() > 1 && token.equals(analyzedToken.getAnalyzedToken(0).getLemma())) {
      isBaseform=true;
    }
    if ((readings == null || analyzedToken.getAnalyzedToken(0).getPOSTag() == null || hasOnlyVerbReadings(analyzedToken)) && isBaseform) {
      try {
        analyzedGermanToken2=tagger.lookup(token.toLowerCase());
        if (analyzedGermanToken2 != null) {
          readings=analyzedGermanToken2.getGermanReadings();
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      if (prevTokenIsDas) {
        String newToken=token.substring(0,1).toUpperCase() + token.substring(1);
        try {
          analyzedGermanToken2=tagger.lookup(newToken);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        if (Character.isLowerCase(token.charAt(0)) && !substVerbenExceptions.contains(token)) {
          String msg="Substantivierte Verben werden gro?? geschrieben.";
          RuleMatch ruleMatch=new RuleMatch(this,tokens[i].getStartPos(),tokens[i].getStartPos() + token.length(),msg);
          String word=tokens[i].getToken();
          String fixedWord=Character.toUpperCase(word.charAt(0)) + word.substring(1);
          ruleMatch.setSuggestedReplacement(fixedWord);
          ruleMatches.add(ruleMatch);
        }
      }
    }
    if (tokens[i].getToken().equalsIgnoreCase("das")) {
      prevTokenIsDas=true;
    }
 else {
      prevTokenIsDas=false;
    }
    if (readings == null)     continue;
    boolean hasNounReading=analyzedToken.hasReadingOfType(GermanToken.POSType.NOMEN);
    if (hasNounReading)     continue;
    try {
      analyzedGermanToken2=tagger.lookup(token.toLowerCase());
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    if (analyzedToken.getAnalyzedToken(0).getPOSTag() == null && analyzedGermanToken2 == null) {
      continue;
    }
    if (analyzedToken.getAnalyzedToken(0).getPOSTag() == null && analyzedGermanToken2 != null && analyzedGermanToken2.getAnalyzedToken(0).getPOSTag() == null) {
      continue;
    }
    if (Character.isUpperCase(token.charAt(0)) && !tokens[i - 1].getToken().equals(":") && !exceptions.contains(token)&& token.length() > 1 && !analyzedToken.hasReadingOfType(POSType.PROPER_NOUN)) {
      String msg="Au??er am Satzanfang werden nur Nomen und Eigennamen gro?? geschrieben";
      RuleMatch ruleMatch=new RuleMatch(this,tokens[i].getStartPos(),tokens[i].getStartPos() + token.length(),msg);
      String word=tokens[i].getToken();
      String fixedWord=Character.toLowerCase(word.charAt(0)) + word.substring(1);
      ruleMatch.setSuggestedReplacement(fixedWord);
      ruleMatches.add(ruleMatch);
    }
    pos+=token.length();
  }
  return toRuleMatchArray(ruleMatches);
}
