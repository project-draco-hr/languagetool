{
  final List<String> l=new ArrayList<>();
  final StringTokenizer st=new StringTokenizer(text,plTokenizing,true);
  while (st.hasMoreElements()) {
    final String token=st.nextToken();
    if (token.length() > 1) {
      if (token.endsWith("-")) {
        l.add(token.substring(0,token.length() - 1));
        l.add("-");
      }
 else       if (token.charAt(0) == '-') {
        l.add("-");
        l.add(token.substring(1,token.length()));
      }
 else       if (token.contains("-")) {
        String[] tokenParts=token.split("-");
        if (prefixes.contains(tokenParts[0]) || tagger == null) {
          l.add(token);
        }
 else {
          List<String> testedTokens=new ArrayList<>(tokenParts.length + 1);
          Collections.addAll(testedTokens,tokenParts);
          testedTokens.add(token);
          try {
            List<AnalyzedTokenReadings> taggedToks=tagger.tag(testedTokens);
            if (taggedToks.size() == tokenParts.length + 1 && !taggedToks.get(tokenParts.length).isTagged()) {
              boolean isCompound=false;
switch (tokenParts.length) {
case 2:
                if ((taggedToks.get(0).hasPosTag("adja") && taggedToks.get(1).hasPartialPosTag("adj:")) || (taggedToks.get(0).hasPartialPosTag("subst:") && taggedToks.get(1).hasPartialPosTag("subst:")) || (taggedToks.get(0).hasPartialPosTag("num:") && taggedToks.get(1).hasPartialPosTag("num:"))) {
                  isCompound=true;
                }
              break;
case 3:
            if (taggedToks.get(0).hasPosTag("adja") && taggedToks.get(1).hasPosTag("adja") && taggedToks.get(2).hasPartialPosTag("adj:")) {
              isCompound=true;
            }
          break;
      }
      if (isCompound) {
        for (int i=0; i < tokenParts.length; i++) {
          l.add(tokenParts[i]);
          if (i != tokenParts.length - 1) {
            l.add("-");
          }
        }
      }
 else {
        l.add(token);
      }
    }
 else {
      l.add(token);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
}
 else {
l.add(token);
}
}
 else {
l.add(token);
}
}
return joinUrls(l);
}
