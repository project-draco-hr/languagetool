{
  final StringBuilder xml=new StringBuilder();
  if (xmlMode == XmlPrintMode.NORMAL_XML || xmlMode == XmlPrintMode.START_XML) {
    xml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
    xml.append("<matches software=\"LanguageTool\" version=\"" + JLanguageTool.VERSION + "\""+ " buildDate=\"").append(JLanguageTool.BUILD_DATE).append("\">\n");
  }
  if (lang != null || motherTongue != null) {
    String languageXml;
    languageXml="<language ";
    if (lang != null) {
      languageXml+="shortname=\"" + lang.getShortNameWithVariant() + "\" name=\""+ lang.getName()+ "\"";
    }
    if (null != motherTongue && (lang == null || !motherTongue.getShortName().equals(lang.getShortNameWithVariant()))) {
      languageXml+=" mothertongueshortname=\"" + motherTongue.getShortName() + "\" mothertonguename=\""+ motherTongue.getName()+ "\"";
    }
    languageXml+="/>\n";
    xml.append(languageXml);
  }
  final ContextTools contextTools=new ContextTools();
  contextTools.setEscapeHtml(false);
  contextTools.setContextSize(contextSize);
  final String START_MARKER="__languagetool_start_marker";
  contextTools.setErrorMarkerStart(START_MARKER);
  contextTools.setErrorMarkerEnd("");
  for (  final RuleMatch match : ruleMatches) {
    String subId="";
    if (match.getRule() instanceof PatternRule) {
      final PatternRule pRule=(PatternRule)match.getRule();
      if (pRule.getSubId() != null) {
        subId=" subId=\"" + escapeXMLForAPIOutput(pRule.getSubId()) + "\" ";
      }
    }
    xml.append("<error fromy=\"").append(match.getLine()).append("\"").append(" fromx=\"").append(match.getColumn() - 1).append("\"").append(" toy=\"").append(match.getEndLine()).append("\"").append(" tox=\"").append(match.getEndColumn() - 1).append("\"").append(" ruleId=\"").append(match.getRule().getId()).append("\"");
    final String msg=match.getMessage().replaceAll("</?suggestion>","'");
    xml.append(subId);
    xml.append(" msg=\"").append(escapeXMLForAPIOutput(msg)).append("\"");
    String context=contextTools.getContext(match.getFromPos(),match.getToPos(),text);
    xml.append(" replacements=\"").append(escapeXMLForAPIOutput(listToString(match.getSuggestedReplacements(),"#"))).append("\"");
    final int contextOffset=context.indexOf(START_MARKER);
    context=context.replaceFirst(START_MARKER,"");
    context=context.replaceAll("[\n\r]"," ");
    xml.append(" context=\"").append(StringTools.escapeXML(context)).append("\"").append(" contextoffset=\"").append(contextOffset).append("\"").append(" offset=\"").append(match.getFromPos()).append("\"").append(" errorlength=\"").append(match.getToPos() - match.getFromPos()).append("\"");
    if (match.getRule().getUrl() != null) {
      xml.append(" url=\"").append(escapeXMLForAPIOutput(match.getRule().getUrl().toString())).append("\"");
    }
    final Category category=match.getRule().getCategory();
    if (category != null) {
      xml.append(" category=\"").append(escapeXMLForAPIOutput(category.getName())).append("\"");
    }
    final String type=match.getRule().getLocQualityIssueType();
    if (type != null) {
      xml.append(" locqualityissuetype=\"").append(escapeXMLForAPIOutput(type)).append("\"");
    }
    xml.append("/>\n");
  }
  if (xmlMode == XmlPrintMode.END_XML || xmlMode == XmlPrintMode.NORMAL_XML) {
    xml.append("</matches>\n");
  }
  return xml.toString();
}
