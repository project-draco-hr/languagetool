{
  initSynthesizer();
  initPossibleTags();
  Pattern p;
  boolean addDt=false;
  String prep="";
  final Matcher mPrep=pPrep.matcher(posTag);
  if (mPrep.matches()) {
    addDt=true;
    if (mPrep.groupCount() > 1) {
      prep=mPrep.group(2);
    }
  }
  if (addDt) {
    p=Pattern.compile("N.*|A.*|V.P.*|PX.");
  }
 else {
    p=Pattern.compile(posTag);
  }
  final ArrayList<String> results=new ArrayList<>();
  final IStemmer synthesizer=createStemmer();
  for (  final String tag : possibleTags) {
    final Matcher m=p.matcher(tag);
    if (m.matches()) {
      if (addDt) {
        lookupWithEl(token.getLemma(),tag,prep,results,synthesizer);
      }
 else {
        lookup(token.getLemma(),tag,results);
      }
    }
  }
  if ((results.size() == 0) && posTag.startsWith("V") && !posTag.endsWith(".")&& !posTag.endsWith("*")) {
    p=Pattern.compile(posTag.substring(0,posTag.length() - 1).concat("0"));
    for (    final String tag : possibleTags) {
      final Matcher m=p.matcher(tag);
      if (m.matches()) {
        lookup(token.getLemma(),tag,results);
      }
    }
  }
  return results.toArray(new String[results.size()]);
}
