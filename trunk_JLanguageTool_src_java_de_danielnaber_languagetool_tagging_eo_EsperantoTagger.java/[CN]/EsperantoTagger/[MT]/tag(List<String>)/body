{
  final Pattern patternParticip=Pattern.compile("(.*)([aio])(n?)t([aoe])(j?)(n?)");
  final Pattern patternTabelvorto=Pattern.compile("^(i|ti|ki|??i|neni)((([uoae])(j?)(n?))|(am|al|es|el|om))$");
  Matcher matcher;
  final List<AnalyzedTokenReadings> tokenReadings=new ArrayList<AnalyzedTokenReadings>();
  int pos=0;
  for (  String word : sentenceTokens) {
    final List<AnalyzedToken> l=new ArrayList<AnalyzedToken>();
    final String lWord=word.toLowerCase();
    if (lWord.equals(".")) {
      l.add(new AnalyzedToken(word,"M fino",lWord));
    }
 else     if (lWord.equals("?")) {
      l.add(new AnalyzedToken(word,"M fino dem",lWord));
    }
 else     if (lWord.equals("!")) {
      l.add(new AnalyzedToken(word,"M fino kri",lWord));
    }
 else     if (lWord.equals("la")) {
      l.add(new AnalyzedToken(word,"D",lWord));
    }
 else     if (setAdverbs.contains(lWord)) {
      l.add(new AnalyzedToken(word,"E nak",lWord));
    }
 else     if (setWordsNotTagged.contains(lWord)) {
      l.add(new AnalyzedToken(word,null,lWord));
    }
 else     if (lWord.equals("mi") || lWord.equals("ci") || lWord.equals("li")|| lWord.equals("??i")|| lWord.equals("oni")) {
      l.add(new AnalyzedToken(word,"R nak np",lWord));
    }
 else     if (lWord.equals("min") || lWord.equals("cin") || lWord.equals("lin")|| lWord.equals("??in")) {
      l.add(new AnalyzedToken(word,"R akz np",lWord.substring(0,lWord.length() - 1)));
    }
 else     if (lWord.equals("ni") || lWord.equals("ili")) {
      l.add(new AnalyzedToken(word,"R nak pl",lWord));
    }
 else     if (lWord.equals("nin") || lWord.equals("ilin")) {
      l.add(new AnalyzedToken(word,"R akz pl",lWord.substring(0,lWord.length() - 1)));
    }
 else     if (lWord.equals("vi")) {
      l.add(new AnalyzedToken(word,"R nak pn",lWord));
    }
 else     if (lWord.equals("vin")) {
      l.add(new AnalyzedToken(word,"R akz pn",lWord.substring(0,lWord.length() - 1)));
    }
 else     if (setConjunctions.contains(lWord)) {
      l.add(new AnalyzedToken(word,"K",lWord));
    }
 else     if (setPrepositionsNoAccusative.contains(lWord)) {
      l.add(new AnalyzedToken(word,"P sak",lWord));
    }
 else     if (setPrepositionsAccusative.contains(lWord)) {
      l.add(new AnalyzedToken(word,"P kak",lWord));
    }
 else     if (setNumbers.contains(lWord)) {
      l.add(new AnalyzedToken(word,"N",lWord));
    }
 else     if ((matcher=patternTabelvorto.matcher(lWord)).find()) {
      final String type1Group=matcher.group(1).substring(0,1).toLowerCase();
      final String type2Group=matcher.group(4);
      final String plGroup=matcher.group(5);
      final String accGroup=matcher.group(6);
      final String type3Group=matcher.group(7);
      final String type;
      final String plural;
      final String accusative;
      if (accGroup == null) {
        accusative="xxx";
      }
 else {
        accusative=accGroup.toLowerCase().equals("n") ? "akz" : "nak";
      }
      if (plGroup == null) {
        plural=" pn ";
      }
 else {
        plural=plGroup.toLowerCase().equals("j") ? " pl " : " np ";
      }
      type=((type2Group == null) ? type3Group : type2Group).toLowerCase();
      l.add(new AnalyzedToken(word,"T " + accusative + plural+ type1Group+ " "+ type,null));
    }
 else     if (lWord.endsWith("o")) {
      l.add(new AnalyzedToken(word,"O nak np",lWord.substring(0,lWord.length() - 1)));
    }
 else     if (lWord.endsWith("oj")) {
      l.add(new AnalyzedToken(word,"O nak pl",lWord.substring(0,lWord.length() - 2)));
    }
 else     if (lWord.endsWith("on")) {
      l.add(new AnalyzedToken(word,"O akz np",lWord.substring(0,lWord.length() - 2)));
    }
 else     if (lWord.endsWith("ojn")) {
      l.add(new AnalyzedToken(word,"O akz pl",lWord.substring(0,lWord.length() - 3)));
    }
 else     if (lWord.endsWith("a")) {
      l.add(new AnalyzedToken(word,"A nak np",lWord.substring(0,lWord.length() - 1)));
    }
 else     if (lWord.endsWith("aj")) {
      l.add(new AnalyzedToken(word,"A nak pl",lWord.substring(0,lWord.length() - 2)));
    }
 else     if (lWord.endsWith("an")) {
      l.add(new AnalyzedToken(word,"A akz np",lWord.substring(0,lWord.length() - 2)));
    }
 else     if (lWord.endsWith("ajn")) {
      l.add(new AnalyzedToken(word,"A akz pl",lWord.substring(0,lWord.length() - 3)));
    }
 else     if (lWord.endsWith("e")) {
      l.add(new AnalyzedToken(word,"E nak",lWord.substring(0,lWord.length() - 1)));
    }
 else     if (lWord.endsWith("en")) {
      l.add(new AnalyzedToken(word,"E akz",lWord.substring(0,lWord.length() - 2)));
    }
 else     if ((matcher=patternVerb1.matcher(lWord)).find()) {
      final String verb=matcher.group(1);
      final String tense=matcher.group(2);
      final String transitive;
      final Matcher matcher2=patternVerb2.matcher(lWord);
      if (matcher2.find()) {
        transitive=matcher2.group(1).equals("ig") ? "tr" : "nt";
      }
 else {
        final boolean isTransitive=setTrVerbs.contains(verb);
        final boolean isIntransitive=setNtrVerbs.contains(verb);
        if (isTransitive) {
          transitive=isIntransitive ? "tn" : "tr";
        }
 else {
          transitive=isIntransitive ? "nt" : "tn";
        }
      }
      l.add(new AnalyzedToken(word,"V " + transitive + " "+ tense,verb));
    }
 else {
      l.add(new AnalyzedToken(word,null,null));
    }
    pos+=word.length();
    tokenReadings.add(new AnalyzedTokenReadings(l.toArray(new AnalyzedToken[0]),0));
  }
  return tokenReadings;
}
