{
  Unifier uni=new Unifier();
  Element sgElement=new Element("",false,false,false);
  sgElement.setPosElement(".*[\\.:]sg:.*",true,false);
  uni.setEquivalence("number","singular",sgElement);
  Element plElement=new Element("",false,false,false);
  plElement.setPosElement(".*[\\.:]pl:.*",true,false);
  uni.setEquivalence("number","plural",plElement);
  AnalyzedToken sing1=new AnalyzedToken("ma??y","adj:sg:blahblah","ma??y");
  AnalyzedToken sing2=new AnalyzedToken("cz??owiek","subst:sg:blahblah","cz??owiek");
  boolean satisfied=uni.isSatisfied(sing1,"number","singular");
  satisfied&=uni.isSatisfied(sing2,"number","singular");
  uni.startUnify();
  assertEquals(true,satisfied);
  uni.reset();
  AnalyzedToken sing1a=new AnalyzedToken("ma??y","adj:pl:blahblah","ma??y");
  satisfied=uni.isSatisfied(sing1,"number","singular");
  satisfied|=uni.isSatisfied(sing1a,"number","singular");
  uni.startUnify();
  satisfied&=uni.isSatisfied(sing2,"number","singular");
  assertEquals(true,satisfied);
  uni.reset();
  sing1a=new AnalyzedToken("ma??y","adj:pl:blahblah","ma??y");
  satisfied=uni.isSatisfied(sing1,"number","singular,plural");
  satisfied|=uni.isSatisfied(sing1a,"number","singular,plural");
  uni.startUnify();
  satisfied&=uni.isSatisfied(sing2,"number","singular,plural");
  assertEquals(true,satisfied);
  uni.reset();
  sing1a=new AnalyzedToken("ma??y","adj:pl:blahblah","ma??y");
  satisfied=uni.isSatisfied(sing1,"number","");
  satisfied|=uni.isSatisfied(sing1a,"number","");
  uni.startUnify();
  satisfied&=uni.isSatisfied(sing2,"number","");
  assertEquals(true,satisfied);
  uni.reset();
  satisfied=uni.isSatisfied(sing1a,"number","");
  uni.startUnify();
  satisfied&=uni.isSatisfied(sing2,"number","");
  assertEquals(false,satisfied);
  uni.reset();
}
