{
switch (qName) {
case "category":
    categoryIssueType=null;
  break;
case "regexp":
inRegex=false;
break;
case RULE:
suggestionMatchesOutMsg=addLegacyMatches(suggestionMatchesOutMsg,suggestionsOutMsg.toString(),false);
if (relaxedMode && id == null) {
id="";
}
if (relaxedMode && name == null) {
name="";
}
if (phrasePatternTokens.isEmpty()) {
List<PatternToken> tmpPatternTokens=new ArrayList<>();
createRules(new ArrayList<>(patternTokens),tmpPatternTokens,0);
}
 else {
if (!patternTokens.isEmpty()) {
for (List<PatternToken> ph : phrasePatternTokens) {
ph.addAll(new ArrayList<>(patternTokens));
}
}
for (List<PatternToken> phrasePatternToken : phrasePatternTokens) {
processElement(phrasePatternToken);
List<PatternToken> tmpPatternTokens=new ArrayList<>();
createRules(phrasePatternToken,tmpPatternTokens,0);
}
}
patternTokens.clear();
if (phrasePatternTokens != null) {
phrasePatternTokens.clear();
}
ruleIssueType=null;
inRule=false;
filterClassName=null;
filterArgs=null;
break;
case EXCEPTION:
finalizeExceptions();
break;
case AND:
inAndGroup=false;
andGroupCounter=0;
tokenCounter++;
break;
case OR:
inOrGroup=false;
orGroupCounter=0;
tokenCounter++;
break;
case TOKEN:
finalizeTokens();
break;
case PATTERN:
inPattern=false;
if (lastPhrase) {
patternTokens.clear();
}
tokenCounter=0;
break;
case ANTIPATTERN:
String antiId=id;
if (inRuleGroup) {
if (subId > 0) {
antiId=ruleGroupId + "[" + subId+ "]";
}
 else {
antiId=ruleGroupId;
}
}
DisambiguationPatternRule rule=new DisambiguationPatternRule(antiId + "_antipattern:" + antiPatternCounter,"antipattern",language,patternTokens,null,null,DisambiguationPatternRule.DisambiguatorAction.IMMUNIZE);
if (startPos != -1 && endPos != -1) {
rule.setStartPositionCorrection(startPos);
rule.setEndPositionCorrection(endPos - tokenCountForMarker);
}
 else {
for (PatternToken patternToken : patternTokens) {
patternToken.setInsideMarker(true);
}
}
patternTokens.clear();
if (inRule) {
ruleAntiPatterns.add(rule);
}
 else {
rulegroupAntiPatterns.add(rule);
}
tokenCounter=0;
inAntiPattern=false;
break;
case EXAMPLE:
if (inCorrectExample) {
correctExamples.add(new CorrectExample(correctExample.toString()));
}
 else if (inIncorrectExample) {
IncorrectExample example;
List<String> corrections=new ArrayList<>();
corrections.addAll(Arrays.asList(exampleCorrection.toString().split("\\|")));
if (corrections.size() > 0) {
if (exampleCorrection.toString().endsWith("|")) {
corrections.add("");
}
example=new IncorrectExample(incorrectExample.toString(),corrections);
}
 else {
example=new IncorrectExample(incorrectExample.toString());
}
incorrectExamples.add(example);
}
 else if (inErrorTriggerExample) {
errorTriggeringExamples.add(new ErrorTriggeringExample(errorTriggerExample.toString()));
}
inCorrectExample=false;
inIncorrectExample=false;
inErrorTriggerExample=false;
correctExample=new StringBuilder();
incorrectExample=new StringBuilder();
errorTriggerExample=new StringBuilder();
exampleCorrection=new StringBuilder();
break;
case MESSAGE:
suggestionMatches=addLegacyMatches(suggestionMatches,message.toString(),true);
inMessage=false;
break;
case SUGGESTION:
if (inMessage) {
message.append("</suggestion>");
}
 else {
suggestionsOutMsg.append("</suggestion>");
}
inSuggestion=false;
break;
case "short":
inShortMessage=false;
inShortMessageForRuleGroup=false;
break;
case "url":
inUrl=false;
inUrlForRuleGroup=false;
break;
case MATCH:
if (inMessage) {
suggestionMatches.get(suggestionMatches.size() - 1).setLemmaString(match.toString());
}
 else if (inSuggestion) {
suggestionMatchesOutMsg.get(suggestionMatchesOutMsg.size() - 1).setLemmaString(match.toString());
}
 else if (inToken) {
tokenReference.setLemmaString(match.toString());
}
inMatch=false;
break;
case RULEGROUP:
urlForRuleGroup=new StringBuilder();
shortMessageForRuleGroup=new StringBuilder();
inRuleGroup=false;
ruleGroupIssueType=null;
rulegroupAntiPatterns.clear();
antiPatternCounter=0;
ruleGroupDefaultOff=false;
defaultOff=false;
break;
case MARKER:
if (inCorrectExample) {
correctExample.append("</marker>");
}
 else if (inIncorrectExample) {
incorrectExample.append("</marker>");
}
 else if (inErrorTriggerExample) {
errorTriggerExample.append("</marker>");
}
 else if (inPattern || inAntiPattern) {
endPos=tokenCountForMarker;
inMarker=false;
}
break;
case "phrase":
if (inPhrases) {
finalizePhrase();
}
break;
case "includephrases":
patternTokens.clear();
break;
case PHRASES:
if (inPhrases) {
inPhrases=false;
}
break;
case UNIFICATION:
inUnificationDef=false;
break;
case FEATURE:
equivalenceFeatures.put(uFeature,uTypeList);
uTypeList=new ArrayList<>();
break;
case UNIFY:
inUnification=false;
equivalenceFeatures=new HashMap<>();
int lastElement=patternTokens.size() - 1;
patternTokens.get(lastElement).setLastInUnification();
if (uniNegation) {
patternTokens.get(lastElement).setUniNegation();
}
break;
case UNIFY_IGNORE:
inUnificationNeutral=false;
break;
}
}
