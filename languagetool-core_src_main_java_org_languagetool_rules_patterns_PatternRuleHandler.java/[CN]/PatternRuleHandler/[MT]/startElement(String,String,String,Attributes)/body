{
switch (qName) {
case "category":
    final String catName=attrs.getValue(NAME);
  final String priorityStr=attrs.getValue("priority");
if (priorityStr == null) {
  category=new Category(catName);
}
 else {
  category=new Category(catName,Integer.parseInt(priorityStr));
}
if ("off".equals(attrs.getValue(DEFAULT))) {
category.setDefaultOff();
}
if (attrs.getValue(TYPE) != null) {
categoryIssueType=attrs.getValue(TYPE);
}
break;
case "rules":
final String languageStr=attrs.getValue("lang");
language=Language.getLanguageForShortName(languageStr);
break;
case RULE:
inRule=true;
shortMessage=new StringBuilder();
message=new StringBuilder();
suggestionsOutMsg=new StringBuilder();
url=new StringBuilder();
id=attrs.getValue(ID);
name=attrs.getValue(NAME);
if (inRuleGroup) {
subId++;
if (id == null) {
id=ruleGroupId;
}
if (name == null) {
name=ruleGroupDescription;
}
}
if (!(inRuleGroup && defaultOff)) {
defaultOff="off".equals(attrs.getValue(DEFAULT));
}
if (!(inRuleGroup && defaultOn)) {
defaultOn="on".equals(attrs.getValue(DEFAULT));
}
correctExamples=new ArrayList<>();
incorrectExamples=new ArrayList<>();
if (suggestionMatches != null) {
suggestionMatches.clear();
}
if (suggestionMatchesOutMsg != null) {
suggestionMatchesOutMsg.clear();
}
if (attrs.getValue(TYPE) != null) {
ruleIssueType=attrs.getValue(TYPE);
}
break;
case PATTERN:
startPattern(attrs);
tokenCountForMarker=0;
break;
case ANTIPATTERN:
inAntiPattern=true;
antiPatternCounter++;
caseSensitive=YES.equals(attrs.getValue(CASE_SENSITIVE));
tokenCounter=0;
tokenCountForMarker=0;
break;
case AND:
inAndGroup=true;
tokenCountForMarker++;
break;
case OR:
inOrGroup=true;
tokenCountForMarker++;
break;
case UNIFY:
inUnification=true;
uniNegation=YES.equals(attrs.getValue(NEGATE));
break;
case UNIFY_IGNORE:
inUnificationNeutral=true;
break;
case FEATURE:
uFeature=attrs.getValue(ID);
break;
case TYPE:
uType=attrs.getValue(ID);
uTypeList.add(uType);
break;
case TOKEN:
setToken(attrs);
if (!inAndGroup && !inOrGroup) {
tokenCountForMarker++;
}
break;
case EXCEPTION:
setExceptions(attrs);
break;
case EXAMPLE:
if (attrs.getValue(TYPE).equals("correct")) {
inCorrectExample=true;
correctExample=new StringBuilder();
}
 else if (attrs.getValue(TYPE).equals("incorrect")) {
inIncorrectExample=true;
incorrectExample=new StringBuilder();
exampleCorrection=new StringBuilder();
if (attrs.getValue("correction") != null) {
exampleCorrection.append(attrs.getValue("correction"));
}
}
break;
case "filter":
filterClassName=attrs.getValue("class");
filterArgs=attrs.getValue("args");
break;
case MESSAGE:
inMessage=true;
inSuggestion=false;
message=new StringBuilder();
break;
case SUGGESTION:
if (YES.equals(attrs.getValue("suppress_misspelled"))) {
message.append(PLEASE_SPELL_ME);
}
if (inMessage) {
message.append("<suggestion>");
}
 else {
suggestionsOutMsg.append("<suggestion>");
}
inSuggestion=true;
break;
case "short":
if (inRule) {
inShortMessage=true;
shortMessage=new StringBuilder();
}
 else {
inShortMessageForRuleGroup=true;
shortMessageForRuleGroup=new StringBuilder();
}
break;
case "url":
if (inRule) {
inUrl=true;
url=new StringBuilder();
}
 else {
inUrlForRuleGroup=true;
urlForRuleGroup=new StringBuilder();
}
break;
case RULEGROUP:
ruleGroupId=attrs.getValue(ID);
ruleGroupDescription=attrs.getValue(NAME);
defaultOff="off".equals(attrs.getValue(DEFAULT));
defaultOn="on".equals(attrs.getValue(DEFAULT));
urlForRuleGroup=new StringBuilder();
shortMessageForRuleGroup=new StringBuilder();
inRuleGroup=true;
subId=0;
if (attrs.getValue(TYPE) != null) {
ruleGroupIssueType=attrs.getValue(TYPE);
}
break;
case MATCH:
setMatchElement(attrs);
break;
case MARKER:
if (inIncorrectExample) {
incorrectExample.append(MARKER_TAG);
}
 else if (inCorrectExample) {
correctExample.append(MARKER_TAG);
}
 else if (inPattern || inAntiPattern) {
startPos=tokenCounter;
inMarker=true;
}
break;
case UNIFICATION:
uFeature=attrs.getValue("feature");
inUnificationDef=true;
break;
case "equivalence":
uType=attrs.getValue(TYPE);
break;
case PHRASES:
inPhrases=true;
break;
case "includephrases":
phraseElementInit();
break;
case "phrase":
if (inPhrases) {
phraseId=attrs.getValue(ID);
}
break;
case "phraseref":
if (attrs.getValue("idref") != null) {
preparePhrase(attrs);
tokenCountForMarker++;
}
break;
}
}
