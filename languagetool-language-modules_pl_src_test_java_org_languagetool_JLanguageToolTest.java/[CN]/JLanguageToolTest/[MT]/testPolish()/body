{
  final Polish polish=new Polish();
  JLanguageTool tool=new JLanguageTool(polish);
  assertEquals("[PL]",Arrays.toString(polish.getCountryVariants()));
  List<RuleMatch> matches=tool.check("To jest ca??kowicie prawid??owe zdanie.");
  assertEquals(0,matches.size());
  matches=tool.check("To jest jest problem.");
  assertEquals(1,matches.size());
  matches=tool.check("By?? on bowiem pi??knym strzelcem bowiem.");
  assertEquals(0,matches.size());
  tool.enableDefaultOffRule("PL_WORD_REPEAT");
  matches=tool.check("By?? on bowiem pi??knym strzelcem bowiem.");
  assertEquals(1,matches.size());
  tool.activateDefaultPatternRules();
  matches=tool.check("Premier drapie si?? w ucho co i rusz.");
  assertEquals(1,matches.size());
  matches=tool.check("I can give you more a detailed description");
  assertEquals(6,matches.size());
  tool.setListUnknownWords(true);
  matches=tool.check("This is not a Polish text.");
  assertEquals(3,matches.size());
  assertEquals("[Polish, This, is, text]",tool.getUnknownWords().toString());
  matches=tool.check("To jest tekst.\nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(17,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. \nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(16,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. Test 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(32,matches.get(0).getColumn());
  polish.getSentenceTokenizer().setSingleLineBreaksMarksParagraph(true);
  tool=new JLanguageTool(polish);
  tool.activateDefaultPatternRules();
  matches=tool.check("To jest tekst.\nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(17,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. \nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(17,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(24,matches.get(0).getColumn());
  AnalyzedSentence sent=tool.getAnalyzedSentence("Z powodu pogody dobre buty s?? wskazane.");
  assertEquals("Disambiguator log: \n" + "\n" + "MULTIWORD_CHUNKER: Z[z/depr:pl:nom:m2*,z/depr:pl:voc:m2*,z/prep:acc:nwok*,z/prep:gen:nwok*,z/prep:inst:nwok*,z/subst:pl:acc:f*,z/subst:pl:acc:m1*,z/subst:pl:acc:m2*,z/subst:pl:acc:n2*,z/subst:pl:dat:f*,z/subst:pl:dat:m1*,z/subst:pl:dat:m2*,z/subst:pl:dat:n2*,z/subst:pl:gen:f*,z/subst:pl:gen:m1*,z/subst:pl:gen:m2*,z/subst:pl:gen:n2*,z/subst:pl:inst:f*,z/subst:pl:inst:m1*,z/subst:pl:inst:m2*,z/subst:pl:inst:n2*,z/subst:pl:loc:f*,z/subst:pl:loc:m1*,z/subst:pl:loc:m2*,z/subst:pl:loc:n2*,z/subst:pl:nom:f*,z/subst:pl:nom:m1*,z/subst:pl:nom:m2*,z/subst:pl:nom:n2*,z/subst:pl:voc:f*,z/subst:pl:voc:m1*,z/subst:pl:voc:m2*,z/subst:pl:voc:n2*,z/subst:sg:acc:f*,z/subst:sg:acc:m1*,z/subst:sg:acc:m2*,z/subst:sg:acc:m3*,z/subst:sg:acc:n2*,z/subst:sg:dat:f*,z/subst:sg:dat:m1*,z/subst:sg:dat:m2*,z/subst:sg:dat:n2*,z/subst:sg:gen:f*,z/subst:sg:gen:m1*,z/subst:sg:gen:m2*,z/subst:sg:gen:n2*,z/subst:sg:inst:f*,z/subst:sg:inst:m1*,z/subst:sg:inst:m2*,z/subst:sg:inst:n2*,z/subst:sg:loc:f*,z/subst:sg:loc:m1*,z/subst:sg:loc:m2*,z/subst:sg:loc:n2*,z/subst:sg:nom:f*,z/subst:sg:nom:m1*,z/subst:sg:nom:m2*,z/subst:sg:nom:m3*,z/subst:sg:nom:n2*,z/subst:sg:voc:f*,z/subst:sg:voc:m1*,z/subst:sg:voc:m2*,z/subst:sg:voc:n2*] -> Z[z/depr:pl:nom:m2*,z/depr:pl:voc:m2*,z/prep:acc:nwok*,z/prep:gen:nwok*,z/prep:inst:nwok*,z/subst:pl:acc:f*,z/subst:pl:acc:m1*,z/subst:pl:acc:m2*,z/subst:pl:acc:n2*,z/subst:pl:dat:f*,z/subst:pl:dat:m1*,z/subst:pl:dat:m2*,z/subst:pl:dat:n2*,z/subst:pl:gen:f*,z/subst:pl:gen:m1*,z/subst:pl:gen:m2*,z/subst:pl:gen:n2*,z/subst:pl:inst:f*,z/subst:pl:inst:m1*,z/subst:pl:inst:m2*,z/subst:pl:inst:n2*,z/subst:pl:loc:f*,z/subst:pl:loc:m1*,z/subst:pl:loc:m2*,z/subst:pl:loc:n2*,z/subst:pl:nom:f*,z/subst:pl:nom:m1*,z/subst:pl:nom:m2*,z/subst:pl:nom:n2*,z/subst:pl:voc:f*,z/subst:pl:voc:m1*,z/subst:pl:voc:m2*,z/subst:pl:voc:n2*,z/subst:sg:acc:f*,z/subst:sg:acc:m1*,z/subst:sg:acc:m2*,z/subst:sg:acc:m3*,z/subst:sg:acc:n2*,z/subst:sg:dat:f*,z/subst:sg:dat:m1*,z/subst:sg:dat:m2*,z/subst:sg:dat:n2*,z/subst:sg:gen:f*,z/subst:sg:gen:m1*,z/subst:sg:gen:m2*,z/subst:sg:gen:n2*,z/subst:sg:inst:f*,z/subst:sg:inst:m1*,z/subst:sg:inst:m2*,z/subst:sg:inst:n2*,z/subst:sg:loc:f*,z/subst:sg:loc:m1*,z/subst:sg:loc:m2*,z/subst:sg:loc:n2*,z/subst:sg:nom:f*,z/subst:sg:nom:m1*,z/subst:sg:nom:m2*,z/subst:sg:nom:m3*,z/subst:sg:nom:n2*,z/subst:sg:voc:f*,z/subst:sg:voc:m1*,z/subst:sg:voc:m2*,z/subst:sg:voc:n2*,Z powodu/<PREP:GEN>*]\n"+ "AZ:1 Z[z/depr:pl:nom:m2*,z/depr:pl:voc:m2*,z/prep:acc:nwok*,z/prep:gen:nwok*,z/prep:inst:nwok*,z/subst:pl:acc:f*,z/subst:pl:acc:m1*,z/subst:pl:acc:m2*,z/subst:pl:acc:n2*,z/subst:pl:dat:f*,z/subst:pl:dat:m1*,z/subst:pl:dat:m2*,z/subst:pl:dat:n2*,z/subst:pl:gen:f*,z/subst:pl:gen:m1*,z/subst:pl:gen:m2*,z/subst:pl:gen:n2*,z/subst:pl:inst:f*,z/subst:pl:inst:m1*,z/subst:pl:inst:m2*,z/subst:pl:inst:n2*,z/subst:pl:loc:f*,z/subst:pl:loc:m1*,z/subst:pl:loc:m2*,z/subst:pl:loc:n2*,z/subst:pl:nom:f*,z/subst:pl:nom:m1*,z/subst:pl:nom:m2*,z/subst:pl:nom:n2*,z/subst:pl:voc:f*,z/subst:pl:voc:m1*,z/subst:pl:voc:m2*,z/subst:pl:voc:n2*,z/subst:sg:acc:f*,z/subst:sg:acc:m1*,z/subst:sg:acc:m2*,z/subst:sg:acc:m3*,z/subst:sg:acc:n2*,z/subst:sg:dat:f*,z/subst:sg:dat:m1*,z/subst:sg:dat:m2*,z/subst:sg:dat:n2*,z/subst:sg:gen:f*,z/subst:sg:gen:m1*,z/subst:sg:gen:m2*,z/subst:sg:gen:n2*,z/subst:sg:inst:f*,z/subst:sg:inst:m1*,z/subst:sg:inst:m2*,z/subst:sg:inst:n2*,z/subst:sg:loc:f*,z/subst:sg:loc:m1*,z/subst:sg:loc:m2*,z/subst:sg:loc:n2*,z/subst:sg:nom:f*,z/subst:sg:nom:m1*,z/subst:sg:nom:m2*,z/subst:sg:nom:m3*,z/subst:sg:nom:n2*,z/subst:sg:voc:f*,z/subst:sg:voc:m1*,z/subst:sg:voc:m2*,z/subst:sg:voc:n2*,Z powodu/<PREP:GEN>*] -> Z[z/depr:pl:nom:m2*,z/depr:pl:voc:m2*,z/prep:acc:nwok*,z/prep:gen:nwok*,z/prep:inst:nwok*,Z powodu/<PREP:GEN>*]\n"+ "\n"+ "MULTIWORD_CHUNKER: powodu[pow??d/subst:sg:gen:m3] -> powodu[pow??d/subst:sg:gen:m3,Z powodu/</PREP:GEN>]\n",sent.getAnnotations());
}
