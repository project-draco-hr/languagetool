{
  final Polish polish=new Polish();
  JLanguageTool tool=new JLanguageTool(polish);
  assertEquals("[PL]",Arrays.toString(polish.getCountryVariants()));
  List<RuleMatch> matches=tool.check("To jest ca??kowicie prawid??owe zdanie.");
  assertEquals(0,matches.size());
  matches=tool.check("To jest jest problem.");
  assertEquals(1,matches.size());
  matches=tool.check("By?? on bowiem pi??knym strzelcem bowiem.");
  assertEquals(0,matches.size());
  tool.enableDefaultOffRule("PL_WORD_REPEAT");
  matches=tool.check("By?? on bowiem pi??knym strzelcem bowiem.");
  assertEquals(1,matches.size());
  tool.activateDefaultPatternRules();
  matches=tool.check("Premier drapie si?? w ucho co i rusz.");
  assertEquals(1,matches.size());
  matches=tool.check("I can give you more a detailed description");
  assertEquals(6,matches.size());
  tool.setListUnknownWords(true);
  matches=tool.check("This is not a Polish text.");
  assertEquals(3,matches.size());
  assertEquals("[Polish, This, is, text]",tool.getUnknownWords().toString());
  matches=tool.check("To jest tekst.\nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(17,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. \nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(16,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. Test 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(32,matches.get(0).getColumn());
  polish.getSentenceTokenizer().setSingleLineBreaksMarksParagraph(true);
  tool=new JLanguageTool(polish);
  tool.activateDefaultPatternRules();
  matches=tool.check("To jest tekst.\nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(17,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. \nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(17,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(24,matches.get(0).getColumn());
  AnalyzedSentence sent=tool.getAnalyzedSentence("Z powodu pogody dobre buty s?? wskazane.");
  assertEquals("Disambiguator log: " + "\n\nMULTIWORD_CHUNKER: Z[z/prep:gen.inst*] -> Z[z/prep:gen.inst*,Z powodu/<PREP:GEN>*]" + "\n\nMULTIWORD_CHUNKER: powodu[pow??d/subst:sg:gen:m3] -> powodu[pow??d/subst:sg:gen:m3,Z powodu/</PREP:GEN>]\n",sent.getAnnotations());
  sent=tool.getAnalyzedSentence("Nie mamy ??adnej ryby.");
  assertEquals("Disambiguator log: " + "\n\nNIE_ADAMP: Nie[nie/qub*,on/ppron3:pl:acc:f.m2.m3.n.p2.p3:ter:praep*,on/ppron3:sg:acc:n:ter:praep*] -> Nie[nie/qub*]" + "\n\nunify_adj_subst: ??adnej[??aden/adj:sg:dat:f:pos,??aden/adj:sg:gen:f:pos,??aden/adj:sg:loc:f:pos] -> ??adnej[??aden/adj:sg:gen:f:pos]"+ "\n\nunify_adj_subst: ryby[ryba/subst:pl:acc:f,ryba/subst:pl:nom:f,ryba/subst:pl:voc:f,ryba/subst:sg:gen:f] -> ryby[ryba/subst:sg:gen:f]\n",sent.getAnnotations());
}
