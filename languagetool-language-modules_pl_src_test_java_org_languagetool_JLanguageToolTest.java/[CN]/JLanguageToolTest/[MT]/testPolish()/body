{
  final Polish polish=new Polish();
  JLanguageTool tool=new JLanguageTool(polish);
  assertEquals("[PL]",Arrays.toString(polish.getCountries()));
  List<RuleMatch> matches=tool.check("To jest ca??kowicie prawid??owe zdanie.");
  assertEquals(0,matches.size());
  matches=tool.check("To jest jest problem.");
  assertEquals(0,tool.check("A teraz ka??cie mi da?? jaki b??d?? posi??ek.").size());
  assertEquals(1,matches.size());
  matches=tool.check("By?? on bowiem pi??knym strzelcem bowiem.");
  assertEquals(0,matches.size());
  tool.enableDefaultOffRule("PL_WORD_REPEAT");
  matches=tool.check("By?? on bowiem pi??knym strzelcem bowiem.");
  assertEquals(1,matches.size());
  tool.activateDefaultPatternRules();
  matches=tool.check("Premier drapie si?? w ucho co i rusz.");
  assertEquals(1,matches.size());
  matches=tool.check("I can give you more a detailed description");
  assertEquals(6,matches.size());
  tool.setListUnknownWords(true);
  matches=tool.check("This is not a Polish text.");
  assertEquals(3,matches.size());
  assertEquals("[Polish, This, is, text]",tool.getUnknownWords().toString());
  matches=tool.check("To jest tekst.\nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(17,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. \nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(16,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. Test 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(32,matches.get(0).getColumn());
  polish.getSentenceTokenizer().setSingleLineBreaksMarksParagraph(true);
  tool=new JLanguageTool(polish);
  tool.activateDefaultPatternRules();
  matches=tool.check("To jest tekst.\nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(17,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. \nTest 1. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(17,matches.get(0).getColumn());
  matches=tool.check("To jest tekst. To jest linia w kt??rej nie ma przecinka.");
  assertEquals(24,matches.get(0).getColumn());
  AnalyzedSentence sent=tool.getAnalyzedSentence("Z powodu pogody dobre buty s?? wskazane.");
  assertEquals("Disambiguator log: \n\n" + "prep_verb:2 Z[z/prep:acc:nwok*,z/prep:gen:nwok*,z/prep:inst:nwok*] -> Z[z/prep:gen:nwok*]\n" + "PREP_SUBST:1 Z[z/prep:gen:nwok*] -> Z[z/prep:gen:nwok*]\n"+ "PREP_SUBST_2:1 Z[z/prep:gen:nwok*] -> Z[z/prep:gen:nwok*]\n"+ "MULTIWORD_CHUNKER: Z[z/prep:gen:nwok*] -> Z[z/prep:gen:nwok*,Z powodu/<PREP:GEN>*]\n\n"+ "prep_verb:2 powodu[pow??d/subst:sg:gen:m3] -> powodu[pow??d/subst:sg:gen:m3]\n"+ "PREP_SUBST:1 powodu[pow??d/subst:sg:gen:m3] -> powodu[pow??d/subst:sg:gen:m3]\n"+ "PREP_SUBST_2:1 powodu[pow??d/subst:sg:gen:m3] -> powodu[pow??d/subst:sg:gen:m3]\n"+ "MULTIWORD_CHUNKER: powodu[pow??d/subst:sg:gen:m3] -> powodu[pow??d/subst:sg:gen:m3,Z powodu/</PREP:GEN>]\n",sent.getAnnotations());
}
