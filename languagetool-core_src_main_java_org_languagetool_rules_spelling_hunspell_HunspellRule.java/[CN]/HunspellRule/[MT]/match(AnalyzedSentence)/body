{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  if (needsInit) {
    init();
  }
  if (hunspellDict == null) {
    return toRuleMatchArray(ruleMatches);
  }
  String[] tokens=tokenizeText(getSentenceTextWithoutUrlsAndImmunizedTokens(sentence));
  int len=sentence.getTokens()[1].getStartPos();
  for (int i=0; i < tokens.length; i++) {
    String word=tokens[i];
    if (ignoreWord(Arrays.asList(tokens),i) || ignoreWord(word)) {
      len+=word.length() + 1;
      continue;
    }
    if (isMisspelled(word)) {
      RuleMatch ruleMatch=new RuleMatch(this,len,len + word.length(),messages.getString("spelling"),messages.getString("desc_spelling_short"));
      List<String> suggestions=getSuggestions(word);
      suggestions.addAll(0,getAdditionalTopSuggestions(suggestions,word));
      suggestions.addAll(getAdditionalSuggestions(suggestions,word));
      if (!suggestions.isEmpty()) {
        filterSuggestions(suggestions);
        ruleMatch.setSuggestedReplacements(suggestions);
      }
      ruleMatches.add(ruleMatch);
    }
    len+=word.length() + 1;
  }
  return toRuleMatchArray(ruleMatches);
}
