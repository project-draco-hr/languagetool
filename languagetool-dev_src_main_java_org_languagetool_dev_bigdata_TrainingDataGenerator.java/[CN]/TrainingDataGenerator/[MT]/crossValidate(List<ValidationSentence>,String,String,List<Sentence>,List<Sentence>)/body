{
  System.out.println("Starting cross validation on " + sentences.size() + " sentences");
  int truePositives=0;
  int falsePositives=0;
  int falseNegatives=0;
  try (MachineLearning machineLearning=new MachineLearning(FEATURES)){
    BasicNetwork loadedNet=(BasicNetwork)machineLearning.load(new File(NEURAL_NETWORK_OUTPUT));
    for (    ValidationSentence sentence : sentences) {
      boolean expectCorrect=sentence.isCorrect;
      String textToken=expectCorrect ? token : homophoneToken;
      double[] features;
      try {
        features=getFeatures(sentence.sentence,textToken,token);
      }
 catch (      Exception e) {
        e.printStackTrace();
        continue;
      }
      BasicMLData data=new BasicMLData(features);
      double result=loadedNet.compute(data).getData(0);
      boolean consideredCorrect=result > THRESHOLD;
      String sentenceStr=sentence.sentence.toString().replaceFirst(textToken,"**" + token + "**");
      String marker=consideredCorrect == expectCorrect ? " " : "#";
      System.out.println("[" + featuresToString(features) + "] "+ String.format(ENGLISH,"%.2f",result)+ " "+ asString(consideredCorrect)+ marker+ " "+ sentenceStr);
      if (consideredCorrect && expectCorrect) {
        truePositives++;
      }
 else       if (!consideredCorrect && expectCorrect) {
        falseNegatives++;
      }
 else       if (consideredCorrect && !expectCorrect) {
        falsePositives++;
      }
    }
  }
   float precision=(float)truePositives / (truePositives + falsePositives);
  System.out.println("Cross validation results for " + TOKEN + "/"+ TOKEN_HOMOPHONE+ ":");
  float recall=(float)truePositives / (truePositives + falseNegatives);
  double fMeasure=FMeasure.getWeightedFMeasure(precision,recall);
  System.out.printf(ENGLISH,"CSV;%d;%d;%.3f;%.3f;%.3f;\n",trainingSentences.size(),trainingSentences.size(),precision,recall,fMeasure);
  System.out.printf(ENGLISH,"  Training sentences 1: %d\n",trainingSentences.size());
  System.out.printf(ENGLISH,"  Training sentences 2: %d\n",homophoneTrainingSentences.size());
  System.out.printf(ENGLISH,"  Precision: %.3f\n",precision);
  System.out.printf(ENGLISH,"  Recall:    %.3f\n",recall);
  System.out.printf(ENGLISH,"  F-measure: %.3f (beta=0.5)\n",fMeasure);
}
