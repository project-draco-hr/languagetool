{
  final List<RuleMatch> ruleMatches=new ArrayList<>();
  final AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  AnalyzedTokenReadings prevToken=null;
  for (int i=1; i < tokens.length; i++) {
    AnalyzedTokenReadings token=tokens[i];
    String prevTokenStr=prevToken != null ? prevToken.getToken() : null;
    if ("a".equalsIgnoreCase(prevTokenStr) || "an".equalsIgnoreCase(prevTokenStr)) {
      Determiner determiner=getCorrectDeterminerFor(token);
      if (prevTokenStr != null) {
        String msg=null;
        if ("a".equalsIgnoreCase(prevTokenStr) && determiner == Determiner.AN) {
          String replacement=StringTools.startsWithUppercase(prevTokenStr) ? "An" : "an";
          msg="Use <suggestion>" + replacement + "</suggestion> instead of '"+ prevTokenStr+ "' if the following "+ "word starts with a vowel sound, e.g. 'an article', 'an hour'";
        }
 else         if ("an".equalsIgnoreCase(prevTokenStr) && determiner == Determiner.A) {
          String replacement=StringTools.startsWithUppercase(prevTokenStr) ? "A" : "a";
          msg="Use <suggestion>" + replacement + "</suggestion> instead of '"+ prevTokenStr+ "' if the following "+ "word doesn't start with a vowel sound, e.g. 'a sentence', 'a university'";
        }
        if (msg != null) {
          RuleMatch match=new RuleMatch(this,prevToken.getStartPos(),prevToken.getEndPos(),msg,"Wrong article");
          ruleMatches.add(match);
        }
      }
    }
    if (token.hasPosTag("DT")) {
      prevToken=token;
    }
 else     if (token.getToken().matches("[-\"()\\[\\]]+")) {
    }
 else {
      prevToken=null;
    }
  }
  return toRuleMatchArray(ruleMatches);
}
