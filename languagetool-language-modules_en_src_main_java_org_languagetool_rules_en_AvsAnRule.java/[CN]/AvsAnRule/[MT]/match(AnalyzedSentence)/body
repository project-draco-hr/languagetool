{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  int prevTokenIndex=0;
  for (int i=1; i < tokens.length; i++) {
    AnalyzedTokenReadings token=tokens[i];
    String prevTokenStr=prevTokenIndex > 0 ? tokens[prevTokenIndex].getToken() : null;
    boolean isSentenceStart=prevTokenIndex == 1;
    boolean equalsA="a".equalsIgnoreCase(prevTokenStr);
    boolean equalsAn="an".equalsIgnoreCase(prevTokenStr);
    if (!isSentenceStart) {
      equalsA="a".equals(prevTokenStr);
      equalsAn="an".equals(prevTokenStr);
    }
    if (equalsA || equalsAn) {
      Determiner determiner=getCorrectDeterminerFor(token);
      String msg=null;
      if (equalsA && determiner == Determiner.AN) {
        String replacement=StringTools.startsWithUppercase(prevTokenStr) ? "An" : "an";
        msg="Use <suggestion>" + replacement + "</suggestion> instead of '"+ prevTokenStr+ "' if the following "+ "word starts with a vowel sound, e.g. 'an article', 'an hour'";
      }
 else       if (equalsAn && determiner == Determiner.A) {
        String replacement=StringTools.startsWithUppercase(prevTokenStr) ? "A" : "a";
        msg="Use <suggestion>" + replacement + "</suggestion> instead of '"+ prevTokenStr+ "' if the following "+ "word doesn't start with a vowel sound, e.g. 'a sentence', 'a university'";
      }
      if (msg != null) {
        RuleMatch match=new RuleMatch(this,tokens[prevTokenIndex].getStartPos(),tokens[prevTokenIndex].getEndPos(),msg,"Wrong article");
        ruleMatches.add(match);
      }
    }
    if (token.hasPosTag("DT")) {
      prevTokenIndex=i;
    }
 else     if (token.getToken().matches("[-\"()\\[\\]]+")) {
    }
 else {
      prevTokenIndex=0;
    }
  }
  return toRuleMatchArray(ruleMatches);
}
