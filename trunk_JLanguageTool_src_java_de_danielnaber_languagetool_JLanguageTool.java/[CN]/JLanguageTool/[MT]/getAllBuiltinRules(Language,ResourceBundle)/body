{
  final List<Rule> rules=new ArrayList<Rule>();
  try {
    final Class[] classes1=ReflectionUtils.findClasses(Rule.class.getClassLoader(),Rule.class.getPackage().getName(),".*Rule$",0,Rule.class,null);
    final Class[] classes2=ReflectionUtils.findClasses(Rule.class.getClassLoader(),Rule.class.getPackage().getName() + "." + language.getShortName(),".*Rule$",0,Rule.class,null);
    final List<Class> classes=new ArrayList<Class>();
    classes.addAll(Arrays.asList(classes1));
    classes.addAll(Arrays.asList(classes2));
    for (    final Class class1 : classes) {
      final Constructor[] constructors=class1.getConstructors();
      for (      final Constructor constructor : constructors) {
        final Class[] paramTypes=constructor.getParameterTypes();
        if (paramTypes.length == 1 && paramTypes[0].equals(ResourceBundle.class)) {
          rules.add((Rule)constructor.newInstance(messages));
          break;
        }
        if (paramTypes.length == 2 && paramTypes[0].equals(ResourceBundle.class) && paramTypes[1].equals(Language.class)) {
          rules.add((Rule)constructor.newInstance(messages,language));
          break;
        }
        throw new RuntimeException("Unknown constructor for rule class: " + class1.getName());
      }
    }
  }
 catch (  final Exception e) {
    throw new RuntimeException("Failed to load rules for language " + language,e);
  }
  return rules.toArray(new Rule[rules.size()]);
}
