def match(self, tagged_words, position_fix):
    'Check if there are rules that match the tagged_words. Returns a list\n\t\tof RuleMatch objects.'
    matches = []
    ct = 0
    tagged_words_copy = tagged_words
    last_match = None
    for word_tag_tuple in tagged_words_copy:
        i = ct
        p = 0
        expected_token = None
        found = None
        match = 1
        first_match = ct
        while match:
            try:
                if (not self.isRealWord(tagged_words_copy, i)):
                    i = (i + 1)
                    ct = (ct + 1)
                    continue
            except IndexError:
                break
            try:
                expected_token = self.tokens[p]
            except IndexError:
                break
            if (tagged_words_copy[i][2] == 'SENT_START'):
                found = 'SENT_START'
            elif (tagged_words_copy[i][2] == 'SENT_END'):
                found = 'SENT_END'
            elif expected_token.is_word:
                try:
                    found = tagged_words_copy[i][1]
                except:
                    break
            else:
                try:
                    found = tagged_words_copy[i][2]
                except:
                    break
            if (not found):
                break
            case_switch = re.IGNORECASE
            if self.case_sensitive:
                case_switch = 0
            match = re.compile((expected_token.token + '$'), case_switch).match(found)
            if expected_token.negation:
                if (not match):
                    match = 1
                else:
                    match = None
            i = (i + 1)
            p = (p + 1)
        if (match and (p == len(self.tokens))):
            if (tagged_words_copy[first_match][1] == None):
                first_match = (first_match + 1)
            p_tmp = 0
            i_tmp = first_match
            for tagged_word in tagged_words_copy[first_match:]:
                if (tagged_word[1] != None):
                    p_tmp = (p_tmp + 1)
                if (p_tmp >= (len(self.tokens) + self.marker_to)):
                    last_match = i_tmp
                    break
                i_tmp = (i_tmp + 1)
            if (not last_match):
                last_match = len(tagged_words_copy)
            char_count = 0
            for tagged_word in tagged_words_copy[:(first_match + self.marker_from)]:
                char_count = (char_count + len(tagged_word[0]))
            from_pos = char_count
            char_count = 0
            for tagged_word in tagged_words_copy[:(last_match + 1)]:
                char_count = (char_count + len(tagged_word[0]))
            to_pos = char_count
            match = RuleMatch(self.rule_id, (from_pos + position_fix), (to_pos + position_fix), self.message)
            matches.append(match)
        ct = (ct + 1)
    return matches
