def parse(self, dom_node):
    "Parse an XML rule node and init the object with its variables.\n\t\tReturn the rule's ID."
    rule_id = dom_node.getAttribute('id')
    pattern = dom_node.getElementsByTagName('pattern')[0].childNodes[0].data
    language = dom_node.getElementsByTagName('pattern')[0].getAttribute('lang')
    case_sensitive = 0
    if (dom_node.getElementsByTagName('pattern')[0].getAttribute('case_sensitive') == 'yes'):
        print ('*** %s' % dom_node.getElementsByTagName('pattern')[0].getAttribute('case_sensitive'))
        case_sensitive = 1
    if dom_node.getElementsByTagName('message'):
        message = Tools.Tools.getXML(dom_node.getElementsByTagName('message')[0])
    else:
        message = Tools.Tools.getXML(dom_node.parentNode.getElementsByTagName('message')[0])
    marker_position = int(dom_node.getElementsByTagName('marker')[0].childNodes[0].data)
    marker_position = int(marker_position)
    example_nodes = dom_node.getElementsByTagName('example')
    example_good = ''
    example_bad = ''
    for example_node in example_nodes:
        if (example_node.getAttribute('type') == 'correct'):
            example_good = Tools.Tools.getXML(example_node.childNodes[0])
        else:
            example_bad = Tools.Tools.getXML(example_node.childNodes[0])
    false_positives = dom_node.getElementsByTagName('error_rate')[0].childNodes[0].data
    self.__init__(rule_id, pattern, message, marker_position, example_good, example_bad, case_sensitive, false_positives, language)
    return rule_id
