def __init__(self, rule_node):
    'Parse an XML rule node and init the object with its variables.'
    if (rule_node == None):
        return
    self.rule_id = rule_node.getAttribute('id')
    self.pattern = rule_node.getElementsByTagName('pattern')[0].childNodes[0].data
    token_strings = re.split('\\s+', self.pattern)
    self.tokens = []
    for token_string in token_strings:
        token = Token(token_string)
        self.tokens.append(token)
    self.language = rule_node.getElementsByTagName('pattern')[0].getAttribute('lang')
    self.case_sensitive = 0
    if (rule_node.getElementsByTagName('pattern')[0].getAttribute('case_sensitive') == 'yes'):
        self.case_sensitive = 1
    if rule_node.getElementsByTagName('message'):
        self.message = Tools.Tools.getXML(rule_node.getElementsByTagName('message')[0])
    else:
        self.message = Tools.Tools.getXML(rule_node.parentNode.getElementsByTagName('message')[0])
    self.marker_position = int(rule_node.getElementsByTagName('marker')[0].childNodes[0].data)
    example_nodes = rule_node.getElementsByTagName('example')
    self.example_good = ''
    self.example_bad = ''
    for example_node in example_nodes:
        if (example_node.getAttribute('type') == 'correct'):
            self.example_good = Tools.Tools.getXML(example_node.childNodes[0])
        else:
            self.example_bad = Tools.Tools.getXML(example_node.childNodes[0])
    self.false_positives = rule_node.getElementsByTagName('error_rate')[0].childNodes[0].data
    return
