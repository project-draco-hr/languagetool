{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  Queue<AnalyzedTokenReadings> prevTokens=new ArrayBlockingQueue<>(wrongWords.size());
  for (int i=1; i < tokens.length; i++) {
    addToQueue(tokens[i],prevTokens);
    StringBuilder sb=new StringBuilder();
    List<String> variants=new ArrayList<>();
    List<AnalyzedTokenReadings> prevTokensList=Arrays.asList(prevTokens.toArray(new AnalyzedTokenReadings[prevTokens.size()]));
    for (int j=prevTokensList.size() - 1; j >= 0; j--) {
      if (j != prevTokensList.size() - 1 && prevTokensList.get(j + 1).isWhitespaceBefore()) {
        sb.insert(0," ");
      }
      sb.insert(0,prevTokensList.get(j).getToken());
      variants.add(0,sb.toString());
    }
    int len=variants.size();
    for (int j=0; j < len; j++) {
      String crt=variants.get(j);
      int crtWordCount=len - j;
      String crtMatch=isCaseSensitive() ? wrongWords.get(crtWordCount - 1).get(crt) : wrongWords.get(crtWordCount - 1).get(crt.toLowerCase(getLocale()));
      if (crtMatch != null) {
        List<String> replacements=Arrays.asList(crtMatch.split("\\|"));
        String msg=crt + getSuggestion();
        for (int k=0; k < replacements.size(); k++) {
          if (k > 0) {
            msg=msg + (k == replacements.size() - 1 ? getSuggestionsSeparator() : ", ");
          }
          msg+="<suggestion>" + replacements.get(k) + "</suggestion>";
        }
        int startPos=prevTokensList.get(len - crtWordCount).getStartPos();
        int endPos=prevTokensList.get(len - 1).getEndPos();
        RuleMatch potentialRuleMatch=new RuleMatch(this,startPos,endPos,msg,getShort());
        if (!isCaseSensitive() && StringTools.startsWithUppercase(crt)) {
          for (int k=0; k < replacements.size(); k++) {
            replacements.set(k,StringTools.uppercaseFirstChar(replacements.get(k)));
          }
        }
        potentialRuleMatch.setSuggestedReplacements(replacements);
        ruleMatches.add(potentialRuleMatch);
        break;
      }
    }
  }
  return toRuleMatchArray(ruleMatches);
}
