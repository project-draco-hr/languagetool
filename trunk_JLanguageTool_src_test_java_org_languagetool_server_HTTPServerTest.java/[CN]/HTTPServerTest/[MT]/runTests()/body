{
  final String matchAttr="software=\"LanguageTool\" version=\"" + JLanguageTool.VERSION + "\" buildDate=\".*?\"";
  final String emptyResultPattern="<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<matches " + matchAttr + ">\n</matches>\n";
  final String result1=check(Language.GERMAN,"");
  assertTrue("Got " + result1 + ", expected "+ emptyResultPattern,result1.matches(emptyResultPattern));
  final String result2=check(Language.GERMAN,"Ein kleiner test");
  assertTrue("Got " + result2 + ", expected "+ emptyResultPattern,result2.matches(emptyResultPattern));
  assertTrue(check(Language.GERMAN,"ein kleiner test").contains("UPPERCASE_SENTENCE_START"));
  final String result=check(Language.GERMAN,"ein kleiner test. Und wieder Erwarten noch was: \u00f6\u00e4\u00fc\u00df.");
  assertTrue(result.contains("UPPERCASE_SENTENCE_START"));
  assertTrue(result.contains("WIEDER_WILLEN"));
  assertTrue("Expected special chars, got: '" + result + "'",result.contains("\u00f6\u00e4\u00fc\u00df"));
  final XMLValidator validator=new XMLValidator();
  validator.validateXMLString(result,JLanguageTool.getDataBroker().getResourceDir() + "/api-output.dtd","matches");
  validator.checkSimpleXMLString(result);
  assertTrue(!check(Language.GERMAN,"bla <script>").contains("<script>"));
  final String germanSpecialChars=check(Language.GERMAN,"ein kleiner test. Und wieder Erwarten noch was: ????????+ ????????.");
  assertTrue("Expected special chars, got: '" + germanSpecialChars + "'",germanSpecialChars.contains("????????+"));
  final String romanianSpecialChars=check(Language.ROMANIAN,"bla bla ?????????? ?????????? ??i c??teva caractere speciale");
  assertTrue("Expected special chars, got: '" + romanianSpecialChars + "'",romanianSpecialChars.contains("??????????"));
  final String polishSpecialChars=check(Language.POLISH,"M??wi??a d??ugo, ??eby tylko m??wi?? m??wi?? d??ugo.");
  assertTrue("Expected special chars, got: '" + polishSpecialChars + "'",polishSpecialChars.contains("m??wi??"));
  assertTrue(checkByPOST(Language.ROMANIAN,"gre??it gre??it").contains("gre??it"));
  final URL url=new URL("http://localhost:" + HTTPServer.DEFAULT_PORT + "/Languages");
  final String languagesXML=StringTools.streamToString((InputStream)url.getContent(),"UTF-8");
  if (!languagesXML.contains("Romanian") || !languagesXML.contains("English")) {
    fail("Error getting supported languages: " + languagesXML);
  }
  assertTrue(check(Language.ENGLISH,"Me & you you").contains("&"));
  assertTrue(check(Language.ENGLISH,Language.GERMAN,"We will berate you").contains("BERATE"));
  assertTrue(check(Language.GERMAN,Language.ENGLISH,"Man sollte ihn nicht so beraten.").contains("BERATE"));
  assertTrue(check(Language.POLISH,Language.ENGLISH,"To jest frywolne.").contains("FRIVOLOUS"));
  assertTrue(bitextCheck(Language.POLISH,Language.ENGLISH,"This is frivolous.","To jest frywolne.").contains("FRIVOLOUS"));
  assertTrue(!bitextCheck(Language.POLISH,Language.ENGLISH,"This is something else.","To jest frywolne.").contains("FRIVOLOUS"));
  String[] nothing=new String[0];
  assertEquals(check(Language.ENGLISH,Language.GERMAN,"We will berate you"),checkWithOptions(Language.ENGLISH,Language.GERMAN,"We will berate you",nothing,nothing));
  String[] disableAvsAn=new String[1];
  disableAvsAn[0]="EN_A_VS_AN";
  assertTrue(!checkWithOptions(Language.ENGLISH,Language.GERMAN,"This is an test",nothing,disableAvsAn).contains("an test"));
  assertTrue(checkWithOptions(Language.ENGLISH,Language.GERMAN,"This is an test",disableAvsAn,nothing).contains("an test"));
  assertTrue(!checkWithOptions(Language.ENGLISH,Language.GERMAN,"We will berate you",disableAvsAn,nothing).contains("BERATE"));
  String[] twoRules=new String[2];
  twoRules[0]="EN_A_VS_AN";
  twoRules[1]="BERATE";
  String resultEn=checkWithOptions(Language.ENGLISH,Language.GERMAN,"This is an test. We will berate you.",twoRules,nothing);
  assertTrue(resultEn.contains("EN_A_VS_AN"));
  assertTrue(resultEn.contains("BERATE"));
  resultEn=checkWithOptions(Language.ENGLISH,Language.GERMAN,"This is an test. We will berate you.",nothing,twoRules);
  assertTrue(!resultEn.contains("EN_A_VS_AN"));
  assertTrue(!resultEn.contains("BERATE"));
  resultEn=checkWithOptions(Language.ENGLISH,Language.GERMAN,"This is an test. We will berate you.",disableAvsAn,twoRules);
  assertTrue(resultEn.contains("EN_A_VS_AN"));
  assertTrue(!resultEn.contains("BERATE"));
}
