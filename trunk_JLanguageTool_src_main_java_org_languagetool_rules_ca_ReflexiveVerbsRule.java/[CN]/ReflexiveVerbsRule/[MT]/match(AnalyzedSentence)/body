{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  loop:   for (int i=1; i < tokens.length; i++) {
    final String token;
    if (i == 1) {
      token=tokens[i].getToken().toLowerCase();
    }
 else {
      token=tokens[i].getToken();
    }
    if (matchPostagRegexp(tokens[i],NO_VERB))     continue loop;
    final Matcher mUpperCase=UPPERCASE.matcher(tokens[i].getToken());
    if (i > 1 && mUpperCase.matches())     continue loop;
    if (matchLemmaRegexp(tokens[i],VERBS_PRONOMINALS)) {
      if (matchLemmaRegexp(tokens[i],NO_VERBS_PRONOMINALS))       continue loop;
      if (isThereReflexivePronoun(tokens,i)) {
        continue loop;
      }
      final String msg="Aquest verb ??s pronominal. Falta un pronom.";
      final RuleMatch ruleMatch=new RuleMatch(this,tokens[i].getStartPos(),tokens[i].getStartPos() + token.length(),msg,"Verb pronominal: falta un pronom");
      ruleMatches.add(ruleMatch);
    }
    if (matchLemmaRegexp(tokens[i],VERBS_NO_PRONOMINALS)) {
      if (!isThereReflexivePronoun(tokens,i)) {
        continue loop;
      }
      final String msg="Aquest verb no ??s pronominal. Sobra un pronom.";
      final RuleMatch ruleMatch=new RuleMatch(this,tokens[i].getStartPos(),tokens[i].getStartPos() + token.length(),msg,"Verb no pronominal: sobra un pronom");
      ruleMatches.add(ruleMatch);
    }
    if (matchLemmaRegexp(tokens[i],VERBS_MOVIMENT) && !matchPostagRegexp(tokens[i],VERB_AUXILIAR)) {
      if (i + 1 < tokens.length && matchLemmaRegexp(tokens[i + 1],VERBS_PRONOMINALS)) {
        continue loop;
      }
      if (isThereReflexivePronoun(tokens,i) && (!isTherePronoun(tokens,i,LEMMA_EN,POSTAG_EN))) {
        final String msg="Per a usar aquest verb com a pronominal, cal afegir-hi el pronom'n'.";
        final RuleMatch ruleMatch=new RuleMatch(this,tokens[i].getStartPos(),tokens[i].getStartPos() + token.length(),msg,"Falta el pronom 'en'");
        ruleMatches.add(ruleMatch);
      }
    }
  }
  return toRuleMatchArray(ruleMatches);
}
