import os
from subprocess import call
import re
pos_LT = {'A': 'ADJ', 'ADV': 'ADV', 'ADVPRO': 'none', 'ANUM': 'none', 'APRO': 'none', 'COM': 'none', 'CONJ': 'CONJ', 'INTJ': 'INTERJECTION', 'NUM': 'NumC', 'PART': 'PARTICLE', 'PR': 'PREP', 'S': 'NN', 'SPRO': 'PNN', 'V': 'VB', }
pos_other_LT = ['DPT', 'PT', 'ADJ_Short', 'ADJ', 'PADJ', 'ADJ_Comp', 'ADJ_Sup', 'NNN', 'NNP', 'NNF']
tense_LT = {'praes': 'Real', 'inpraes': 'Fut', 'praet': 'Past', 'inf': 'INF', 'imper': 'IMP', }
case_LT = {'nom': 'Nom', 'gen': 'R', 'dat': 'D', 'acc': 'V', 'ins': 'T', 'abl': 'P', 'part': 'R', 'loc': 'P', 'voc': 'none', }
number_LT = {'sg': 'Sin', 'pl': 'PL', }
person_LT = {'1p': 'P1', '2p': 'P2', '3p': 'P3', }
gender_LT = {'m': 'Masc', 'f': 'Fem', 'n': 'Neut', }
other_LT = {'ger': 'DPT', 'partcp': 'PT', 'indic': '', 'brev': 'ADJ_Short', 'plen': 'ADJ', 'poss': 'PADJ', 'supr': 'ADJ_Comp', 'comp': 'ADJ_S', 'ipf': '', 'pf': '', 'act': '', 'pass': '', 'anim': '', 'inan': '', 'tran': '', 'intr': '', 'parenth': '', 'geo': '', 'awkw': '', 'persn': 'NNN', 'dist': '', 'mf': '', 'obsc': '', 'patrn': 'NNP', 'praed': '', 'inform': 'Talk', 'rare': '', 'abbr': 'ABR', 'obsol': '', 'famn': 'NNF', }
all_tags = []
with open('all_tags.txt', 'r') as data_file:
    for data_line in data_file:
        all_tags.append(data_line[:(-1)])
words = set()
i = 0
with open('need-tag.txt', 'r') as data_file:
    for data_line in data_file:
        if (' ' in data_line):
            if ('...' in data_line[:3]):
                data_line = data_line.split(' ', 1)[1]
            if ('...' in data_line):
                data_line = data_line.rsplit(' ', 1)[0]
        split = re.findall(u'[\u0400-\u0500]+', data_line)
        for word in split:
            if (word != word.upper()):
                words.add(word.lower())
i = 0
with open('unique-tag.txt', 'w') as new_file:
    for word in words:
        new_file.write((('\xd0\x90 ' + word) + ' \xd0\xb0.\n'))
os.system('time java -jar languagetool/languagetool-standalone/target/LanguageTool-3.5-SNAPSHOT/LanguageTool-3.5-SNAPSHOT/languagetool-commandline.jar -l ru -eo -e Unknown_words  unique-tag.txt > out.txt')
news = set()
with open('out.txt', 'r') as new_file:
    prev_line = ' '
    for line in new_file:
        if ('^' in line):
            start = line.find('^')
            stop = (line.rfind('^') + 1)
            news.add(prev_line[start:stop])
        prev_line = line
print len(news)
with open('new-tag.txt', 'w') as new_file:
    for word in news:
        new_file.write((word + '\n'))
os.system('./mystem -nwi --eng-gr new-tag.txt mout.txt')
mystems = []
with open('mout.txt', 'r') as new_file:
    for line in new_file:
        if (not ('?' in line)):
            mystems.append(line)
mystems.sort()
missed_tags = 0
with open('final-tags-mystem.txt', 'w') as final:
    for word in mystems:
        token = word.split('{', 1)[0]
        descs = word.split('{', 1)[1].split('|')
        current_lemma = ''
        for desc in descs:
            if (desc[0] != '='):
                current_lemma = desc.split('=', 1)[0]
            gramma = desc.split('=', 1)[1]
            if (gramma[(-2)] == '}'):
                gramma = gramma[:(-2)]
            pos_tag = convert_gramma(gramma)
            if (pos_tag in all_tags):
                final.write((((((token + '\t') + current_lemma) + '\t') + pos_tag) + '\n'))
            else:
                print ((((((token + '\t') + current_lemma) + '\t') + pos_tag) + ' <== ') + gramma)
                missed_tags += 1
with open('final-mystem.txt', 'w') as final:
    for word in mystems:
        final.write((word.split('{', 1)[0] + '\n'))
print ('Detected dictionary tags, missing in LT:', missed_tags)
