{
  if (termStr == null || termStr.isEmpty()) {
    return null;
  }
  final Query termQuery;
  final Term termQueryTerm=getTermQueryTerm(patternToken,termStr);
  if (patternToken.getNegation() || patternToken.getMinOccurrence() == 0) {
    return null;
  }
 else   if (patternToken.isInflected() && patternToken.isRegularExpression()) {
    Term lemmaQueryTerm=getQueryTerm(patternToken,LEMMA_PREFIX + "(",simplifyRegex(termStr),")");
    final Query regexpQuery=getRegexQuery(lemmaQueryTerm,termStr,patternToken);
    return new BooleanClause(regexpQuery,BooleanClause.Occur.MUST);
  }
 else   if (patternToken.isInflected() && !patternToken.isRegularExpression()) {
    final Synthesizer synthesizer=language.getSynthesizer();
    if (synthesizer != null) {
      try {
        final String[] synthesized=synthesizer.synthesize(new AnalyzedToken(termStr,null,termStr),".*",true);
        final Query query;
        if (synthesized.length == 0) {
          query=new TermQuery(termQueryTerm);
        }
 else {
          query=new RegexpQuery(getTermQueryTerm(patternToken,StringUtils.join(synthesized,"|")));
        }
        return new BooleanClause(query,BooleanClause.Occur.MUST);
      }
 catch (      IOException e) {
        throw new RuntimeException("Could not build Lucene query for '" + patternToken + "' and '"+ termStr+ "'",e);
      }
    }
    return null;
  }
 else   if (patternToken.isRegularExpression()) {
    termQuery=getRegexQuery(termQueryTerm,termStr,patternToken);
  }
 else {
    termQuery=new TermQuery(termQueryTerm);
  }
  return new BooleanClause(termQuery,BooleanClause.Occur.MUST);
}
