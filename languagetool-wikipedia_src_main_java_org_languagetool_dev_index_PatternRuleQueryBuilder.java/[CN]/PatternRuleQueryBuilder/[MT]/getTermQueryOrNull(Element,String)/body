{
  if (termStr == null || termStr.isEmpty()) {
    return null;
  }
  final Query termQuery;
  final Term termQueryTerm=getTermQueryTerm(element,termStr);
  if (element.getNegation()) {
    return null;
  }
 else   if (element.isInflected() && element.isRegularExpression()) {
    Term lemmaQueryTerm=getQueryTerm(element,LEMMA_PREFIX + "(",termStr,")");
    final RegexpQuery regexpQuery=new RegexpQuery(lemmaQueryTerm);
    return new BooleanClause(regexpQuery,BooleanClause.Occur.MUST);
  }
 else   if (element.isInflected() && !element.isRegularExpression()) {
    final Synthesizer synthesizer=language.getSynthesizer();
    if (synthesizer != null) {
      try {
        final String[] synthesized=synthesizer.synthesize(new AnalyzedToken(termStr,null,termStr),".*",true);
        final RegexpQuery regexpQuery=new RegexpQuery(getTermQueryTerm(element,StringUtils.join(synthesized,"|")));
        return new BooleanClause(regexpQuery,BooleanClause.Occur.MUST);
      }
 catch (      IOException e) {
        throw new RuntimeException("Could not build Lucene query for '" + element + "' and '"+ termStr+ "'",e);
      }
    }
    return null;
  }
 else   if (element.isRegularExpression()) {
    termQuery=getRegexQuery(termQueryTerm,termStr);
  }
 else {
    termQuery=new TermQuery(termQueryTerm);
  }
  return new BooleanClause(termQuery,BooleanClause.Occur.MUST);
}
