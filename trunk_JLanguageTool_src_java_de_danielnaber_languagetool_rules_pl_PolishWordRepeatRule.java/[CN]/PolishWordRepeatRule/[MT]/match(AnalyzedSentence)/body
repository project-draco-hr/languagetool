{
  List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  AnalyzedTokenReadings[] tokens=text.getTokens();
  boolean repetition=false;
  List<String> inflectedWords=new ArrayList<String>();
  String prevLemma, curLemma;
  int pos=0;
  Pattern pExc1=Pattern.compile("to|siebie|by??|ani|albo|lub|czy|b??d??|jako|z??|coraz|bardzo|ten|jak|mln|tys|sw??j|m??j|tw??j|nasz|wasz|i");
  Pattern pExc2=Pattern.compile("prep:.*|ppron.*");
  Pattern pExc3=Pattern.compile("nie|&quot|&gt|&lt|&amp|[0-9].*|M*(D?C{0,3}|C[DM])(L?X{0,3}|X[LC])(V?I{0,3}|I[VX])$");
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i].getToken();
    if (!token.trim().equals("")) {
      boolean isWord=true;
      boolean hasLemma=true;
      if (token.length() == 1) {
        char c=token.charAt(0);
        if (!Character.isLetter(c)) {
          isWord=false;
        }
      }
      int readingsLen=tokens[i].getReadingsLength();
      for (int k=0; k < readingsLen; k++) {
        String posTag=tokens[i].getAnalyzedToken(k).getPOSTag();
        if (posTag != null) {
          if (posTag.equals("")) {
            isWord=false;
            break;
          }
          String lemma=tokens[i].getAnalyzedToken(k).getLemma();
          Matcher m1=pExc1.matcher(lemma);
          if (m1.matches()) {
            isWord=false;
            break;
          }
          Matcher m2=pExc2.matcher(posTag);
          if (m2.matches()) {
            isWord=false;
            break;
          }
        }
 else {
          hasLemma=false;
        }
      }
      Matcher m1=pExc3.matcher(tokens[i].getToken());
      if (m1.matches()) {
        isWord=false;
      }
      prevLemma="";
      if (isWord) {
        for (int j=0; j < readingsLen; j++) {
          if (hasLemma) {
            curLemma=tokens[i].getAnalyzedToken(j).getLemma();
            if (!prevLemma.equals(curLemma)) {
              if (inflectedWords.contains(curLemma)) {
                repetition=true;
              }
 else {
                inflectedWords.add(tokens[i].getAnalyzedToken(j).getLemma());
              }
            }
            prevLemma=curLemma;
          }
 else {
            if (inflectedWords.contains(tokens[i].getToken())) {
              repetition=true;
            }
 else {
              inflectedWords.add(tokens[i].getToken());
            }
          }
        }
      }
      if (repetition) {
        String msg="Powt??rzony wyraz w zdaniu";
        RuleMatch ruleMatch=new RuleMatch(this,pos,pos + token.length(),msg);
        ruleMatch.setSuggestedReplacement(tokens[i].getToken());
        ruleMatches.add(ruleMatch);
        repetition=false;
      }
    }
    pos+=token.length();
  }
  return toRuleMatchArray(ruleMatches);
}
