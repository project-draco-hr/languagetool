{
  final File file=new File(textFilename);
  if (!file.exists() || !file.isFile()) {
    throw new IOException("File doesn't exist or isn't a file: " + textFilename);
  }
  final Language lang=Language.getLanguageForShortName(language);
  if (lang == null) {
    System.err.println("Language not supported: " + language);
    System.exit(1);
  }
  final JLanguageTool languageTool=new JLanguageTool(lang);
  languageTool.activateDefaultPatternRules();
  languageTool.disableRule("DE_CASE");
  languageTool.disableRule("UNPAIRED_BRACKETS");
  languageTool.disableRule("UPPERCASE_SENTENCE_START");
  languageTool.disableRule("WORD_REPEAT_RULE");
  languageTool.disableRule("COMMA_PARENTHESIS_WHITESPACE");
  languageTool.disableRule("WHITESPACE_RULE");
  languageTool.disableRule("EN_QUOTES");
  languageTool.disableRule("CUDZYSLOW_DRUKARSKI");
  languageTool.disableRule("POMI??LJAJ_1");
  languageTool.disableRule("POMI??LJAJ_2");
  languageTool.disableRule("POMI??LJAJ_3");
  System.err.println("These rules are disabled: " + languageTool.getDisabledRules());
  final Date dumpDate=getDumpDate(file);
  System.out.println("Dump date: " + dumpDate + ", language: "+ language);
  final BaseWikipediaDumpHandler handler;
  if (propFile != null) {
    handler=new DatabaseDumpHandler(languageTool,maxArticles,dumpDate,language,propFile,lang);
  }
 else {
    handler=new OutputDumpHandler(languageTool,maxArticles,dumpDate,language,lang);
  }
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  final SAXParser saxParser=factory.newSAXParser();
  saxParser.parse(file,handler);
}
