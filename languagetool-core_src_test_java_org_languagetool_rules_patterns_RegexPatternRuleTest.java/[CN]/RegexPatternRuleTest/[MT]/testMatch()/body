{
  RegexPatternRule rule=new RegexPatternRule("ID","desc","msg: <suggestion>a suggestion \\1</suggestion>","<suggestion>another suggestion \\2</suggestion>",TestTools.getDemoLanguage(),Pattern.compile("(fo.) (bar)"));
  JLanguageTool lt=new JLanguageTool(TestTools.getDemoLanguage());
  RuleMatch[] matches1=rule.match(lt.getAnalyzedSentence("This is a test"));
  assertThat(matches1.length,is(0));
  RuleMatch[] matches2=rule.match(lt.getAnalyzedSentence("This is foo bar"));
  assertThat(matches2.length,is(1));
  assertThat(matches2[0].getFromPos(),is(8));
  assertThat(matches2[0].getToPos(),is(15));
  RuleMatch[] matches3=rule.match(lt.getAnalyzedSentence("This is foo bar and fou bar"));
  assertThat(matches3.length,is(2));
  assertThat(matches3[0].getFromPos(),is(8));
  assertThat(matches3[0].getToPos(),is(15));
  assertThat(matches3[0].getMessage(),is("msg: <suggestion>a suggestion foo</suggestion>"));
  assertThat(matches3[0].getSuggestedReplacements().toString(),is("[a suggestion foo, another suggestion bar]"));
  assertThat(matches3[1].getFromPos(),is(20));
  assertThat(matches3[1].getToPos(),is(27));
  assertThat(matches3[1].getMessage(),is("msg: <suggestion>a suggestion fou</suggestion>"));
  assertThat(matches3[1].getSuggestedReplacements().toString(),is("[a suggestion fou, another suggestion bar]"));
}
