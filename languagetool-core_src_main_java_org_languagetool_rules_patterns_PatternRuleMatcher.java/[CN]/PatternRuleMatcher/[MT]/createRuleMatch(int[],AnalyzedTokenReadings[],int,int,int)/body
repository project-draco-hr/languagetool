{
  final String errMessage=formatMatches(tokens,tokenPositions,firstMatchToken,rule.getMessage(),rule.getSuggestionMatches());
  final String suggestionsOutMsg=formatMatches(tokens,tokenPositions,firstMatchToken,rule.getSuggestionsOutMsg(),rule.getSuggestionMatchesOutMsg());
  int correctedStPos=0;
  if (rule.startPositionCorrection > 0) {
    for (int l=0; l <= rule.startPositionCorrection; l++) {
      correctedStPos+=tokenPositions[l];
    }
    correctedStPos--;
  }
  int correctedEndPos=0;
  if (rule.endPositionCorrection < 0) {
    int l=0;
    while (l > rule.endPositionCorrection) {
      correctedEndPos-=tokenPositions[matchingTokens + l - 1];
      l--;
    }
  }
  AnalyzedTokenReadings firstMatchTokenObj=tokens[firstMatchToken + correctedStPos];
  boolean startsWithUppercase=StringTools.startsWithUppercase(firstMatchTokenObj.getToken()) && !matchConvertsCase(rule.getSuggestionMatches()) && !matchConvertsCase(rule.getSuggestionMatchesOutMsg());
  if (firstMatchTokenObj.isSentStart() && tokens.length > firstMatchToken + correctedStPos + 1) {
    firstMatchTokenObj=tokens[firstMatchToken + correctedStPos + 1];
    startsWithUppercase=StringTools.startsWithUppercase(firstMatchTokenObj.getToken());
  }
  int fromPos=tokens[firstMatchToken + correctedStPos].getStartPos();
  if (errMessage.contains(SUGGESTION_START_TAG + ",") && firstMatchToken + correctedStPos >= 1) {
    fromPos=tokens[firstMatchToken + correctedStPos - 1].getStartPos() + tokens[firstMatchToken + correctedStPos - 1].getToken().length();
  }
  final int toPos=tokens[lastMatchToken + correctedEndPos].getStartPos() + tokens[lastMatchToken + correctedEndPos].getToken().length();
  if (fromPos < toPos) {
    if (!(errMessage.contains("<pleasespellme/>") && errMessage.contains("<mistake/>"))) {
      final String clearMsg=errMessage.replaceAll("<pleasespellme/>","").replaceAll("<mistake/>","");
      return new RuleMatch(rule,fromPos,toPos,clearMsg,rule.getShortMessage(),startsWithUppercase,suggestionsOutMsg);
    }
  }
  return null;
}
