{
  String errorMessage=errorMsg;
  int matchCounter=0;
  int[] numbersToMatches=new int[errorMsg.length()];
  boolean newWay=false;
  int errLen=errorMessage.length();
  int errMarker=errorMessage.indexOf('\\');
  boolean numberFollows=false;
  if (errMarker >= 0 && errMarker < errLen - 1) {
    numberFollows=StringTools.isPositiveNumber(errorMessage.charAt(errMarker + 1));
  }
  while (errMarker >= 0 && numberFollows) {
    int backslashPos=errorMessage.indexOf('\\');
    if (backslashPos >= 0 && StringTools.isPositiveNumber(errorMessage.charAt(backslashPos + 1))) {
      int numLen=1;
      while (backslashPos + numLen < errorMessage.length() && StringTools.isPositiveNumber(errorMessage.charAt(backslashPos + numLen))) {
        numLen++;
      }
      int j=Integer.parseInt(errorMessage.substring(backslashPos + 1,backslashPos + numLen)) - 1;
      int repTokenPos=0;
      int nextTokenPos=0;
      for (int l=0; l <= Math.min(j,positions.size() - 1); l++) {
        repTokenPos+=positions.get(l);
      }
      if (j + 1 < positions.size()) {
        nextTokenPos=firstMatchTok + repTokenPos + positions.get(j + 1);
      }
      if (suggestionMatches != null && suggestionMatches.size() > 0) {
        if (matchCounter < suggestionMatches.size()) {
          numbersToMatches[j]=matchCounter;
          String[] matches;
          if (j >= positions.size()) {
            matches=concatMatches(matchCounter,j,firstMatchTok + repTokenPos,tokenReadings,nextTokenPos,suggestionMatches);
          }
 else           if (positions.get(j) != 0) {
            matches=concatMatches(matchCounter,j,firstMatchTok + repTokenPos,tokenReadings,nextTokenPos,suggestionMatches);
          }
 else {
            matches=new String[]{""};
          }
          String leftSide=errorMessage.substring(0,backslashPos);
          String rightSide=errorMessage.substring(backslashPos + numLen);
          if (matches.length == 1) {
            if (matches[0].isEmpty() && (leftSide.endsWith(" ") || leftSide.endsWith("suggestion>")) && rightSide.startsWith(" ")) {
              errorMessage=leftSide + rightSide.substring(1);
            }
 else {
              errorMessage=leftSide + matches[0] + rightSide;
            }
          }
 else {
            errorMessage=formatMultipleSynthesis(matches,leftSide,rightSide);
          }
          matchCounter++;
          newWay=true;
        }
 else {
          suggestionMatches.add(suggestionMatches.get(numbersToMatches[j]));
        }
      }
      if (!newWay) {
        errorMessage=errorMessage.replace("\\" + (j + 1),tokenReadings[firstMatchTok + repTokenPos - 1].getToken());
      }
    }
    errMarker=errorMessage.indexOf('\\');
    numberFollows=false;
    errLen=errorMessage.length();
    if (errMarker >= 0 && errMarker < errLen - 1) {
      numberFollows=StringTools.isPositiveNumber(errorMessage.charAt(errMarker + 1));
    }
  }
  return errorMessage;
}
