{
  checkParams(parameters);
  long timeStart=System.currentTimeMillis();
  if (text.length() > config.maxTextLength) {
    throw new TextTooLongException("Your text exceeds this server's limit of " + config.maxTextLength + " characters (it's "+ text.length()+ " characters). Please submit a shorter text.");
  }
  boolean autoDetectLanguage=getLanguageAutoDetect(parameters);
  List<String> preferredVariants=getPreferredVariants(parameters);
  Language lang=getLanguage(text,parameters,preferredVariants);
  String motherTongueParam=parameters.get("motherTongue");
  Language motherTongue=motherTongueParam != null ? Languages.getLanguageForShortName(motherTongueParam) : null;
  boolean useEnabledOnly="yes".equals(parameters.get("enabledOnly")) || "true".equals(parameters.get("enabledOnly"));
  List<String> enabledRules=getEnabledRuleIds(parameters);
  List<String> disabledRules=getDisabledRuleIds(parameters);
  List<CategoryId> enabledCategories=getCategoryIds("enabledCategories",parameters);
  List<CategoryId> disabledCategories=getCategoryIds("disabledCategories",parameters);
  if ((disabledRules.size() > 0 || disabledCategories.size() > 0) && useEnabledOnly) {
    throw new IllegalArgumentException("You cannot specify disabled rules or categories using enabledOnly=true");
  }
  if (enabledRules.size() == 0 && enabledCategories.size() == 0 && useEnabledOnly) {
    throw new IllegalArgumentException("You must specify enabled rules or categories when using enabledOnly=true");
  }
  boolean useQuerySettings=enabledRules.size() > 0 || disabledRules.size() > 0 || enabledCategories.size() > 0 || disabledCategories.size() > 0;
  QueryParams params=new QueryParams(enabledRules,disabledRules,enabledCategories,disabledCategories,useEnabledOnly,useQuerySettings);
  Future<List<RuleMatch>> future=executorService.submit(new Callable<List<RuleMatch>>(){
    @Override public List<RuleMatch> call() throws Exception {
      return getRuleMatches(text,parameters,lang,motherTongue,params);
    }
  }
);
  List<RuleMatch> matches;
  if (config.maxCheckTimeMillis < 0) {
    matches=future.get();
  }
 else {
    try {
      matches=future.get(config.maxCheckTimeMillis,TimeUnit.MILLISECONDS);
    }
 catch (    ExecutionException e) {
      if (e.getCause() != null && e.getCause() instanceof OutOfMemoryError) {
        throw (OutOfMemoryError)e.getCause();
      }
 else {
        throw e;
      }
    }
catch (    TimeoutException e) {
      boolean cancelled=future.cancel(true);
      throw new RuntimeException("Text checking took longer than allowed maximum of " + config.maxCheckTimeMillis + " milliseconds (cancelled: "+ cancelled+ ", handleCount: "+ handleCount+ ", language: "+ lang.getShortNameWithCountryAndVariant()+ ", "+ text.length()+ " characters of text)",e);
    }
  }
  setHeaders(httpExchange);
  String xmlResponse=getResponse(text,lang,motherTongue,matches);
  String messageSent="sent";
  String languageMessage=lang.getShortNameWithCountryAndVariant();
  String referrer=httpExchange.getRequestHeaders().getFirst("Referer");
  try {
    httpExchange.sendResponseHeaders(HttpURLConnection.HTTP_OK,xmlResponse.getBytes(ENCODING).length);
    httpExchange.getResponseBody().write(xmlResponse.getBytes(ENCODING));
  }
 catch (  IOException exception) {
    messageSent="notSent: " + exception.getMessage();
  }
  if (motherTongue != null) {
    languageMessage+=" (mother tongue: " + motherTongue.getShortNameWithCountryAndVariant() + ")";
  }
  if (autoDetectLanguage) {
    languageMessage+="[auto]";
  }
  String agent=parameters.get("useragent") != null ? parameters.get("useragent") : "-";
  String clazz=this.getClass().getSimpleName();
  print("Check done: " + text.length() + " chars, "+ languageMessage+ ", "+ referrer+ ", "+ "handlers:"+ handleCount+ ", "+ matches.size()+ " matches, "+ (System.currentTimeMillis() - timeStart)+ "ms, class: "+ clazz+ ", agent:"+ agent+ ", "+ messageSent);
}
