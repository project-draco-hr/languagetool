{
  RuleConverter rc=getCurrentRuleConverter();
  this.rulesBox.removeAllItems();
  try {
    rc.parseRuleFile();
    ruleObjects=rc.getRules();
    allRulesList=rc.getAllLtRules();
    ruleStrings=new ArrayList<String>();
    originalRuleStrings=rc.getOriginalRuleStrings();
    warnings=rc.getWarnings();
    for (int i=0; i < allRulesList.size(); i++) {
      List<String> ruleList=allRulesList.get(i);
      String ruleString=RuleConverter.getRuleStringFromList(ruleList);
      ruleStrings.add(ruleString);
    }
    removeDuplicateRules();
    disambigRuleIndices=new boolean[allRulesList.size()];
    coveredByList=new ArrayList<String[]>();
    numberOfRules=allRulesList.size();
    numRulesPane.setText(Integer.toString(numberOfRules));
    for (int i=0; i < ruleObjects.size(); i++) {
      Object ruleObject=ruleObjects.get(i);
      if (rc.isDisambiguationRule(ruleObject)) {
        disambigRuleIndices[i]=true;
      }
 else {
        disambigRuleIndices[i]=false;
      }
      coveredByList.add(new String[0]);
    }
    tieOutFileNames();
  }
 catch (  IOException e) {
    showDialog("IOException while loading/parsing file " + filename);
  }
}
