{
  if (qName.equals("rule")) {
    trgRule.setMessage(message.toString());
    if (suggestionMatches != null) {
      for (      final Match m : suggestionMatches) {
        trgRule.addSuggestionMatch(m);
      }
      if (phraseElementList.size() <= 1) {
        suggestionMatches.clear();
      }
    }
    final BitextPatternRule bRule=new BitextPatternRule(srcRule,trgRule);
    bRule.setCorrectBitextExamples(correctExamples);
    bRule.setIncorrectBitextExamples(incorrectExamples);
    bRule.setSourceLang(srcLang);
    rules.add(bRule);
  }
 else   if (qName.equals("trgExample")) {
    trgExample=setExample();
  }
 else   if (qName.equals("srcExample")) {
    srcExample=setExample();
  }
 else   if (qName.equals("source")) {
    srcRule=finalizeRule();
  }
 else   if (qName.equals("target")) {
    trgRule=finalizeRule();
  }
 else   if (qName.equals("example")) {
    if (inCorrectExample) {
      correctExamples.add(new StringPair(srcExample.getExample(),trgExample.getExample()));
    }
 else     if (inIncorrectExample) {
      final StringPair examplePair=new StringPair(srcExample.getExample(),trgExample.getExample());
      if (trgExample.getCorrections() == null) {
        incorrectExamples.add(new IncorrectBitextExample(examplePair));
      }
 else {
        final List<String> corrections=trgExample.getCorrections();
        final String[] correctionArray=corrections.toArray(new String[corrections.size()]);
        incorrectExamples.add(new IncorrectBitextExample(examplePair,correctionArray));
      }
    }
    inCorrectExample=false;
    inIncorrectExample=false;
  }
 else {
    super.endElement(namespaceURI,sName,qName);
  }
}
