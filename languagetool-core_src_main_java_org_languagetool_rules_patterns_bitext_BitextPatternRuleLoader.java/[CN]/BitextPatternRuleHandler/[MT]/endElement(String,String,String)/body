{
switch (qName) {
case "rule":
    trgRule.setMessage(message.toString());
  if (suggestionMatches != null) {
    for (    final Match m : suggestionMatches) {
      trgRule.addSuggestionMatch(m);
    }
    if (phraseElementList.size() <= 1) {
      suggestionMatches.clear();
    }
  }
final BitextPatternRule bRule=new BitextPatternRule(srcRule,trgRule);
bRule.setCorrectBitextExamples(correctExamples);
bRule.setIncorrectBitextExamples(incorrectExamples);
bRule.setSourceLang(srcLang);
rules.add(bRule);
break;
case "trgExample":
trgExample=setExample();
break;
case "srcExample":
srcExample=setExample();
break;
case "source":
srcRule=finalizeRule();
break;
case "target":
trgRule=finalizeRule();
break;
case "example":
if (inCorrectExample) {
correctExamples.add(new StringPair(srcExample.getExample(),trgExample.getExample()));
}
 else if (inIncorrectExample) {
final StringPair examplePair=new StringPair(srcExample.getExample(),trgExample.getExample());
if (trgExample.getCorrections() == null) {
incorrectExamples.add(new IncorrectBitextExample(examplePair));
}
 else {
final List<String> corrections=trgExample.getCorrections();
final String[] correctionArray=corrections.toArray(new String[corrections.size()]);
incorrectExamples.add(new IncorrectBitextExample(examplePair,correctionArray));
}
}
inCorrectExample=false;
inIncorrectExample=false;
break;
default :
super.endElement(namespaceURI,sName,qName);
break;
}
}
