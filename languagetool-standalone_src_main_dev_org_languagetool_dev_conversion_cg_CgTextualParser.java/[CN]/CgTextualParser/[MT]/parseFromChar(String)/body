{
  if (index >= length) {
    System.err.println("No input stream or input stream is empty");
    System.exit(1);
  }
  while (notDone()) {
    if (verbosity_level > 0 && result.lines % 500 == 0) {
      System.out.println("Parsing line " + result.lines);
    }
    result.lines+=SKIPWS((char)0,(char)0);
    if (index >= length) {
      break;
    }
    if (ISCHR(index,0,'D','d') && ISCHR(index,9,'S','s') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'L','l')&& ISCHR(index,3,'I','i')&& ISCHR(index,4,'M','m')&& ISCHR(index,5,'I','i')&& ISCHR(index,6,'T','t')&& ISCHR(index,7,'E','e')&& ISCHR(index,8,'R','r')&& !ISSTRING(index,9)) {
      if (result.delimiters != null) {
        System.err.println("Cannot redefine delimiters on line " + result.lines);
        System.exit(1);
      }
      CgSet delimiters=new CgSet();
      delimiters.line=result.lines;
      delimiters.setName(stringbits[STRINGS.S_DELIMITSET.value]);
      index+=10;
      result.lines+=SKIPWS('=',(char)0);
      if (inArray[index] != '=') {
        System.err.println("Error encountered before the expected = on line " + result.lines);
        System.exit(1);
      }
      ++index;
      delimiters=parseTagList(delimiters,false);
      result.addSet(delimiters);
      if (result.delimiters.tags.isEmpty() && result.delimiters.single_tags.isEmpty()) {
        System.err.println("Error: Delimiters declared, but line empty");
        System.exit(1);
      }
      result.lines+=SKIPWS(';',(char)0);
      if (inArray[index] != ';') {
        System.err.println("Error: missing ; to end line");
        System.exit(1);
      }
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,14,'S','s') && ISCHR(index,1,'O','o')&& ISCHR(index,2,'F','f')&& ISCHR(index,3,'T','t')&& ISCHR(index,4,'-','_')&& ISCHR(index,5,'D','d')&& ISCHR(index,6,'E','e')&& ISCHR(index,7,'L','l')&& ISCHR(index,8,'I','i')&& ISCHR(index,9,'M','m')&& ISCHR(index,10,'I','i')&& ISCHR(index,11,'T','t')&& ISCHR(index,12,'E','e')&& ISCHR(index,13,'R','r')&& !ISSTRING(index,14)) {
      if (result.soft_delimiters != null) {
        System.err.println("Cannot redefine soft delimiters on line " + result.lines);
        System.exit(1);
      }
      CgSet soft_delimiters=new CgSet();
      soft_delimiters.line=result.lines;
      soft_delimiters.setName(stringbits[STRINGS.S_SOFTDELIMITSET.value]);
      index+=15;
      result.lines+=SKIPWS('=',(char)0);
      if (inArray[index] != '=') {
        System.err.println("Error encountered before the expected = on line " + result.lines);
        System.exit(1);
      }
      ++index;
      soft_delimiters=parseTagList(soft_delimiters,false);
      result.addSet(soft_delimiters);
      if (result.soft_delimiters.tags.isEmpty() && result.soft_delimiters.single_tags.isEmpty()) {
        System.err.println("Error: Soft-delimiters declared, but line is empty");
        System.exit(1);
      }
      result.lines+=SKIPWS(';',(char)0);
      if (inArray[index] != ';') {
        System.err.println("Missing closing ; on line " + result.lines);
        System.exit(1);
      }
    }
 else     if (ISCHR(index,0,'M','m') && ISCHR(index,13,'X','x') && ISCHR(index,1,'A','a')&& ISCHR(index,2,'P','p')&& ISCHR(index,3,'P','p')&& ISCHR(index,4,'I','i')&& ISCHR(index,5,'N','n')&& ISCHR(index,6,'G','g')&& ISCHR(index,7,'-','_')&& ISCHR(index,8,'P','p')&& ISCHR(index,9,'R','r')&& ISCHR(index,10,'E','e')&& ISCHR(index,11,'F','f')&& ISCHR(index,12,'I','i')&& !ISSTRING(index,13)) {
      if (seen_mapping_prefix != 0) {
        System.err.println("Error: saw mapping prefix on line " + seen_mapping_prefix + ", cannot change.");
        System.exit(1);
      }
      seen_mapping_prefix=result.lines;
      index+=14;
      result.lines+=SKIPWS('=',(char)0);
      if (inArray[index] != '=') {
        System.err.println("Error encountered before expected = on line " + result.lines);
        System.exit(1);
      }
      ++index;
      result.lines+=SKIPWS((char)0,(char)0);
      nindex=index;
      result.lines+=SKIPTOWS_N(';',false);
      StringBuilder mapping_prefix=new StringBuilder();
      for (int i=index; i < nindex; i++) {
        mapping_prefix.append(inArray[i]);
      }
      result.mapping_prefix=mapping_prefix.toString();
      index=nindex;
      if (result.mapping_prefix == null || result.mapping_prefix == "") {
        System.err.println("Error: mapping prefix declared on line " + result.lines + " but no definition given");
        System.exit(1);
      }
      result.lines+=SKIPWS(';',(char)0);
      if (inArray[index] != ';') {
        System.err.println("Missing closing ; at line " + result.lines);
        System.exit(1);
      }
    }
 else     if (ISCHR(index,0,'P','p') && ISCHR(index,16,'S','s') && ISCHR(index,1,'R','r')&& ISCHR(index,2,'E','e')&& ISCHR(index,3,'F','f')&& ISCHR(index,4,'E','e')&& ISCHR(index,5,'R','r')&& ISCHR(index,6,'R','r')&& ISCHR(index,7,'E','e')&& ISCHR(index,8,'D','d')&& ISCHR(index,9,'-','_')&& ISCHR(index,10,'T','t')&& ISCHR(index,11,'A','a')&& ISCHR(index,12,'R','r')&& ISCHR(index,13,'G','g')&& ISCHR(index,14,'E','e')&& ISCHR(index,15,'T','t')&& !ISSTRING(index,16)) {
      index+=17;
      result.lines+=SKIPWS('=',(char)0);
      if (inArray[index] != '=') {
        System.err.println("Error encountered before expected = on line " + result.lines);
        System.exit(1);
      }
      ++index;
      result.lines+=SKIPWS((char)0,(char)0);
      while (notDone() && inArray[index] != ';') {
        nindex=index;
        if (inArray[nindex] == '"') {
          nindex++;
          result.lines+=SKIPTO_NOSPAN_N('"');
          if (inArray[nindex] != '"') {
            System.err.println("Error, missing closing \" on line " + result.lines);
            System.exit(1);
          }
        }
        result.lines+=SKIPTOWS_N(';',true);
        StringBuilder preferred_targets=new StringBuilder();
        for (int i=index; i < nindex; i++) {
          preferred_targets.append(inArray[i]);
        }
        CgTag t=result.allocateTag(preferred_targets.toString(),false);
        result.preferred_targets.add(t.hash);
        index=nindex;
        result.lines+=SKIPWS((char)0,(char)0);
      }
      if (result.preferred_targets.isEmpty()) {
        System.err.println("Preferred targets declared, but no definition given on line " + result.lines);
        System.exit(1);
      }
      result.lines+=SKIPWS(';',(char)0);
      if (inArray[index] != ';') {
        System.err.println("No closing ; at the end of line " + result.lines);
        System.exit(1);
      }
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,10,'S','s') && ISCHR(index,1,'T','t')&& ISCHR(index,2,'A','a')&& ISCHR(index,3,'T','t')&& ISCHR(index,4,'I','i')&& ISCHR(index,5,'C','c')&& ISCHR(index,6,'-','_')&& ISCHR(index,7,'S','s')&& ISCHR(index,8,'E','e')&& ISCHR(index,9,'T','t')&& !ISSTRING(index,10)) {
      index+=11;
      result.lines+=SKIPWS((char)0,(char)0);
      while (notDone() && inArray[index] != ';') {
        nindex=index;
        result.lines+=SKIPTOWS_N(';',true);
        StringBuilder static_sets=new StringBuilder();
        for (int i=index; i < nindex; i++) {
          static_sets.append(inArray[i]);
        }
        result.static_sets.add(static_sets.toString());
        index=nindex;
        result.lines+=SKIPWS((char)0,(char)0);
      }
      if (result.static_sets.isEmpty()) {
        System.err.println("Error: static sets declared on line " + result.lines + " but no definitions given");
        System.exit(1);
      }
      result.lines+=SKIPWS(';',(char)0);
      if (inArray[index] != ';') {
        System.err.println("Error: missing the closing ; at the end of line " + result.lines);
        System.exit(1);
      }
    }
 else     if (ISCHR(index,0,'A','a') && ISCHR(index,11,'S','s') && ISCHR(index,1,'D','d')&& ISCHR(index,2,'D','d')&& ISCHR(index,3,'R','r')&& ISCHR(index,4,'E','e')&& ISCHR(index,5,'L','l')&& ISCHR(index,6,'A','a')&& ISCHR(index,7,'T','t')&& ISCHR(index,8,'I','i')&& ISCHR(index,9,'O','o')&& ISCHR(index,10,'N','n')&& !ISSTRING(index,11)) {
      parseRule(KEYWORDS.K_ADDRELATIONS);
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,11,'S','s') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'T','t')&& ISCHR(index,3,'R','r')&& ISCHR(index,4,'E','e')&& ISCHR(index,5,'L','l')&& ISCHR(index,6,'A','a')&& ISCHR(index,7,'T','t')&& ISCHR(index,8,'I','i')&& ISCHR(index,9,'O','o')&& ISCHR(index,10,'N','n')&& !ISSTRING(index,11)) {
      parseRule(KEYWORDS.K_SETRELATIONS);
    }
 else     if (ISCHR(index,0,'R','r') && ISCHR(index,11,'S','s') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'M','m')&& ISCHR(index,3,'R','r')&& ISCHR(index,4,'E','e')&& ISCHR(index,5,'L','l')&& ISCHR(index,6,'A','a')&& ISCHR(index,7,'T','t')&& ISCHR(index,8,'I','i')&& ISCHR(index,9,'O','o')&& ISCHR(index,10,'N','n')&& !ISSTRING(index,11)) {
      parseRule(KEYWORDS.K_REMRELATIONS);
    }
 else     if (ISCHR(index,0,'A','a') && ISCHR(index,10,'N','n') && ISCHR(index,1,'D','d')&& ISCHR(index,2,'D','d')&& ISCHR(index,3,'R','r')&& ISCHR(index,4,'E','e')&& ISCHR(index,5,'L','l')&& ISCHR(index,6,'A','a')&& ISCHR(index,7,'T','t')&& ISCHR(index,8,'I','i')&& ISCHR(index,9,'O','o')&& !ISSTRING(index,10)) {
      parseRule(KEYWORDS.K_ADDRELATION);
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,10,'N','n') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'T','t')&& ISCHR(index,3,'R','r')&& ISCHR(index,4,'E','e')&& ISCHR(index,5,'L','l')&& ISCHR(index,6,'A','a')&& ISCHR(index,7,'T','t')&& ISCHR(index,8,'I','i')&& ISCHR(index,9,'O','o')&& !ISSTRING(index,10)) {
      parseRule(KEYWORDS.K_SETRELATION);
    }
 else     if (ISCHR(index,0,'R','r') && ISCHR(index,10,'N','n') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'M','m')&& ISCHR(index,3,'R','r')&& ISCHR(index,4,'E','e')&& ISCHR(index,5,'L','l')&& ISCHR(index,6,'A','a')&& ISCHR(index,7,'T','t')&& ISCHR(index,8,'I','i')&& ISCHR(index,9,'O','o')&& !ISSTRING(index,10)) {
      parseRule(KEYWORDS.K_REMRELATION);
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,8,'T','t') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'T','t')&& ISCHR(index,3,'P','p')&& ISCHR(index,4,'A','a')&& ISCHR(index,5,'R','r')&& ISCHR(index,6,'E','e')&& ISCHR(index,7,'N','n')&& !ISSTRING(index,8)) {
      parseRule(KEYWORDS.K_SETPARENT);
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,7,'D','d') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'T','t')&& ISCHR(index,3,'C','c')&& ISCHR(index,4,'H','h')&& ISCHR(index,5,'I','i')&& ISCHR(index,6,'L','l')&& !ISSTRING(index,7)) {
      parseRule(KEYWORDS.K_SETCHILD);
    }
 else     if (ISCHR(index,0,'E','e') && ISCHR(index,7,'L','l') && ISCHR(index,1,'X','x')&& ISCHR(index,2,'T','t')&& ISCHR(index,3,'E','e')&& ISCHR(index,4,'R','r')&& ISCHR(index,5,'N','n')&& ISCHR(index,6,'A','a')&& !ISSTRING(index,7)) {
      parseRule(KEYWORDS.K_EXTERNAL);
    }
 else     if (ISCHR(index,0,'R','r') && ISCHR(index,8,'T','t') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'M','m')&& ISCHR(index,3,'C','c')&& ISCHR(index,4,'O','o')&& ISCHR(index,5,'H','h')&& ISCHR(index,6,'O','o')&& ISCHR(index,7,'R','r')&& !ISSTRING(index,8)) {
      parseRule(KEYWORDS.K_REMCOHORT);
    }
 else     if (ISCHR(index,0,'A','a') && ISCHR(index,8,'T','t') && ISCHR(index,1,'D','d')&& ISCHR(index,2,'D','d')&& ISCHR(index,3,'C','c')&& ISCHR(index,4,'O','o')&& ISCHR(index,5,'H','h')&& ISCHR(index,6,'O','o')&& ISCHR(index,7,'R','r')&& !ISSTRING(index,8)) {
      parseRule(KEYWORDS.K_ADDCOHORT);
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,3,'S','s') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'T','t')&& !ISSTRING(index,3)) {
      index+=4;
    }
 else     if (ISCHR(index,0,'L','l') && ISCHR(index,3,'T','t') && ISCHR(index,1,'I','i')&& ISCHR(index,2,'S','s')&& !ISSTRING(index,3)) {
      CgSet set=new CgSet();
      set.line=result.lines;
      index+=4;
      result.lines+=SKIPWS((char)0,(char)0);
      nindex=index;
      result.lines+=SKIPTOWS_N((char)0,true);
      while (inArray[nindex - 1] == ',' || inArray[index - 1] == ']') {
        --nindex;
      }
      StringBuilder list_string=new StringBuilder();
      for (int i=index; i < nindex; i++) {
        list_string.append(inArray[i]);
      }
      set.setName(list_string.toString());
      index=nindex;
      result.lines+=SKIPWS('=',(char)0);
      if (inArray[index] != '=') {
        System.err.println("Error: encountered something before the expected = on line " + result.lines);
        System.exit(1);
      }
      ++index;
      set=parseTagList(set,false);
      CgSet temp=result.getSet(set.hash);
      if (temp != null) {
        if (verbosity_level > 0) {
          System.out.println("Warning: LIST " + set.name + " was defined twice with the same contents on lines "+ set.line+ " and "+ temp.line);
        }
      }
      result.addSet(set);
      if (set.tags.isEmpty() && set.single_tags.isEmpty() && set.sets.isEmpty()) {
        System.err.println("Error: list " + set.name + " is declared, but no definitions are given on line "+ result.lines);
        System.exit(1);
      }
      result.lines+=SKIPWS(';',(char)0);
      if (inArray[index] != ';') {
        System.err.println("Error: missing ; at the end of line " + result.lines);
        System.exit(1);
      }
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,2,'T','t') && ISCHR(index,1,'E','e')&& !ISSTRING(index,2)) {
      CgSet s=new CgSet();
      s.line=result.lines;
      index+=3;
      result.lines+=SKIPWS((char)0,(char)0);
      nindex=index;
      result.lines+=SKIPTOWS_N((char)0,true);
      while (inArray[nindex - 1] == ',' || inArray[nindex - 1] == ']') {
        --nindex;
      }
      StringBuilder set_name=new StringBuilder();
      for (int i=index; i < nindex; i++) {
        set_name.append(inArray[i]);
      }
      String sn=set_name.toString();
      s.setName(sn);
      int sh=sn.hashCode();
      index=nindex;
      result.lines+=SKIPWS('=',(char)0);
      if (inArray[index] != '=') {
        System.err.println("Error encountered before expected = on line " + result.lines);
        System.exit(1);
      }
      ++index;
      s=parseSetInline(s);
      CgSet temp=result.getSet(s.hash);
      if (temp != null) {
        if (verbosity_level > 0) {
          System.out.println("Warning: set " + s.name + " was defined twice with the same contents on lines "+ s.line+ " and "+ temp.line);
        }
      }
 else       if (s.sets.size() == 1 && !(s.type.contains(ST.ST_TAG_UNIFY))) {
        temp=result.getSet(s.sets.get(s.sets.size() - 1));
        if (verbosity_level > 0) {
          System.out.println("Warning: set " + s.name + "at line "+ s.line+ " has been aliased to "+ temp.name+ " at line "+ temp.line);
        }
        result.set_alias.put(sh,temp.hash);
        result.destroySet(s);
        s=temp;
      }
      result.addSet(s);
      if (s.sets.isEmpty() && s.tags.isEmpty() && s.single_tags.isEmpty()) {
        System.err.println("Error: set " + s.name + " declared on line "+ s.line+ " but no definition");
        System.exit(1);
      }
      result.lines+=SKIPWS(';',(char)0);
      if (inArray[index] != ';') {
        System.err.println("Error: missing closing ; at line " + result.lines);
        System.exit(1);
      }
    }
 else     if (ISCHR(index,0,'M','m') && ISCHR(index,7,'S','s') && ISCHR(index,1,'A','a')&& ISCHR(index,2,'P','p')&& ISCHR(index,3,'P','p')&& ISCHR(index,4,'I','i')&& ISCHR(index,5,'N','n')&& ISCHR(index,6,'G','g')&& !ISSTRING(index,7)) {
      index+=8;
      in_before_sections=true;
      in_section=false;
      in_after_sections=false;
      in_null_section=false;
      sindex=index;
      SKIPLN_S();
      SKIPWS_S((char)0,(char)0);
      result.lines+=SKIPWS((char)0,(char)0);
      if (index != sindex) {
        nindex=index;
        result.lines+=SKIPTOWS_N((char)0,true);
        StringBuilder anchor=new StringBuilder();
        for (int i=index; i < nindex; i++) {
          anchor.append(inArray[i]);
        }
        result.addAnchor(anchor.toString(),result.lines);
        index=nindex;
      }
    }
 else     if (ISCHR(index,0,'C','c') && ISCHR(index,10,'S','s') && ISCHR(index,1,'O','o')&& ISCHR(index,2,'R','r')&& ISCHR(index,3,'R','r')&& ISCHR(index,4,'E','e')&& ISCHR(index,5,'C','c')&& ISCHR(index,6,'T','t')&& ISCHR(index,7,'I','i')&& ISCHR(index,8,'O','o')&& ISCHR(index,9,'N','n')&& !ISSTRING(index,10)) {
      index+=11;
      in_before_sections=true;
      in_section=false;
      in_after_sections=false;
      in_null_section=false;
      sindex=index;
      SKIPLN_S();
      SKIPWS_S((char)0,(char)0);
      result.lines+=SKIPWS((char)0,(char)0);
      if (index != sindex) {
        nindex=index;
        result.lines+=SKIPTOWS_N((char)0,true);
        StringBuilder anchor=new StringBuilder();
        for (int i=index; i < nindex; i++) {
          anchor.append(inArray[i]);
        }
        result.addAnchor(anchor.toString(),result.lines);
        index=nindex;
      }
    }
 else     if (ISCHR(index,0,'B','b') && ISCHR(index,14,'S','s') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'F','f')&& ISCHR(index,3,'O','o')&& ISCHR(index,4,'R','r')&& ISCHR(index,5,'E','e')&& ISCHR(index,6,'-','_')&& ISCHR(index,7,'S','s')&& ISCHR(index,8,'E','e')&& ISCHR(index,9,'C','c')&& ISCHR(index,10,'T','t')&& ISCHR(index,11,'I','i')&& ISCHR(index,12,'O','o')&& ISCHR(index,13,'N','n')&& !ISSTRING(index,14)) {
      index+=15;
      in_before_sections=true;
      in_section=false;
      in_after_sections=false;
      in_null_section=false;
      sindex=index;
      SKIPLN_S();
      SKIPWS_S((char)0,(char)0);
      result.lines+=SKIPWS((char)0,(char)0);
      if (index != sindex) {
        nindex=index;
        result.lines+=SKIPTOWS_N((char)0,true);
        StringBuilder anchor=new StringBuilder();
        for (int i=index; i < nindex; i++) {
          anchor.append(inArray[i]);
        }
        result.addAnchor(anchor.toString(),result.lines);
        index=nindex;
      }
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,6,'N','n') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'C','c')&& ISCHR(index,3,'T','t')&& ISCHR(index,4,'I','i')&& ISCHR(index,5,'O','o')&& !ISSTRING(index,6)) {
      index+=7;
      result.sections.add(result.lines);
      in_before_sections=false;
      in_section=true;
      in_after_sections=false;
      in_null_section=false;
      sindex=index;
      SKIPLN_S();
      SKIPWS_S((char)0,(char)0);
      result.lines+=SKIPWS((char)0,(char)0);
      if (index != sindex) {
        nindex=index;
        result.lines+=SKIPTOWS_N((char)0,true);
        StringBuilder anchor=new StringBuilder();
        for (int i=index; i < nindex; i++) {
          anchor.append(inArray[i]);
        }
        result.addAnchor(anchor.toString(),result.lines);
        index=nindex;
      }
    }
 else     if (ISCHR(index,0,'C','c') && ISCHR(index,10,'S','s') && ISCHR(index,1,'O','o')&& ISCHR(index,2,'N','n')&& ISCHR(index,3,'S','s')&& ISCHR(index,4,'T','t')&& ISCHR(index,5,'R','r')&& ISCHR(index,6,'A','a')&& ISCHR(index,7,'I','i')&& ISCHR(index,8,'N','n')&& ISCHR(index,9,'T','t')&& !ISSTRING(index,10)) {
      index+=11;
      result.sections.add(result.lines);
      in_before_sections=false;
      in_section=true;
      in_after_sections=false;
      in_null_section=false;
      sindex=index;
      SKIPLN_S();
      SKIPWS_S((char)0,(char)0);
      result.lines+=SKIPWS((char)0,(char)0);
      if (index != sindex) {
        nindex=index;
        result.lines+=SKIPTOWS_N((char)0,true);
        StringBuilder anchor=new StringBuilder();
        for (int i=index; i < nindex; i++) {
          anchor.append(inArray[i]);
        }
        result.addAnchor(anchor.toString(),result.lines);
        index=nindex;
      }
    }
 else     if (ISCHR(index,0,'A','a') && ISCHR(index,13,'S','s') && ISCHR(index,1,'F','f')&& ISCHR(index,2,'T','t')&& ISCHR(index,3,'E','e')&& ISCHR(index,4,'R','r')&& ISCHR(index,5,'-','_')&& ISCHR(index,6,'S','s')&& ISCHR(index,7,'E','e')&& ISCHR(index,8,'C','c')&& ISCHR(index,9,'T','t')&& ISCHR(index,10,'I','i')&& ISCHR(index,11,'O','o')&& ISCHR(index,12,'N','n')&& !ISSTRING(index,13)) {
      index+=14;
      in_before_sections=false;
      in_section=false;
      in_after_sections=true;
      in_null_section=false;
      sindex=index;
      SKIPLN_S();
      SKIPWS_S((char)0,(char)0);
      result.lines+=SKIPWS((char)0,(char)0);
      if (index != sindex) {
        nindex=index;
        result.lines+=SKIPTOWS_N((char)0,true);
        StringBuilder anchor=new StringBuilder();
        for (int i=index; i < nindex; i++) {
          anchor.append(inArray[i]);
        }
        result.addAnchor(anchor.toString(),result.lines);
        index=nindex;
      }
    }
 else     if (ISCHR(index,0,'N','n') && ISCHR(index,11,'N','n') && ISCHR(index,1,'U','u')&& ISCHR(index,2,'L','l')&& ISCHR(index,3,'L','l')&& ISCHR(index,4,'-','_')&& ISCHR(index,5,'S','s')&& ISCHR(index,6,'E','e')&& ISCHR(index,7,'C','c')&& ISCHR(index,8,'T','t')&& ISCHR(index,9,'I','i')&& ISCHR(index,10,'O','o')&& !ISSTRING(index,11)) {
      index+=12;
      in_before_sections=false;
      in_section=false;
      in_after_sections=false;
      in_null_section=true;
      sindex=index;
      SKIPLN_S();
      SKIPWS_S((char)0,(char)0);
      result.lines+=SKIPWS((char)0,(char)0);
      if (index != sindex) {
        nindex=index;
        result.lines+=SKIPTOWS_N((char)0,true);
        StringBuilder anchor=new StringBuilder();
        for (int i=index; i < nindex; i++) {
          anchor.append(inArray[i]);
        }
        result.addAnchor(anchor.toString(),result.lines);
        index=nindex;
      }
    }
 else     if (ISCHR(index,0,'A','a') && ISCHR(index,5,'R','r') && ISCHR(index,1,'N','n')&& ISCHR(index,2,'C','c')&& ISCHR(index,3,'H','h')&& ISCHR(index,4,'O','o')&& !ISSTRING(index,5)) {
      index+=6;
      result.lines+=SKIPWS((char)0,(char)0);
      nindex=index;
      result.lines+=SKIPTOWS_N((char)0,true);
      StringBuilder anchor=new StringBuilder();
      for (int i=index; i < nindex; i++) {
        anchor.append(inArray[i]);
      }
      result.addAnchor(anchor.toString(),result.lines);
      index=nindex;
      result.lines+=SKIPWS(';',(char)0);
      if (inArray[index] != ';') {
        System.err.println("Error: missing closing ; on line " + result.lines);
        System.exit(1);
      }
    }
 else     if (ISCHR(index,0,'I','i') && ISCHR(index,6,'E','e') && ISCHR(index,1,'N','n')&& ISCHR(index,2,'C','c')&& ISCHR(index,3,'L','l')&& ISCHR(index,4,'U','u')&& ISCHR(index,5,'D','d')&& !ISSTRING(index,6)) {
      System.err.println("INCLUDE keyword not supported yet in this CG parser. Please paste the contents of the other files in directly");
      System.exit(1);
    }
 else     if (ISCHR(index,0,'I','i') && ISCHR(index,2,'F','f') && ISCHR(index,1,'F','f')&& !ISSTRING(index,2)) {
      parseRule(KEYWORDS.K_IFF);
    }
 else     if (ISCHR(index,0,'M','m') && ISCHR(index,2,'P','p') && ISCHR(index,1,'A','a')&& !ISSTRING(index,2)) {
      parseRule(KEYWORDS.K_MAP);
    }
 else     if (ISCHR(index,0,'A','a') && ISCHR(index,2,'D','d') && ISCHR(index,1,'D','d')&& !ISSTRING(index,2)) {
      parseRule(KEYWORDS.K_ADD);
    }
 else     if (ISCHR(index,0,'A','a') && ISCHR(index,5,'D','d') && ISCHR(index,1,'P','p')&& ISCHR(index,2,'P','p')&& ISCHR(index,3,'E','e')&& ISCHR(index,4,'N','n')&& !ISSTRING(index,5)) {
      parseRule(KEYWORDS.K_APPEND);
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,5,'T','t') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'L','l')&& ISCHR(index,3,'E','e')&& ISCHR(index,4,'C','c')&& !ISSTRING(index,5)) {
      parseRule(KEYWORDS.K_SELECT);
    }
 else     if (ISCHR(index,0,'R','r') && ISCHR(index,5,'E','e') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'M','m')&& ISCHR(index,3,'O','o')&& ISCHR(index,4,'V','v')&& !ISSTRING(index,5)) {
      parseRule(KEYWORDS.K_REMOVE);
    }
 else     if (ISCHR(index,0,'R','r') && ISCHR(index,6,'E','e') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'P','p')&& ISCHR(index,3,'L','l')&& ISCHR(index,4,'A','a')&& ISCHR(index,5,'C','c')&& !ISSTRING(index,6)) {
      parseRule(KEYWORDS.K_REPLACE);
    }
 else     if (ISCHR(index,0,'D','d') && ISCHR(index,6,'T','t') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'L','l')&& ISCHR(index,3,'I','i')&& ISCHR(index,4,'M','m')&& ISCHR(index,5,'I','i')&& !ISSTRING(index,6)) {
      parseRule(KEYWORDS.K_DELIMIT);
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,9,'E','e') && ISCHR(index,1,'U','u')&& ISCHR(index,2,'B','b')&& ISCHR(index,3,'S','s')&& ISCHR(index,4,'T','t')&& ISCHR(index,5,'I','i')&& ISCHR(index,6,'T','t')&& ISCHR(index,7,'U','u')&& ISCHR(index,8,'T','t')&& !ISSTRING(index,9)) {
      parseRule(KEYWORDS.K_SUBSTITUTE);
    }
 else     if (ISCHR(index,0,'C','c') && ISCHR(index,3,'Y','y') && ISCHR(index,1,'O','o')&& ISCHR(index,2,'P','p')&& !ISSTRING(index,3)) {
      parseRule(KEYWORDS.K_COPY);
    }
 else     if (ISCHR(index,0,'J','j') && ISCHR(index,3,'P','p') && ISCHR(index,1,'U','u')&& ISCHR(index,2,'M','m')&& !ISSTRING(index,3)) {
      parseRule(KEYWORDS.K_JUMP);
    }
 else     if (ISCHR(index,0,'M','m') && ISCHR(index,3,'E','e') && ISCHR(index,1,'O','o')&& ISCHR(index,2,'V','v')&& !ISSTRING(index,3)) {
      parseRule(KEYWORDS.K_MOVE);
    }
 else     if (ISCHR(index,0,'S','s') && ISCHR(index,5,'H','h') && ISCHR(index,1,'W','w')&& ISCHR(index,2,'I','i')&& ISCHR(index,3,'T','t')&& ISCHR(index,4,'C','c')&& !ISSTRING(index,5)) {
      parseRule(KEYWORDS.K_SWITCH);
    }
 else     if (ISCHR(index,0,'E','e') && ISCHR(index,6,'E','e') && ISCHR(index,1,'X','x')&& ISCHR(index,2,'E','e')&& ISCHR(index,3,'C','c')&& ISCHR(index,4,'U','u')&& ISCHR(index,5,'T','t')&& !ISSTRING(index,6)) {
      parseRule(KEYWORDS.K_EXECUTE);
    }
 else     if (ISCHR(index,0,'U','u') && ISCHR(index,4,'P','p') && ISCHR(index,1,'N','n')&& ISCHR(index,2,'M','m')&& ISCHR(index,3,'A','a')&& !ISSTRING(index,4)) {
      parseRule(KEYWORDS.K_UNMAP);
    }
 else     if (ISCHR(index,0,'T','t') && ISCHR(index,7,'E','e') && ISCHR(index,1,'E','e')&& ISCHR(index,2,'M','m')&& ISCHR(index,3,'P','p')&& ISCHR(index,4,'L','l')&& ISCHR(index,5,'A','a')&& ISCHR(index,6,'T','t')&& !ISSTRING(index,7)) {
      System.err.println("Templates not supported yet in this CG parser. Sorry.");
      System.exit(1);
    }
 else     if (ISCHR(index,0,'P','p') && ISCHR(index,10,'S','s') && ISCHR(index,1,'A','a')&& ISCHR(index,2,'R','r')&& ISCHR(index,3,'E','e')&& ISCHR(index,4,'N','n')&& ISCHR(index,5,'T','t')&& ISCHR(index,6,'H','h')&& ISCHR(index,7,'E','e')&& ISCHR(index,8,'S','s')&& ISCHR(index,9,'E','e')&& !ISSTRING(index,10)) {
      index+=11;
      result.lines+=SKIPWS('=',(char)0);
      if (inArray[index] != '=') {
        System.err.println("Error: encountered a problem before the expected = on line " + result.lines);
        System.exit(1);
      }
      ++index;
      result.lines+=SKIPWS((char)0,(char)0);
      while (notDone() && inArray[index] != ';') {
        CgTag left=null;
        CgTag right=null;
        nindex=index;
        result.lines+=SKIPTOWS_N('(',true);
        if (inArray[nindex] != '(') {
          System.err.println("Error encountered " + inArray[nindex] + " before the expected ) on line "+ result.lines);
          System.exit(1);
        }
        nindex++;
        result.lines+=SKIPWS_N((char)0,(char)0);
        index=nindex;
        if (inArray[nindex] == '"') {
          nindex++;
          result.lines+=SKIPTO_NOSPAN_N('"');
          if (inArray[nindex] != '"') {
            System.err.println("Error: missing closing \" on line " + result.lines);
            System.exit(1);
          }
        }
        result.lines+=SKIPTOWS_N(')',true);
        StringBuilder parens=new StringBuilder();
        for (int i=index; i < nindex; i++) {
          parens.append(inArray[i]);
        }
        left=result.allocateTag(parens.toString(),false);
        result.lines+=SKIPWS_N((char)0,(char)0);
        index=nindex;
        if (inArray[index] == ')') {
          System.err.println("Error: encountered ) before the expected Right tag on line " + result.lines);
          System.exit(1);
        }
        if (inArray[nindex] == '"') {
          nindex++;
          result.lines+=SKIPTO_NOSPAN_N('"');
          if (inArray[nindex] != '"') {
            System.err.println("Missing closing \" on line " + result.lines);
            System.exit(1);
          }
        }
        result.lines+=SKIPTOWS_N(')',true);
        StringBuilder parens2=new StringBuilder();
        for (int i=index; i < nindex; i++) {
          parens2.append(inArray[i]);
        }
        right=result.allocateTag(parens2.toString(),false);
        result.lines+=SKIPWS_N((char)0,(char)0);
        index=nindex;
        if (inArray[index] != ')') {
          System.err.println("Error: encounted " + inArray[index] + " before expected ) on line "+ result.lines);
          System.exit(1);
        }
        ++index;
        result.lines+=SKIPWS((char)0,(char)0);
        if (left != null && right != null) {
          result.parentheses.put(left.hash,right.hash);
          result.parentheses_reverse.put(right.hash,left.hash);
        }
      }
      if (result.parentheses.isEmpty()) {
        System.out.println("Error: parentheses declared, but no definitions given on line " + result.lines);
        System.exit(1);
      }
      result.lines+=SKIPWS(';',(char)0);
      if (inArray[index] != ';') {
        System.err.println("Error: missing closing ; on line " + result.lines);
        System.exit(1);
      }
    }
 else     if (ISCHR(index,0,'E','e') && ISCHR(index,2,'D','d') && ISCHR(index,1,'N','n')) {
      if (ISNL(index - 1) || ISSPACE(index - 1)) {
        if (inArray[index + 3] == (char)0 || ISNL(index + 3) || ISSPACE(index + 3)) {
          break;
        }
      }
      ++index;
    }
 else {
      if (inArray[index] == ';' || inArray[index] == '"') {
        if (inArray[index] == '"') {
          ++index;
          result.lines+=SKIPTO_NOSPAN_P('"');
          if (inArray[index] != '"') {
            System.err.println("Error: Missing closing \" on line " + result.lines);
            System.exit(1);
          }
        }
        result.lines+=SKIPTOWS_P((char)0,false);
      }
      if (notDone() && inArray[index] != ';' && inArray[index] != '"' && !ISNL(index) && !ISSPACE(index)) {
        System.err.println("Error: garbage data on line " + result.lines + "; I'm not really sure what's going on here");
        System.exit(1);
      }
      if (ISNL(index)) {
        result.lines+=1;
      }
      ++index;
    }
  }
  return 0;
}
