{
  boolean oneTime=false;
  if (!"-".equals(filename)) {
    final File file=new File(filename);
    oneTime=file.length() < MAXFILESIZE;
  }
  if (oneTime) {
    final String text=getFilteredText(filename,encoding);
    if (applySuggestions) {
      System.out.print(Tools.correctText(text,lt));
    }
 else     if (profileRules) {
      Tools.profileRulesOnText(text,lt);
    }
 else     if (!taggerOnly) {
      Tools.checkText(text,lt,apiFormat,0);
    }
 else {
      Tools.tagText(text,lt);
    }
    if (listUnknownWords) {
      System.out.println("Unknown words: " + lt.getUnknownWords());
    }
  }
 else {
    if (verbose) {
      lt.setOutput(System.err);
    }
    if (!apiFormat && !applySuggestions) {
      if (!"-".equals(filename)) {
        System.out.println("Working on " + filename + "...");
      }
 else {
        System.out.println("Working on STDIN...");
      }
    }
    int runCount=1;
    List<Rule> rules=lt.getAllRules();
    if (profileRules) {
      for (      Rule rule : rules) {
        lt.disableRule(rule.getId());
      }
      System.out.printf("Testing %d rules\n",rules.size());
      System.out.println("Rule ID\tTime\tSentences\tMatches\tSentences per sec.");
      runCount=rules.size();
    }
    InputStreamReader isr=null;
    BufferedReader br=null;
    int lineOffset=0;
    List<String> unknownWords=new ArrayList<String>();
    StringBuilder sb=new StringBuilder();
    for (int ruleIndex=0; ruleIndex < runCount; ruleIndex++) {
      int matches=0;
      long sentences=0;
      final long startTime=System.currentTimeMillis();
      if (profileRules) {
        if (ruleIndex > 0) {
          lt.disableRule(rules.get(ruleIndex - 1).getId());
        }
        lt.enableRule(rules.get(ruleIndex).getId());
      }
      try {
        if (!"-".equals(filename)) {
          final File file=new File(filename);
          if (encoding != null) {
            isr=new InputStreamReader(new BufferedInputStream(new FileInputStream(file.getAbsolutePath())),encoding);
          }
 else {
            isr=new InputStreamReader(new BufferedInputStream(new FileInputStream(file.getAbsolutePath())));
          }
        }
 else {
          if (encoding != null) {
            isr=new InputStreamReader(new BufferedInputStream(System.in),encoding);
          }
 else {
            isr=new InputStreamReader(new BufferedInputStream(System.in));
          }
        }
        br=new BufferedReader(isr);
        String line;
        while ((line=br.readLine()) != null) {
          sb.append(line);
          sb.append("\n");
          if (lt.getLanguage().getSentenceTokenizer().singleLineBreaksMarksPara()) {
            matches=handleLine(matches,lineOffset,sb);
            sentences+=lt.getSentenceCount();
            if (listUnknownWords && !taggerOnly) {
              for (              String word : lt.getUnknownWords())               if (!unknownWords.contains(word)) {
                unknownWords.add(word);
              }
            }
            sb=new StringBuilder();
          }
 else {
            if ("".equals(line) || sb.length() >= MAXFILESIZE) {
              matches=handleLine(matches,lineOffset,sb);
              sentences+=lt.getSentenceCount();
              if (listUnknownWords && !taggerOnly) {
                for (                String word : lt.getUnknownWords())                 if (!unknownWords.contains(word)) {
                  unknownWords.add(word);
                }
              }
              sb=new StringBuilder();
            }
          }
          lineOffset++;
        }
      }
  finally {
        if (sb.length() > 0) {
          matches=handleLine(matches,lineOffset - 1,sb);
          sentences+=lt.getSentenceCount();
          if (listUnknownWords && !taggerOnly) {
            for (            String word : lt.getUnknownWords())             if (!unknownWords.contains(word)) {
              unknownWords.add(word);
            }
          }
        }
        if (!applySuggestions) {
          final long endTime=System.currentTimeMillis();
          final long time=endTime - startTime;
          final float timeInSeconds=time / 1000.0f;
          final float sentencesPerSecond=sentences / timeInSeconds;
          if (apiFormat) {
            System.out.println("<!--");
          }
          if (profileRules) {
            System.out.printf(Locale.ENGLISH,"%s\t%d\t%d\t%d\t%.1f",rules.get(ruleIndex).getId(),time,sentences,matches,sentencesPerSecond);
            System.out.println();
          }
 else {
            System.out.printf(Locale.ENGLISH,"Time: %dms for %d sentences (%.1f sentences/sec)",time,sentences,sentencesPerSecond);
            System.out.println();
          }
          if (listUnknownWords) {
            Collections.sort(unknownWords);
            System.out.println("Unknown words: " + unknownWords);
          }
          if (apiFormat) {
            System.out.println("-->");
          }
        }
        if (br != null) {
          br.close();
        }
        if (isr != null) {
          isr.close();
        }
      }
    }
  }
}
