{
  boolean oneTime=false;
  if (!"-".equals(filename)) {
    final File file=new File(filename);
    oneTime=file.length() < MAXFILESIZE;
  }
  if (oneTime) {
    final String text=getFilteredText(filename,encoding);
    if (!taggerOnly) {
      Tools.checkText(text,lt,apiFormat,0);
    }
 else {
      Tools.tagText(text,lt);
    }
    if (listUnknownWords) {
      System.out.println("Unknown words: " + lt.getUnknownWords());
    }
  }
 else {
    if (verbose) {
      lt.setOutput(System.err);
    }
    if (!apiFormat) {
      if (!"-".equals(filename)) {
        System.out.println("Working on " + filename + "... in a line mode");
      }
 else {
        System.out.println("Working on STDIN in a line mode.");
      }
    }
    InputStreamReader isr=null;
    BufferedReader br=null;
    int lineOffset=0;
    int matches=0;
    long sentences=0;
    List<String> unknownWords=new ArrayList<String>();
    StringBuffer sb=new StringBuffer();
    final long startTime=System.currentTimeMillis();
    try {
      if (!"-".equals(filename)) {
        final File file=new File(filename);
        if (encoding != null) {
          isr=new InputStreamReader(new BufferedInputStream(new FileInputStream(file.getAbsolutePath())),encoding);
        }
 else {
          isr=new InputStreamReader(new BufferedInputStream(new FileInputStream(file.getAbsolutePath())));
        }
      }
 else {
        if (encoding != null) {
          isr=new InputStreamReader(new BufferedInputStream(System.in),encoding);
        }
 else {
          isr=new InputStreamReader(new BufferedInputStream(System.in));
        }
      }
      br=new BufferedReader(isr);
      String line;
      while ((line=br.readLine()) != null) {
        sb.append(line);
        sb.append("\n");
        if (!taggerOnly) {
          if (matches == 0) {
            matches+=Tools.checkText(StringTools.filterXML(sb.toString()),lt,apiFormat,-1,lineOffset,matches,StringTools.XmlPrintMode.START_XML);
          }
 else {
            matches+=Tools.checkText(StringTools.filterXML(sb.toString()),lt,apiFormat,-1,lineOffset,matches,StringTools.XmlPrintMode.CONTINUE_XML);
          }
          sentences+=lt.getSentenceCount();
        }
 else {
          Tools.tagText(StringTools.filterXML(sb.toString()),lt);
        }
        if (listUnknownWords && !taggerOnly) {
          for (          String word : lt.getUnknownWords())           if (!unknownWords.contains(word)) {
            unknownWords.add(word);
          }
        }
        sb=new StringBuffer();
        lineOffset++;
      }
    }
  finally {
      final long endTime=System.currentTimeMillis();
      final long time=endTime - startTime;
      final float timeInSeconds=time / 1000.0f;
      final float sentencesPerSecond=sentences / timeInSeconds;
      if (apiFormat) {
        System.out.println("<!--");
      }
      System.out.printf(Locale.ENGLISH,"Time: %dms for %d sentences (%.1f sentences/sec)",time,sentences,sentencesPerSecond);
      System.out.println();
      if (listUnknownWords) {
        Collections.sort(unknownWords);
        System.out.println("Unknown words: " + unknownWords);
      }
      if (apiFormat) {
        System.out.println("-->");
      }
      if (br != null) {
        br.close();
      }
      if (isr != null) {
        isr.close();
      }
    }
  }
}
