{
  if (args.length < 1 || args.length > 8) {
    exitWithUsageMessage();
  }
  boolean verbose=false;
  boolean recursive=false;
  boolean singleLineBreakMarksParagraph=false;
  Language language=null;
  Language motherTongue=null;
  String encoding=null;
  String filename=null;
  String[] disabledRules=new String[0];
  String[] enabledRules=new String[0];
  for (int i=0; i < args.length; i++) {
    if (args[i].equals("-h") || args[i].equals("-help") || args[i].equals("--help")) {
      exitWithUsageMessage();
    }
 else     if (args[i].equals("-v") || args[i].equals("--verbose")) {
      verbose=true;
    }
 else     if (args[i].equals("-r") || args[i].equals("--recursive")) {
      recursive=true;
    }
 else     if (args[i].equals("-d") || args[i].equals("--disable")) {
      if (enabledRules.length > 0)       throw new IllegalArgumentException("You cannot specifiy both enabled and disabled rules");
      String rules=args[++i];
      disabledRules=rules.split(",");
    }
 else     if (args[i].equals("-e") || args[i].equals("--enable")) {
      if (disabledRules.length > 0)       throw new IllegalArgumentException("You cannot specifiy both enabled and disabled rules");
      String rules=args[++i];
      enabledRules=rules.split(",");
    }
 else     if (args[i].equals("-l") || args[i].equals("--language")) {
      language=getLanguageOrExit(args[++i]);
    }
 else     if (args[i].equals("-m") || args[i].equals("--mothertongue")) {
      motherTongue=getLanguageOrExit(args[++i]);
    }
 else     if (args[i].equals("-c") || args[i].equals("--encoding")) {
      encoding=args[++i];
    }
 else     if (args[i].equals("-b")) {
      singleLineBreakMarksParagraph=true;
    }
 else     if (i == args.length - 1) {
      filename=args[i];
    }
 else {
      System.err.println("Unknown option: " + args[i]);
      exitWithUsageMessage();
    }
  }
  if (filename == null) {
    exitWithUsageMessage();
  }
  if (language == null) {
    System.err.println("No language specified, using English");
    language=Language.ENGLISH;
  }
 else {
    System.out.println("Expected text language: " + language.getName());
  }
  language.getSentenceTokenizer().setSingleLineBreaksMarksParagraph(singleLineBreakMarksParagraph);
  Main prg=new Main(verbose,language,motherTongue,disabledRules,enabledRules);
  if (recursive) {
    prg.runRecursive(filename,encoding);
  }
 else {
    String text=prg.getFilteredText(filename,encoding);
    Tools.checkText(text,prg.getJLanguageTool());
  }
}
