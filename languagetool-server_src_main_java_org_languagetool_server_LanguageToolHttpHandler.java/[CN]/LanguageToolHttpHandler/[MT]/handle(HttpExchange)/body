{
synchronized (this) {
    handleCount++;
  }
  String text=null;
  try {
    final URI requestedUri=httpExchange.getRequestURI();
    final String origAddress=httpExchange.getRemoteAddress().getAddress().getHostAddress();
    final String realAddressOrNull=getRealRemoteAddressOrNull(httpExchange);
    final String remoteAddress=realAddressOrNull != null ? realAddressOrNull : origAddress;
    final Map<String,String> parameters=getRequestQuery(httpExchange,requestedUri);
    if (requestLimiter != null && !requestLimiter.isAccessOkay(remoteAddress)) {
      final String errorMessage="Error: Access from " + StringTools.escapeXML(remoteAddress) + " denied - too many requests. Allowed maximum requests: "+ requestLimiter.getRequestLimit()+ " requests per "+ requestLimiter.getRequestLimitPeriodInSeconds()+ " seconds";
      sendError(httpExchange,HttpURLConnection.HTTP_FORBIDDEN,errorMessage);
      print(errorMessage);
      return;
    }
    if (allowedIps == null || allowedIps.contains(origAddress)) {
      if (requestedUri.getRawPath().endsWith("/Languages")) {
        printListOfLanguages(httpExchange);
      }
 else {
        if (afterTheDeadlineMode) {
          text=parameters.get("data");
          if (text == null) {
            throw new IllegalArgumentException("Missing 'data' parameter");
          }
          text=text.replaceAll("</p>","\n\n").replaceAll("<.*?>","");
        }
 else {
          text=parameters.get("text");
          if (text == null) {
            throw new IllegalArgumentException("Missing 'text' parameter");
          }
        }
        checkText(text,httpExchange,parameters);
      }
    }
 else {
      final String errorMessage="Error: Access from " + StringTools.escapeXML(origAddress) + " denied";
      sendError(httpExchange,HttpURLConnection.HTTP_FORBIDDEN,errorMessage);
      throw new RuntimeException(errorMessage);
    }
  }
 catch (  Exception e) {
    print("An error has occurred. Stacktrace follows:",System.err);
    if (verbose && text != null) {
      print("Exception was caused by this text (" + text.length() + " chars, showing up to 500):\n"+ StringUtils.abbreviate(text,500),System.err);
    }
    e.printStackTrace();
    String response;
    if (e instanceof TextTooLongException) {
      response=e.getMessage();
    }
 else     if (e.getCause() != null && e.getCause() instanceof TimeoutException) {
      response="Checking took longer than " + maxCheckTimeMillis / 1000 + " seconds, which is this server's limit. " + "Please make sure you have selected the proper language or consider submitting a shorter text.";
    }
 else {
      response=Tools.getFullStackTrace(e);
    }
    sendError(httpExchange,HttpURLConnection.HTTP_INTERNAL_ERROR,"Error: " + response);
  }
 finally {
synchronized (this) {
      handleCount--;
    }
    httpExchange.close();
  }
}
