{
synchronized (this) {
    handleCount++;
  }
  String text=null;
  String remoteAddress=null;
  try {
    URI requestedUri=httpExchange.getRequestURI();
    String origAddress=httpExchange.getRemoteAddress().getAddress().getHostAddress();
    String realAddressOrNull=getRealRemoteAddressOrNull(httpExchange);
    remoteAddress=realAddressOrNull != null ? realAddressOrNull : origAddress;
    Map<String,String> parameters=getRequestQuery(httpExchange,requestedUri);
    if (requestLimiter != null && !requestLimiter.isAccessOkay(remoteAddress)) {
      String errorMessage="Error: Access from " + remoteAddress + " denied - too many requests."+ " Allowed maximum requests: "+ requestLimiter.getRequestLimit()+ " requests per "+ requestLimiter.getRequestLimitPeriodInSeconds()+ " seconds";
      sendError(httpExchange,HttpURLConnection.HTTP_FORBIDDEN,errorMessage);
      print(errorMessage + " - useragent: " + parameters.get("useragent")+ " - HTTP UserAgent: "+ getHttpUserAgent(httpExchange));
      return;
    }
    if (maxWorkQueueSize != 0 && workQueue.size() > maxWorkQueueSize) {
      String response="Error: There are currently too many parallel requests. Please try again later.";
      print(response + " Queue size: " + workQueue.size()+ ", maximum size: "+ maxWorkQueueSize);
      sendError(httpExchange,HttpURLConnection.HTTP_UNAVAILABLE,"Error: " + response);
      return;
    }
    if (allowedIps == null || allowedIps.contains(origAddress)) {
      if (requestedUri.getRawPath().endsWith("/Languages")) {
        printListOfLanguages(httpExchange);
      }
 else {
        if (afterTheDeadlineMode) {
          text=parameters.get("data");
          if (text == null) {
            throw new IllegalArgumentException("Missing 'data' parameter");
          }
          text=text.replaceAll("</p>","\n\n").replaceAll("<.*?>","");
        }
 else {
          text=parameters.get("text");
          if (text == null) {
            throw new IllegalArgumentException("Missing 'text' parameter");
          }
        }
        checkText(text,httpExchange,parameters);
      }
    }
 else {
      String errorMessage="Error: Access from " + StringTools.escapeXML(origAddress) + " denied";
      sendError(httpExchange,HttpURLConnection.HTTP_FORBIDDEN,errorMessage);
      throw new RuntimeException(errorMessage);
    }
  }
 catch (  Exception e) {
    String response;
    int errorCode;
    if (e instanceof TextTooLongException) {
      errorCode=HttpURLConnection.HTTP_ENTITY_TOO_LARGE;
      response=e.getMessage();
    }
 else     if (e instanceof IllegalArgumentException) {
      errorCode=HttpURLConnection.HTTP_BAD_REQUEST;
      response=e.getMessage();
    }
 else     if (e.getCause() != null && e.getCause() instanceof TimeoutException) {
      errorCode=HttpURLConnection.HTTP_UNAVAILABLE;
      response="Checking took longer than " + maxCheckTimeMillis / 1000 + " seconds, which is this server's limit. " + "Please make sure you have selected the proper language or consider submitting a shorter text.";
    }
 else {
      response=Tools.getFullStackTrace(e);
      errorCode=HttpURLConnection.HTTP_INTERNAL_ERROR;
    }
    logError(text,remoteAddress,e,errorCode,httpExchange);
    sendError(httpExchange,errorCode,"Error: " + response);
  }
 finally {
synchronized (this) {
      handleCount--;
    }
    httpExchange.close();
  }
}
