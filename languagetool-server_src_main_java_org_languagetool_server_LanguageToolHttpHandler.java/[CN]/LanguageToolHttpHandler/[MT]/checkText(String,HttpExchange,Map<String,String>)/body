{
  final long timeStart=System.currentTimeMillis();
  if (text.length() > maxTextLength) {
    throw new IllegalArgumentException("Text is " + text.length() + " characters long, exceeding maximum length of "+ maxTextLength);
  }
  final String langParam=parameters.get("language");
  final String autodetectParam=parameters.get("autodetect");
  if (langParam == null && (autodetectParam == null || !autodetectParam.equals("1"))) {
    throw new IllegalArgumentException("Missing 'language' parameter. Specify language or use autodetect=1 for auto-detecting the language of the input text.");
  }
  final Language lang;
  if (autodetectParam != null && autodetectParam.equals("1")) {
    lang=detectLanguageOfString(text,langParam);
    print("Auto-detected language: " + lang.getShortNameWithCountryAndVariant());
  }
 else {
    lang=Language.getLanguageForShortName(langParam);
  }
  final String motherTongueParam=parameters.get("motherTongue");
  Language motherTongue=null;
  if (motherTongueParam != null) {
    motherTongue=Language.getLanguageForShortName(motherTongueParam);
  }
  final String enabledParam=parameters.get("enabled");
  final List<String> enabledRules=new ArrayList<>();
  if (enabledParam != null) {
    enabledRules.addAll(Arrays.asList(enabledParam.split(",")));
  }
  boolean useEnabledOnly=false;
  final String enabledOnlyParam=parameters.get("enabledOnly");
  if (enabledOnlyParam != null) {
    useEnabledOnly=enabledOnlyParam.equals("yes");
  }
  final String disabledParam=parameters.get("disabled");
  final List<String> disabledRules=new ArrayList<>();
  if (disabledParam != null) {
    disabledRules.addAll(Arrays.asList(disabledParam.split(",")));
  }
  if (disabledRules.size() > 0 && useEnabledOnly) {
    throw new IllegalArgumentException("You cannot specify disabled rules using enabledOnly=yes");
  }
  final boolean useQuerySettings=enabledRules.size() > 0 || disabledRules.size() > 0;
  final QueryParams params=new QueryParams(enabledRules,disabledRules,useEnabledOnly,useQuerySettings);
  final List<RuleMatch> matches;
  final String sourceText=parameters.get("srctext");
  if (sourceText == null) {
    final JLanguageTool lt=getLanguageToolInstance(lang,motherTongue,params);
    matches=lt.check(text);
  }
 else {
    if (motherTongueParam == null) {
      throw new IllegalArgumentException("Missing 'motherTongue' for bilingual checks");
    }
    print("Checking bilingual text, with source length " + sourceText.length() + " and target length "+ text.length()+ " (characters), source language "+ motherTongue+ " and target language "+ langParam);
    final JLanguageTool sourceLt=getLanguageToolInstance(motherTongue,null,params);
    final JLanguageTool targetLt=getLanguageToolInstance(lang,null,params);
    final List<BitextRule> bRules=Tools.getBitextRules(motherTongue,lang);
    matches=Tools.checkBitext(sourceText,text,sourceLt,targetLt,bRules);
  }
  setCommonHeaders(httpExchange);
  final String response=StringTools.ruleMatchesToXML(matches,text,CONTEXT_SIZE,StringTools.XmlPrintMode.NORMAL_XML,lang,motherTongue);
  httpExchange.sendResponseHeaders(HttpURLConnection.HTTP_OK,response.getBytes(ENCODING).length);
  httpExchange.getResponseBody().write(response.getBytes(ENCODING));
  String languageMessage=lang.getShortNameWithCountryAndVariant();
  if (motherTongue != null) {
    languageMessage+=" (mother tongue: " + motherTongue.getShortNameWithCountryAndVariant() + ")";
  }
  final String referrer=httpExchange.getRequestHeaders().getFirst("Referer");
  print("Check done: " + text.length() + " chars, "+ languageMessage+ ", "+ referrer+ ", "+ "handlers:"+ handleCount+ ", "+ matches.size()+ " matches, "+ (System.currentTimeMillis() - timeStart)+ "ms");
}
