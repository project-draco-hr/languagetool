{
  final long timeStart=System.currentTimeMillis();
  if (text.length() > maxTextLength) {
    throw new IllegalArgumentException("Text is " + text.length() + " characters long, exceeding maximum length of "+ maxTextLength);
  }
  final String langParam=parameters.get("language");
  final String autodetectParam=parameters.get("autodetect");
  if (langParam == null && (autodetectParam == null || !autodetectParam.equals("1"))) {
    throw new IllegalArgumentException("Missing 'language' parameter. Specify language or use autodetect=1 for auto-detecting the language of the input text.");
  }
  final Language lang;
  if (autodetectParam != null && autodetectParam.equals("1")) {
    lang=detectLanguageOfString(text,langParam);
    print("Auto-detected language: " + lang.getShortNameWithCountryAndVariant());
  }
 else {
    lang=Language.getLanguageForShortName(langParam);
  }
  final String motherTongueParam=parameters.get("motherTongue");
  final Language motherTongue=motherTongueParam != null ? Language.getLanguageForShortName(motherTongueParam) : null;
  final boolean useEnabledOnly="yes".equals(parameters.get("enabledOnly"));
  final String enabledParam=parameters.get("enabled");
  final List<String> enabledRules=new ArrayList<>();
  if (enabledParam != null) {
    enabledRules.addAll(Arrays.asList(enabledParam.split(",")));
  }
  final String disabledParam=parameters.get("disabled");
  final List<String> disabledRules=new ArrayList<>();
  if (disabledParam != null) {
    disabledRules.addAll(Arrays.asList(disabledParam.split(",")));
  }
  if (disabledRules.size() > 0 && useEnabledOnly) {
    throw new IllegalArgumentException("You cannot specify disabled rules using enabledOnly=yes");
  }
  final boolean useQuerySettings=enabledRules.size() > 0 || disabledRules.size() > 0;
  final QueryParams params=new QueryParams(enabledRules,disabledRules,useEnabledOnly,useQuerySettings);
  final Future<List<RuleMatch>> future=executorService.submit(new Callable<List<RuleMatch>>(){
    @Override public List<RuleMatch> call() throws Exception {
      return getRuleMatches(text,parameters,lang,motherTongue,params);
    }
  }
);
  final List<RuleMatch> matches;
  if (maxCheckTimeMillis < 0) {
    matches=future.get();
  }
 else {
    try {
      matches=future.get(maxCheckTimeMillis,TimeUnit.MILLISECONDS);
    }
 catch (    TimeoutException e) {
      throw new RuntimeException("Text checking took longer than allowed maximum of " + maxCheckTimeMillis + " milliseconds (handleCount: "+ handleCount+ ", language: "+ lang.getShortNameWithCountryAndVariant()+ ", "+ text.length()+ " characters of text)",e);
    }
  }
  setCommonHeaders(httpExchange);
  final RuleAsXmlSerializer serializer=new RuleAsXmlSerializer();
  final String xmlResponse=serializer.ruleMatchesToXml(matches,text,CONTEXT_SIZE,lang,motherTongue);
  String messageSent="sent";
  String languageMessage=lang.getShortNameWithCountryAndVariant();
  final String referrer=httpExchange.getRequestHeaders().getFirst("Referer");
  try {
    httpExchange.sendResponseHeaders(HttpURLConnection.HTTP_OK,xmlResponse.getBytes(ENCODING).length);
    httpExchange.getResponseBody().write(xmlResponse.getBytes(ENCODING));
    if (motherTongue != null) {
      languageMessage+=" (mother tongue: " + motherTongue.getShortNameWithCountryAndVariant() + ")";
    }
  }
 catch (  IOException exception) {
    messageSent="notSent: " + exception.getMessage();
  }
  print("Check done: " + text.length() + " chars, "+ languageMessage+ ", "+ referrer+ ", "+ "handlers:"+ handleCount+ ", "+ matches.size()+ " matches, "+ (System.currentTimeMillis() - timeStart)+ "ms"+ ", "+ messageSent);
}
