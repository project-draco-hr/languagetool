{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  final int[] tokenPositions=new int[tokens.length + 1];
  final int patternSize=patternElements.size();
  final int limit=Math.max(0,tokens.length - patternSize + 1);
  Element elem=null;
  int i=0;
  while (i < limit && !(sentStart && i > 0)) {
    boolean allElementsMatch=false;
    int firstMatchToken=-1;
    int lastMatchToken=-1;
    int matchingTokens=0;
    int prevSkipNext=0;
    int skipShiftTotal=0;
    if (testUnification) {
      unifier.reset();
    }
    for (int k=0; k < patternSize; k++) {
      final Element prevElement=elem;
      elem=patternElements.get(k);
      setupRef(firstMatchToken,elem,tokens);
      final int nextPos=i + k + skipShiftTotal;
      prevMatched=false;
      if (prevSkipNext + nextPos >= tokens.length || prevSkipNext < 0) {
        prevSkipNext=tokens.length - (nextPos + 1);
      }
      final int maxTok=Math.min(nextPos + prevSkipNext,tokens.length - (patternSize - k));
      for (int m=nextPos; m <= maxTok; m++) {
        allElementsMatch=!tokens[m].isImmunized() && testAllReadings(tokens,elem,prevElement,m,firstMatchToken,prevSkipNext);
        if (allElementsMatch) {
          lastMatchToken=m;
          final int skipShift=lastMatchToken - nextPos;
          tokenPositions[matchingTokens]=skipShift + 1;
          prevSkipNext=translateElementNo(elem.getSkipNext());
          matchingTokens++;
          skipShiftTotal+=skipShift;
          if (firstMatchToken == -1) {
            firstMatchToken=lastMatchToken;
          }
          break;
        }
      }
      if (!allElementsMatch) {
        break;
      }
    }
    if (allElementsMatch && matchingTokens == patternSize) {
      final RuleMatch ruleMatch=createRuleMatch(tokenPositions,tokens,firstMatchToken,lastMatchToken,matchingTokens);
      if (ruleMatch != null) {
        ruleMatches.add(ruleMatch);
      }
    }
    i++;
  }
  return ruleMatches.toArray(new RuleMatch[ruleMatches.size()]);
}
