{
  Pattern pPronomBuscat=null;
  if (matchPostagRegexp(tokens[i],VERB_INDSUBJ)) {
    pPronomBuscat=pronomPattern(tokens[i]);
    if (pPronomBuscat != null) {
      int j=1;
      boolean keepCounting=true;
      while (i - j > 0 && j < 4 && keepCounting) {
        if (matchPostagRegexp(tokens[i - j],pPronomBuscat) && matchRegexp(tokens[i - j].getToken(),REFLEXIU_ANTEPOSAT))         return true;
        keepCounting=matchPostagRegexp(tokens[i - j],PRONOM_FEBLE);
        j++;
      }
    }
  }
  if (matchPostagRegexp(tokens[i],VERB_IMP)) {
    pPronomBuscat=pronomPattern(tokens[i]);
    if (pPronomBuscat != null) {
      if (i + 1 < tokens.length && matchPostagRegexp(tokens[i + 1],pPronomBuscat) && matchRegexp(tokens[i + 1].getToken(),REFLEXIU_POSPOSAT))       return true;
    }
  }
  if (matchPostagRegexp(tokens[i],VERB_PARTICIPI)) {
    if (matchLemmaRegexp(tokens[i - 1],VERB_HAVER)) {
      if (matchPostagRegexp(tokens[i - 1],VERB_INDSUBJ)) {
        pPronomBuscat=pronomPattern(tokens[i - 1]);
        if (pPronomBuscat != null) {
          int j=2;
          boolean keepCounting=true;
          while (i - j > 0 && j < 5 && keepCounting) {
            if (matchPostagRegexp(tokens[i - j],pPronomBuscat) && matchRegexp(tokens[i - j].getToken(),REFLEXIU_ANTEPOSAT))             return true;
            keepCounting=matchPostagRegexp(tokens[i - j],PRONOM_FEBLE);
            j++;
          }
        }
      }
 else       if (matchPostagRegexp(tokens[i - 1],VERB_INF) && matchPostagRegexp(tokens[i - 2],VERB_INDSUBJ)) {
        pPronomBuscat=pronomPattern(tokens[i - 2]);
        if (pPronomBuscat != null) {
          int j=3;
          boolean keepCounting=true;
          while (i - j > 0 && j < 5 && keepCounting) {
            if (matchPostagRegexp(tokens[i - j],pPronomBuscat) && matchRegexp(tokens[i - j].getToken(),REFLEXIU_ANTEPOSAT))             return true;
            keepCounting=matchPostagRegexp(tokens[i - j],PRONOM_FEBLE);
            j++;
          }
        }
      }
    }
  }
  if (matchPostagRegexp(tokens[i],VERB_INFGER)) {
    int k=1;
    boolean keepCounting=true;
    boolean foundVerb=false;
    while (i - k > 0 && keepCounting && !foundVerb) {
      foundVerb=matchPostagRegexp(tokens[i - k],VERB_INDSUBJIMP);
      keepCounting=matchPostagRegexp(tokens[i - k],PREP_VERB_PRONOM);
      if (matchPostagRegexp(tokens[i - k],VERB_INDSUBJ) && matchPostagRegexp(tokens[i - k + 1],VERB_INFGER))       keepCounting=false;
      k++;
    }
    if (foundVerb) {
      pPronomBuscat=pronomPattern(tokens[i - k + 1]);
      if (pPronomBuscat != null) {
        if (i + 1 < tokens.length && matchPostagRegexp(tokens[i + 1],pPronomBuscat) && matchRegexp(tokens[i + 1].getToken(),REFLEXIU_POSPOSAT))         return true;
        int j=1;
        keepCounting=true;
        while (i - j > 0 && keepCounting) {
          if (j == 1 && matchPostagRegexp(tokens[i - j],pPronomBuscat))           return true;
          if (j > 1 && matchPostagRegexp(tokens[i - j],pPronomBuscat) && matchRegexp(tokens[i - j].getToken(),REFLEXIU_ANTEPOSAT))           return true;
          keepCounting=matchPostagRegexp(tokens[i - j],PREP_VERB_PRONOM) && !(j > k - 1 && matchPostagRegexp(tokens[i - j],VERB_PARTICIPI)) && !matchPostagRegexp(tokens[i - j],TRENCA_COMPTE2);
          if (tokens[i - j].getToken().equalsIgnoreCase("per") && tokens[i - j + 1].getToken().equalsIgnoreCase("a"))           keepCounting=false;
          j++;
        }
      }
    }
 else {
      if (i + 1 < tokens.length && matchPostagRegexp(tokens[i + 1],PRONOM_REFLEXIU) && matchRegexp(tokens[i + 1].getToken(),REFLEXIU_POSPOSAT))       return true;
      int j=1;
      keepCounting=true;
      while (i - j > 0 && keepCounting) {
        if (matchPostagRegexp(tokens[i - j],PRONOM_REFLEXIU))         return true;
        keepCounting=matchPostagRegexp(tokens[i - j],PREP_VERB_PRONOM);
        if (tokens[i - j].getToken().equalsIgnoreCase("per") && tokens[i - j + 1].getToken().equalsIgnoreCase("a")) {
          keepCounting=false;
        }
        j++;
      }
    }
  }
  return false;
}
