{
  final Properties props=new Properties();
  if (disabledRuleIds == null) {
    props.setProperty(DISABLED_RULES_CONFIG_KEY,"");
  }
 else {
    final StringBuilder sb=new StringBuilder();
    for (final Iterator<String> iter=disabledRuleIds.iterator(); iter.hasNext(); ) {
      final String id=iter.next();
      sb.append(id);
      if (iter.hasNext()) {
        sb.append(',');
      }
    }
    props.setProperty(DISABLED_RULES_CONFIG_KEY,sb.toString());
  }
  if (enabledRuleIds == null) {
    props.setProperty(ENABLED_RULES_CONFIG_KEY,"");
  }
 else {
    final StringBuilder sb=new StringBuilder();
    for (final Iterator<String> iter=enabledRuleIds.iterator(); iter.hasNext(); ) {
      final String id=iter.next();
      sb.append(id);
      if (iter.hasNext()) {
        sb.append(',');
      }
    }
    props.setProperty(ENABLED_RULES_CONFIG_KEY,sb.toString());
  }
  if (disabledCategoryNames == null) {
    props.setProperty(DISABLED_CATEGORIES_CONFIG_KEY,"");
  }
 else {
    final StringBuilder sb=new StringBuilder();
    for (final Iterator<String> iter=disabledCategoryNames.iterator(); iter.hasNext(); ) {
      final String name=iter.next();
      sb.append(name);
      if (iter.hasNext()) {
        sb.append(',');
      }
    }
    props.setProperty(DISABLED_CATEGORIES_CONFIG_KEY,sb.toString());
  }
  if (motherTongue != null) {
    props.setProperty(MOTHER_TONGUE_CONFIG_KEY,motherTongue.getShortName());
  }
  props.setProperty(SERVER_RUN_CONFIG_KEY,Boolean.valueOf(runServer).toString());
  props.setProperty(SERVER_PORT_CONFIG_KEY,Integer.valueOf(serverPort).toString());
  final FileOutputStream fos=new FileOutputStream(configFile);
  try {
    props.store(fos,"LanguageTool configuration");
  }
  finally {
    fos.close();
  }
}
