{
  this.port=config.getPort();
  this.host=host;
  try {
    if (host == null) {
      server=HttpsServer.create(new InetSocketAddress(port),0);
    }
 else {
      server=HttpsServer.create(new InetSocketAddress(host,port),0);
    }
    SSLContext sslContext=getSslContext(config.getKeystore(),config.getKeyStorePassword());
    HttpsConfigurator configurator=getConfigurator(sslContext);
    ((HttpsServer)server).setHttpsConfigurator(configurator);
    RequestLimiter limiter=getRequestLimiterOrNull(config);
    LinkedBlockingQueue<Runnable> workQueue=new LinkedBlockingQueue<>();
    httpHandler=new LanguageToolHttpHandler(config,allowedIps,runInternally,limiter,workQueue);
    server.createContext("/",httpHandler);
    executorService=getExecutorService(workQueue,config);
    server.setExecutor(executorService);
  }
 catch (  BindException e) {
    ResourceBundle messages=JLanguageTool.getMessageBundle();
    String message=Tools.i18n(messages,"https_server_start_failed",host,Integer.toString(port));
    throw new PortBindingException(message,e);
  }
catch (  Exception e) {
    ResourceBundle messages=JLanguageTool.getMessageBundle();
    String message=Tools.i18n(messages,"https_server_start_failed_unknown_reason",host,Integer.toString(port));
    throw new RuntimeException(message,e);
  }
}
