{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  if (tokens.length < 2) {
    return toRuleMatchArray(ruleMatches);
  }
  int matchTokenPos=1;
  final String firstToken=tokens[matchTokenPos].getToken();
  String secondToken=null;
  String thirdToken=null;
  if (tokens.length >= 3 && ("'".equals(firstToken) || "\"".equals(firstToken) || "???".equals(firstToken))) {
    matchTokenPos=2;
    secondToken=tokens[matchTokenPos].getToken();
  }
  final String firstDutchToken=dutchSpecialCase(firstToken,secondToken,tokens);
  if (firstDutchToken != null) {
    thirdToken=firstDutchToken;
    matchTokenPos=3;
  }
  String checkToken=firstToken;
  if (thirdToken != null) {
    checkToken=thirdToken;
  }
 else   if (secondToken != null) {
    checkToken=secondToken;
  }
  String lastToken=tokens[tokens.length - 1].getToken();
  if (lastToken.matches("[ \"'??????????]") && tokens.length >= 2) {
    lastToken=tokens[tokens.length - 2].getToken();
  }
  boolean preventError=false;
  final String langCode=language.getShortName();
  final boolean languageHasSpecialCases=langCode.equals("ru") || langCode.equals("pl") || langCode.equals("uk")|| langCode.equals("be")|| langCode.equals(Locale.ENGLISH.getLanguage())|| langCode.equals(Locale.ITALIAN.getLanguage())|| langCode.equals(Locale.GERMAN.getLanguage());
  if (languageHasSpecialCases) {
    if (";".equals(lastParagraphString) || ";".equals(lastToken) || ",".equals(lastParagraphString)|| ",".equals(lastToken)) {
      preventError=true;
    }
    if (!lastToken.matches("[.?!???]")) {
      preventError=true;
    }
  }
  lastParagraphString=lastToken;
  if (NUMERALS_EN.matcher(tokens[matchTokenPos].getToken()).matches() && (tokens[matchTokenPos + 1].getToken().equals(".") || tokens[matchTokenPos + 1].getToken().equals(")"))) {
    preventError=true;
  }
  if (checkToken.length() > 0) {
    final char firstChar=checkToken.charAt(0);
    if (!preventError && Character.isLowerCase(firstChar)) {
      final RuleMatch ruleMatch=new RuleMatch(this,tokens[matchTokenPos].getStartPos(),tokens[matchTokenPos].getStartPos() + tokens[matchTokenPos].getToken().length(),messages.getString("incorrect_case"));
      ruleMatch.setSuggestedReplacement(StringTools.uppercaseFirstChar(checkToken));
      ruleMatches.add(ruleMatch);
    }
  }
  return toRuleMatchArray(ruleMatches);
}
