{
  if (!it.hasNext()) {
    return null;
  }
  final Element patternElement=it.next();
  SpanQuery tokenQuery;
  SpanQuery posQuery=null;
  try {
    checkUnsupportedRule(patternElement,position);
    final boolean caseSensitive=patternElement.getCaseSensitive();
    tokenQuery=createTokenQuery(patternElement.getString(),patternElement.getNegation(),patternElement.isRegularExpression(),caseSensitive);
    posQuery=createPOSQuery(patternElement.getPOStag(),patternElement.getPOSNegation(),patternElement.isPOStagRegularExpression());
  }
 catch (  UnsupportedPatternRuleException e) {
    if (throwExceptionOnUnsupportedRule) {
      throw e;
    }
 else {
      if (patternElement.hasExceptionList() && !patternElement.isInflected() && !patternElement.getString().isEmpty()) {
        tokenQuery=createTokenQuery(patternElement.getString(),patternElement.getNegation(),patternElement.isRegularExpression(),patternElement.getCaseSensitive());
      }
 else {
        if (position == 0 && patternElement.getNegation()) {
          tokenQuery=null;
        }
 else {
          tokenQuery=new POSAwaredSpanRegexQuery(new Term(FIELD_NAME,".*"),false);
        }
      }
    }
  }
  final ArrayList<SpanQuery> list=new ArrayList<SpanQuery>();
  int skip=0;
  if (tokenQuery != null && posQuery != null) {
    final RigidSpanNearQuery q=new RigidSpanNearQuery(new SpanQuery[]{tokenQuery,posQuery},0,true);
    list.add(q);
  }
 else   if (tokenQuery != null) {
    list.add(tokenQuery);
  }
 else   if (posQuery != null) {
    list.add(posQuery);
  }
 else {
    skip++;
  }
  if (patternElement.getSkipNext() >= 0) {
    skip+=patternElement.getSkipNext();
  }
 else {
    skip=MAX_SKIP;
  }
  final SpanQuery next=next(it,throwExceptionOnUnsupportedRule,position + 1);
  if (next != null) {
    list.add(next);
    return new RigidSpanNearQuery(list.toArray(new SpanQuery[list.size()]),skip + 1,true);
  }
 else   if (list.size() > 0) {
    return list.get(0);
  }
 else {
    return null;
  }
}
