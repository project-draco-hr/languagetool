{
switch (qName) {
case RULE:
    if (language.equalsConsiderVariantsIfSpecified(textLanguage) && translationLanguage != null && translationLanguage.equalsConsiderVariantsIfSpecified(motherTongue) && language != motherTongue && !translations.isEmpty()) {
      formatter.applyPattern(messages.getString("false_friend_hint"));
      String tokensAsString=StringUtils.join(patternTokens," ").replace('|','/');
      Object[] messageArguments={tokensAsString,messages.getString(textLanguage.getShortName()),formatTranslations(translations),messages.getString(motherTongue.getShortName())};
      String description=formatter.format(messageArguments);
      PatternRule rule=new FalseFriendPatternRule(id,language,patternTokens,messages.getString("false_friend_desc") + " " + tokensAsString,description,messages.getString("false_friend"));
      rule.setCorrectExamples(correctExamples);
      rule.setIncorrectExamples(incorrectExamples);
      rule.setCategory(Categories.FALSE_FRIENDS.getCategory(messages));
      if (defaultOff) {
        rule.setDefaultOff();
      }
      rules.add(rule);
    }
  if (patternTokens != null) {
    patternTokens.clear();
  }
break;
case TOKEN:
finalizeTokens();
break;
case PATTERN:
inPattern=false;
break;
case TRANSLATION:
if (currentTranslationLanguage != null && currentTranslationLanguage.equalsConsiderVariantsIfSpecified(motherTongue)) {
translations.add(translation);
}
if (currentTranslationLanguage != null && currentTranslationLanguage.equalsConsiderVariantsIfSpecified(textLanguage) && language.equalsConsiderVariantsIfSpecified(motherTongue)) {
suggestions.add(translation.toString());
}
translation=new StringBuilder();
inTranslation=false;
currentTranslationLanguage=null;
break;
case EXAMPLE:
if (inCorrectExample) {
correctExamples.add(correctExample.toString());
}
 else if (inIncorrectExample) {
incorrectExamples.add(new IncorrectExample(incorrectExample.toString()));
}
inCorrectExample=false;
inIncorrectExample=false;
correctExample=new StringBuilder();
incorrectExample=new StringBuilder();
break;
case MESSAGE:
inMessage=false;
break;
case RULEGROUP:
if (!suggestions.isEmpty()) {
List<String> l=new ArrayList<>(suggestions);
suggestionMap.put(id,l);
suggestions.clear();
}
inRuleGroup=false;
break;
}
}
