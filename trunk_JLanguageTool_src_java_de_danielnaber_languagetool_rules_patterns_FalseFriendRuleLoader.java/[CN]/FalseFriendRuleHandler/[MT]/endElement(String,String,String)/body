{
  if (qName.equals("rule")) {
    if (language == textLanguage && translationLanguage != null && translationLanguage == motherTongue) {
      formatter.applyPattern(messages.getString("false_friend_hint"));
      Object[] messageArguments={elements.toString().replace('|','/'),messages.getString(textLanguage.getShortName()),formatTranslations(translations),messages.getString(motherTongue.getShortName())};
      String description=formatter.format(messageArguments);
      PatternRule rule=new PatternRule(id,language,elementList,messages.getString("false_friend_desc") + " " + pattern.toString(),description);
      rule.setCorrectExamples(correctExamples);
      rule.setIncorrectExamples(incorrectExamples);
      rules.add(rule);
    }
    if (elementList != null) {
      elementList.clear();
    }
  }
 else   if (qName.equals("token")) {
    if (inToken) {
      StringElement stringElement=new StringElement(elements.toString(),caseSensitive,regExpression,tokenInflected);
      stringElement.setNegation(tokenNegated);
      if (skipPos != 0) {
        stringElement.setSkipNext(skipPos);
        skipPos=0;
      }
      elementList.add(stringElement);
      tokenNegated=false;
      tokenInflected=false;
    }
    inToken=false;
    regExpression=false;
  }
 else   if (qName.equals("pattern")) {
    inPattern=false;
  }
 else   if (qName.equals("translation")) {
    if (currentTranslationLanguage == motherTongue) {
      translations.add(translation);
    }
    translation=new StringBuilder();
    inTranslation=false;
    currentTranslationLanguage=null;
  }
 else   if (qName.equals("example")) {
    if (inCorrectExample) {
      correctExamples.add(correctExample.toString());
    }
 else     if (inIncorrectExample) {
      incorrectExamples.add(incorrectExample.toString());
    }
    inCorrectExample=false;
    inIncorrectExample=false;
    correctExample=new StringBuffer();
    incorrectExample=new StringBuffer();
  }
 else   if (qName.equals("message")) {
    inMessage=false;
  }
 else   if (qName.equals("rulegroup")) {
    inRuleGroup=false;
  }
}
