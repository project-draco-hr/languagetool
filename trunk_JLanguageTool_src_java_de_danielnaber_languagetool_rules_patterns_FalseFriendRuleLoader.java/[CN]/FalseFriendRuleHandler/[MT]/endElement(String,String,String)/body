{
  if (qName.equals("rule")) {
    if (language == textLanguage && translationLanguage != null && translationLanguage == motherTongue && language != motherTongue && !translations.isEmpty()) {
      formatter.applyPattern(messages.getString("false_friend_hint"));
      final Object[] messageArguments={elements.toString().replace('|','/'),messages.getString(textLanguage.getShortName()),formatTranslations(translations),messages.getString(motherTongue.getShortName())};
      final String description=formatter.format(messageArguments);
      final PatternRule rule=new PatternRule(id,language,elementList,messages.getString("false_friend_desc") + " " + elements.toString().replace('|','/'),description,messages.getString("false_friend"));
      rule.setCorrectExamples(correctExamples);
      rule.setIncorrectExamples(incorrectExamples);
      rule.setCategory(new Category(messages.getString("category_false_friend")));
      if (defaultOff) {
        rule.setDefaultOff();
      }
      rules.add(rule);
    }
    if (!suggestions.isEmpty()) {
      final List<String> l=new ArrayList<String>(suggestions);
      suggestionMap.put(id,l);
      suggestions.clear();
    }
    if (elementList != null) {
      elementList.clear();
    }
  }
 else   if (qName.equals("exception")) {
    inException=false;
    if (!exceptionSet) {
      stringElement=new Element(elements.toString(),caseSensitive,regExpression,tokenInflected);
      exceptionSet=true;
    }
    stringElement.setNegation(tokenNegated);
    if (!StringTools.isEmpty(exceptions.toString())) {
      stringElement.setStringException(exceptions.toString(),exceptionStringRegExp,exceptionStringInflected,exceptionStringNegation,exceptionValidNext,exceptionValidPrev);
    }
    if (exceptionPosToken != null) {
      stringElement.setPosException(exceptionPosToken,exceptionPosRegExp,exceptionPosNegation,exceptionValidNext,exceptionValidPrev);
      exceptionPosToken=null;
    }
  }
 else   if (qName.equals("token")) {
    if (inToken) {
      if (!exceptionSet || stringElement == null) {
        stringElement=new Element(elements.toString(),caseSensitive,regExpression,tokenInflected);
        stringElement.setNegation(tokenNegated);
      }
 else {
        stringElement.setStringElement(elements.toString());
      }
      if (skipPos != 0) {
        stringElement.setSkipNext(skipPos);
        skipPos=0;
      }
      if (posToken != null) {
        stringElement.setPosElement(posToken,regular,posNegation);
        posToken=null;
      }
      elementList.add(stringElement);
      tokenNegated=false;
      tokenInflected=false;
      posNegation=false;
      regular=false;
      exceptionValidNext=true;
    }
    inToken=false;
    regExpression=false;
    exceptionStringNegation=false;
    exceptionStringInflected=false;
    exceptionPosNegation=false;
    exceptionPosRegExp=false;
    exceptionStringRegExp=false;
    exceptionValidNext=true;
    exceptionSet=false;
  }
 else   if (qName.equals("pattern")) {
    inPattern=false;
  }
 else   if (qName.equals("translation")) {
    if (currentTranslationLanguage == motherTongue) {
      translations.add(translation);
    }
    if (currentTranslationLanguage == textLanguage) {
      suggestions.add(translation.toString());
    }
    translation=new StringBuilder();
    inTranslation=false;
    currentTranslationLanguage=null;
  }
 else   if (qName.equals("example")) {
    if (inCorrectExample) {
      correctExamples.add(correctExample.toString());
    }
 else     if (inIncorrectExample) {
      incorrectExamples.add(new IncorrectExample(incorrectExample.toString()));
    }
    inCorrectExample=false;
    inIncorrectExample=false;
    correctExample=new StringBuilder();
    incorrectExample=new StringBuilder();
  }
 else   if (qName.equals("message")) {
    inMessage=false;
  }
 else   if (qName.equals("rulegroup")) {
    inRuleGroup=false;
  }
}
