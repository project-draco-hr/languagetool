{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=sentence.getTokens();
  boolean prevWhite=false;
  int prevLen=0;
  int prevPos=0;
  int i=1;
  while (i < tokens.length) {
    boolean tokenIsTab=tokens[i].getToken().equals("\t");
    boolean prevTokenIsLinebreak=tokens[i - 1].isLinebreak();
    if ((tokens[i].isWhitespace() || StringTools.isNonBreakingWhitespace(tokens[i].getToken())) && prevWhite && !tokenIsTab&& !prevTokenIsLinebreak) {
      int pos=tokens[i - 1].getStartPos();
      while (i < tokens.length && (tokens[i].isWhitespace() || StringTools.isNonBreakingWhitespace(tokens[i].getToken()))) {
        prevLen+=tokens[i].getToken().length();
        i++;
      }
      String message=messages.getString("whitespace_repetition");
      if (prevLen > 0) {
        RuleMatch ruleMatch=new RuleMatch(this,prevPos,pos + prevLen,message);
        ruleMatch.setSuggestedReplacement(" ");
        ruleMatches.add(ruleMatch);
      }
    }
    if (i < tokens.length) {
      prevWhite=tokens[i].isWhitespace() || StringTools.isNonBreakingWhitespace(tokens[i].getToken());
      prevLen=tokens[i].getToken().length();
      prevPos=tokens[i].getStartPos();
      i++;
    }
  }
  return toRuleMatchArray(ruleMatches);
}
