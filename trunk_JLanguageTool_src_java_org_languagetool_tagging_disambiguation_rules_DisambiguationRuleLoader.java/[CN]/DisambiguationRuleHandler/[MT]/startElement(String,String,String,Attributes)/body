{
  if (qName.equals("rule")) {
    id=attrs.getValue("id");
    name=attrs.getValue("name");
    if (inRuleGroup && id == null) {
      id=ruleGroupId;
    }
    if (inRuleGroup && name == null) {
      name=ruleGroupName;
    }
  }
 else   if ("rules".equals(qName)) {
    language=Language.getLanguageForShortName(attrs.getValue("lang"));
  }
 else   if (qName.equals(PATTERN)) {
    inPattern=true;
    tokenCountForMarker=0;
    if (attrs.getValue(CASE_SENSITIVE) != null && YES.equals(attrs.getValue(CASE_SENSITIVE))) {
      caseSensitive=true;
    }
  }
 else   if (qName.equals(EXCEPTION)) {
    setExceptions(attrs);
  }
 else   if (qName.equals(AND)) {
    inAndGroup=true;
    tokenCountForMarker++;
  }
 else   if (qName.equals(UNIFY)) {
    inUnification=true;
    uniNegation=YES.equals(attrs.getValue(NEGATE));
    uniCounter=0;
  }
 else   if ("feature".equals(qName)) {
    uFeature=attrs.getValue("id");
  }
 else   if (qName.equals(TYPE)) {
    uType=attrs.getValue("id");
    uTypeList.add(uType);
  }
 else   if (qName.equals(TOKEN)) {
    setToken(attrs);
    if (!inAndGroup) {
      tokenCountForMarker++;
    }
  }
 else   if (qName.equals(DISAMBIG)) {
    inDisambiguation=true;
    disambiguatedPOS=attrs.getValue(POSTAG);
    if (attrs.getValue(ACTION) == null) {
      disambigAction=DisambiguationPatternRule.DisambiguatorAction.toAction("REPLACE");
    }
 else {
      disambigAction=DisambiguationPatternRule.DisambiguatorAction.toAction(attrs.getValue(ACTION).toUpperCase());
    }
    disamb=new StringBuilder();
  }
 else   if (qName.equals(MATCH)) {
    inMatch=true;
    match=new StringBuilder();
    Match.CaseConversion caseConversion=Match.CaseConversion.NONE;
    if (attrs.getValue("case_conversion") != null) {
      caseConversion=Match.CaseConversion.toCase(attrs.getValue("case_conversion").toUpperCase());
    }
    Match.IncludeRange includeRange=Match.IncludeRange.NONE;
    if (attrs.getValue("include_skipped") != null) {
      includeRange=Match.IncludeRange.toRange(attrs.getValue("include_skipped").toUpperCase());
    }
    final Match mWorker=new Match(attrs.getValue(POSTAG),attrs.getValue("postag_replace"),YES.equals(attrs.getValue(POSTAG_REGEXP)),attrs.getValue("regexp_match"),attrs.getValue("regexp_replace"),caseConversion,YES.equals(attrs.getValue("setpos")),includeRange);
    if (inDisambiguation) {
      if (attrs.getValue(NO) != null) {
        final int refNumber=Integer.parseInt(attrs.getValue(NO));
        if (refNumber > elementList.size()) {
          throw new SAXException("Only backward references in match elements are possible, tried to specify token " + refNumber + "\n Line: "+ pLocator.getLineNumber()+ ", column: "+ pLocator.getColumnNumber()+ ".");
        }
        mWorker.setTokenRef(refNumber);
        posSelector=mWorker;
      }
    }
 else     if (inToken) {
      if (attrs.getValue(NO) != null) {
        final int refNumber=Integer.parseInt(attrs.getValue(NO));
        if (refNumber > elementList.size()) {
          throw new SAXException("Only backward references in match elements are possible, tried to specify token " + refNumber + "\n Line: "+ pLocator.getLineNumber()+ ", column: "+ pLocator.getColumnNumber()+ ".");
        }
        mWorker.setTokenRef(refNumber);
        tokenReference=mWorker;
        elements.append('\\');
        elements.append(refNumber);
      }
    }
  }
 else   if (qName.equals(RULEGROUP)) {
    ruleGroupId=attrs.getValue("id");
    ruleGroupName=attrs.getValue("name");
    inRuleGroup=true;
  }
 else   if (qName.equals(UNIFICATION)) {
    uFeature=attrs.getValue(FEATURE);
    inUnificationDef=true;
  }
 else   if ("equivalence".equals(qName)) {
    uType=attrs.getValue(TYPE);
  }
 else   if (qName.equals(WD)) {
    wdLemma=attrs.getValue("lemma");
    wdPos=attrs.getValue("pos");
    inWord=true;
    wd=new StringBuilder();
  }
 else   if (qName.equals(EXAMPLE)) {
    inExample=true;
    if (untouchedExamples == null) {
      untouchedExamples=new ArrayList<String>();
    }
    if (disambExamples == null) {
      disambExamples=new ArrayList<DisambiguatedExample>();
    }
    untouched=attrs.getValue(TYPE).equals("untouched");
    if (attrs.getValue(TYPE).equals("ambiguous")) {
      input=attrs.getValue("inputform");
      output=attrs.getValue("outputform");
    }
    example=new StringBuilder();
  }
 else   if ("marker".equals(qName)) {
    example.append("<marker>");
    if (inPattern) {
      startPos=tokenCounter;
    }
  }
}
