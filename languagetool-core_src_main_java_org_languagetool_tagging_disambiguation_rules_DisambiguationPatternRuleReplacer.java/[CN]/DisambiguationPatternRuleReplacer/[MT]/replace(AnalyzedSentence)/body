{
  List<PatternTokenMatcher> patternTokenMatchers=createElementMatchers();
  final AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  AnalyzedTokenReadings[] whTokens=sentence.getTokens();
  final int[] tokenPositions=new int[tokens.length + 1];
  final int patternSize=patternTokenMatchers.size();
  final int limit=Math.max(0,tokens.length - patternSize + 1);
  PatternTokenMatcher pTokenMatcher=null;
  boolean changed=false;
  pTokensMatched.clear();
  for (  PatternTokenMatcher patternTokenMatcher : patternTokenMatchers) {
    pTokensMatched.add(false);
  }
  int i=0;
  int minOccurCorrection=getMinOccurrenceCorrection();
  while (i < limit + minOccurCorrection && !(rule.isSentStart() && i > 0)) {
    boolean allElementsMatch=false;
    unifiedTokens=null;
    int matchingTokens=0;
    int skipShiftTotal=0;
    int firstMatchToken=-1;
    int lastMatchToken;
    int firstMarkerMatchToken=-1;
    int lastMarkerMatchToken=-1;
    int prevSkipNext=0;
    if (rule.isTestUnification()) {
      unifier.reset();
    }
    int minOccurSkip=0;
    for (int k=0; k < patternSize; k++) {
      final PatternTokenMatcher prevElement=pTokenMatcher;
      pTokenMatcher=patternTokenMatchers.get(k);
      pTokenMatcher.resolveReference(firstMatchToken,tokens,rule.getLanguage());
      final int nextPos=i + k + skipShiftTotal - minOccurSkip;
      prevMatched=false;
      if (prevSkipNext + nextPos >= tokens.length || prevSkipNext < 0) {
        prevSkipNext=tokens.length - (nextPos + 1);
      }
      final int maxTok=Math.min(nextPos + prevSkipNext,tokens.length - (patternSize - k) + minOccurCorrection);
      for (int m=nextPos; m <= maxTok; m++) {
        allElementsMatch=testAllReadings(tokens,pTokenMatcher,prevElement,m,firstMatchToken,prevSkipNext);
        if (pTokenMatcher.getPatternToken().getMinOccurrence() == 0) {
          final PatternTokenMatcher nextElement=patternTokenMatchers.get(k + 1);
          final boolean nextElementMatch=testAllReadings(tokens,nextElement,pTokenMatcher,m,firstMatchToken,prevSkipNext);
          if (nextElementMatch) {
            allElementsMatch=true;
            minOccurSkip++;
            pTokensMatched.set(k,false);
            break;
          }
        }
        if (allElementsMatch) {
          pTokensMatched.set(k,true);
          int skipForMax=skipMaxTokens(tokens,pTokenMatcher,firstMatchToken,prevSkipNext,prevElement,m,patternSize - k - 1);
          lastMatchToken=m + skipForMax;
          final int skipShift=lastMatchToken - nextPos;
          tokenPositions[matchingTokens]=skipShift + 1;
          prevSkipNext=pTokenMatcher.getPatternToken().getSkipNext();
          matchingTokens++;
          skipShiftTotal+=skipShift;
          if (firstMatchToken == -1) {
            firstMatchToken=lastMatchToken - skipForMax;
          }
          if (firstMarkerMatchToken == -1 && pTokenMatcher.getPatternToken().isInsideMarker()) {
            firstMarkerMatchToken=lastMatchToken - skipForMax;
          }
          if (pTokenMatcher.getPatternToken().isInsideMarker()) {
            lastMarkerMatchToken=lastMatchToken;
          }
          break;
        }
      }
      if (!allElementsMatch) {
        break;
      }
    }
    if (allElementsMatch && matchingTokens == patternSize || matchingTokens == patternSize - minOccurSkip && firstMatchToken != -1) {
      whTokens=executeAction(sentence,whTokens,unifiedTokens,firstMatchToken,lastMarkerMatchToken,matchingTokens,tokenPositions);
      changed=true;
    }
    i++;
  }
  if (changed) {
    return new AnalyzedSentence(whTokens);
  }
  return sentence;
}
