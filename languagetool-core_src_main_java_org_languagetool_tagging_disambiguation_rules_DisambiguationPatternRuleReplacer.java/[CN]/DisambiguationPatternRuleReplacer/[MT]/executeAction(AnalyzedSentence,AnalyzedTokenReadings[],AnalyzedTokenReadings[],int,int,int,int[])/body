{
  AnalyzedTokenReadings[] whTokens=whiteTokens.clone();
  DisambiguationPatternRule rule=(DisambiguationPatternRule)this.rule;
  int correctedStPos=0;
  int startPositionCorrection=rule.getStartPositionCorrection();
  int endPositionCorrection=rule.getEndPositionCorrection();
  int matchingTokensWithCorrection=matchingTokens;
  List<Integer> tokenPositionList=new ArrayList<>();
  for (  int i : tokenPositions) {
    tokenPositionList.add(i);
  }
  if (startPositionCorrection > 0) {
    correctedStPos--;
    for (int j=0; j < pTokensMatched.size(); j++) {
      if (!pTokensMatched.get(j)) {
        tokenPositionList.add(j,0);
      }
    }
    for (int l=0; l <= startPositionCorrection && tokenPositionList.size() > l; l++) {
      correctedStPos+=tokenPositionList.get(l);
    }
    int w=startPositionCorrection;
    for (int j=0; j <= w; j++) {
      if (j < pTokensMatched.size() && !pTokensMatched.get(j)) {
        startPositionCorrection--;
      }
    }
  }
  if (endPositionCorrection < 0) {
    for (int d=startPositionCorrection; d < pTokensMatched.size(); d++) {
      if (!pTokensMatched.get(d)) {
        endPositionCorrection++;
      }
    }
  }
  if (lastMatchToken != -1) {
    int maxPosCorrection=Math.max((lastMatchToken + 1 - (firstMatchToken + correctedStPos)) - matchingTokens,0);
    matchingTokensWithCorrection+=maxPosCorrection;
  }
  int fromPos=sentence.getOriginalPosition(firstMatchToken + correctedStPos);
  boolean spaceBefore=whTokens[fromPos].isWhitespaceBefore();
  DisambiguationPatternRule.DisambiguatorAction disAction=rule.getAction();
  AnalyzedToken[] newTokenReadings=rule.getNewTokenReadings();
  Match matchElement=rule.getMatchElement();
  String disambiguatedPOS=rule.getDisambiguatedPOS();
switch (disAction) {
case UNIFY:
    if (unifiedTokens != null) {
      if (unifiedTokens.length == matchingTokensWithCorrection - startPositionCorrection + endPositionCorrection) {
        if (whTokens[sentence.getOriginalPosition(firstMatchToken + correctedStPos + unifiedTokens.length - 1)].isSentenceEnd()) {
          unifiedTokens[unifiedTokens.length - 1].setSentEnd();
        }
        for (int i=0; i < unifiedTokens.length; i++) {
          int position=sentence.getOriginalPosition(firstMatchToken + correctedStPos + i);
          unifiedTokens[i].setStartPos(whTokens[position].getStartPos());
          String prevValue=whTokens[position].toString();
          String prevAnot=whTokens[position].getHistoricalAnnotations();
          List<ChunkTag> chTags=whTokens[position].getChunkTags();
          whTokens[position]=unifiedTokens[i];
          whTokens[position].setChunkTags(chTags);
          annotateChange(whTokens[position],prevValue,prevAnot);
        }
      }
    }
  break;
case REMOVE:
if (newTokenReadings != null && newTokenReadings.length > 0) {
  if (newTokenReadings.length == matchingTokensWithCorrection - startPositionCorrection + endPositionCorrection) {
    for (int i=0; i < newTokenReadings.length; i++) {
      int position=sentence.getOriginalPosition(firstMatchToken + correctedStPos + i);
      String prevValue=whTokens[position].toString();
      String prevAnot=whTokens[position].getHistoricalAnnotations();
      whTokens[position].removeReading(newTokenReadings[i]);
      annotateChange(whTokens[position],prevValue,prevAnot);
    }
  }
}
 else if (!StringTools.isEmpty(disambiguatedPOS)) {
  Pattern p=Pattern.compile(disambiguatedPOS);
  AnalyzedTokenReadings tmp=new AnalyzedTokenReadings(whTokens[fromPos].getReadings(),whTokens[fromPos].getStartPos());
  for (  AnalyzedToken analyzedToken : tmp) {
    if (analyzedToken.getPOSTag() != null) {
      Matcher mPos=p.matcher(analyzedToken.getPOSTag());
      if (mPos.matches()) {
        int position=sentence.getOriginalPosition(firstMatchToken + correctedStPos);
        String prevValue=whTokens[position].toString();
        String prevAnot=whTokens[position].getHistoricalAnnotations();
        whTokens[position].removeReading(analyzedToken);
        annotateChange(whTokens[position],prevValue,prevAnot);
      }
    }
  }
}
break;
case ADD:
if (newTokenReadings != null) {
if (newTokenReadings.length == matchingTokensWithCorrection - startPositionCorrection + endPositionCorrection) {
for (int i=0; i < newTokenReadings.length; i++) {
  String token;
  int position=sentence.getOriginalPosition(firstMatchToken + correctedStPos + i);
  if (newTokenReadings[i].getToken().isEmpty()) {
    token=whTokens[position].getToken();
  }
 else {
    token=newTokenReadings[i].getToken();
  }
  String lemma;
  if (newTokenReadings[i].getLemma() == null) {
    lemma=token;
  }
 else {
    lemma=newTokenReadings[i].getLemma();
  }
  AnalyzedToken newTok=new AnalyzedToken(token,newTokenReadings[i].getPOSTag(),lemma);
  String prevValue=whTokens[position].toString();
  String prevAnot=whTokens[position].getHistoricalAnnotations();
  whTokens[position].addReading(newTok);
  annotateChange(whTokens[position],prevValue,prevAnot);
}
}
}
break;
case FILTERALL:
for (int i=0; i < matchingTokensWithCorrection - startPositionCorrection + endPositionCorrection; i++) {
int position=sentence.getOriginalPosition(firstMatchToken + correctedStPos + i);
PatternToken pToken;
if (pTokensMatched.get(i + startPositionCorrection)) {
pToken=rule.getPatternTokens().get(i + startPositionCorrection);
}
 else {
int k=1;
while (i + startPositionCorrection + k < rule.getPatternTokens().size() + endPositionCorrection && !pTokensMatched.get(i + startPositionCorrection + k)) {
k++;
}
pToken=rule.getPatternTokens().get(i + k + startPositionCorrection);
}
Match tmpMatchToken=new Match(pToken.getPOStag(),null,true,pToken.getPOStag(),null,Match.CaseConversion.NONE,false,false,Match.IncludeRange.NONE);
MatchState matchState=tmpMatchToken.createState(rule.getLanguage().getSynthesizer(),whTokens[position]);
String prevValue=whTokens[position].toString();
String prevAnot=whTokens[position].getHistoricalAnnotations();
whTokens[position]=matchState.filterReadings();
annotateChange(whTokens[position],prevValue,prevAnot);
}
break;
case IMMUNIZE:
for (int i=0; i < matchingTokensWithCorrection - startPositionCorrection + endPositionCorrection; i++) {
whTokens[sentence.getOriginalPosition(firstMatchToken + correctedStPos + i)].immunize();
}
break;
case IGNORE_SPELLING:
for (int i=0; i < matchingTokensWithCorrection - startPositionCorrection + endPositionCorrection; i++) {
whTokens[sentence.getOriginalPosition(firstMatchToken + correctedStPos + i)].ignoreSpelling();
}
break;
case FILTER:
if (matchElement == null) {
Match tmpMatchToken=new Match(disambiguatedPOS,null,true,disambiguatedPOS,null,Match.CaseConversion.NONE,false,false,Match.IncludeRange.NONE);
boolean newPOSmatches=false;
for (int i=0; i < whTokens[fromPos].getReadingsLength(); i++) {
if (!whTokens[fromPos].getAnalyzedToken(i).hasNoTag() && whTokens[fromPos].getAnalyzedToken(i).getPOSTag() != null && whTokens[fromPos].getAnalyzedToken(i).getPOSTag().matches(disambiguatedPOS)) {
newPOSmatches=true;
break;
}
}
if (newPOSmatches) {
MatchState matchState=tmpMatchToken.createState(rule.getLanguage().getSynthesizer(),whTokens[fromPos]);
String prevValue=whTokens[fromPos].toString();
String prevAnot=whTokens[fromPos].getHistoricalAnnotations();
whTokens[fromPos]=matchState.filterReadings();
annotateChange(whTokens[fromPos],prevValue,prevAnot);
}
break;
}
case REPLACE:
default :
if (newTokenReadings != null && newTokenReadings.length > 0) {
if (newTokenReadings.length == matchingTokensWithCorrection - startPositionCorrection + endPositionCorrection) {
for (int i=0; i < newTokenReadings.length; i++) {
String token;
int position=sentence.getOriginalPosition(firstMatchToken + correctedStPos + i);
if ("".equals(newTokenReadings[i].getToken())) {
token=whTokens[position].getToken();
}
 else {
token=newTokenReadings[i].getToken();
}
String lemma;
if (newTokenReadings[i].getLemma() == null) {
lemma=token;
}
 else {
lemma=newTokenReadings[i].getLemma();
}
AnalyzedToken analyzedToken=new AnalyzedToken(token,newTokenReadings[i].getPOSTag(),lemma);
AnalyzedTokenReadings toReplace=new AnalyzedTokenReadings(analyzedToken,whTokens[fromPos].getStartPos());
whTokens[position]=replaceTokens(whTokens[position],toReplace);
}
}
}
 else if (matchElement == null) {
String lemma="";
for (AnalyzedToken analyzedToken : whTokens[fromPos]) {
if (analyzedToken.getPOSTag() != null && analyzedToken.getPOSTag().equals(disambiguatedPOS) && analyzedToken.getLemma() != null) {
lemma=analyzedToken.getLemma();
}
}
if (StringTools.isEmpty(lemma)) {
lemma=whTokens[fromPos].getAnalyzedToken(0).getLemma();
}
AnalyzedToken analyzedToken=new AnalyzedToken(whTokens[fromPos].getToken(),disambiguatedPOS,lemma);
AnalyzedTokenReadings toReplace=new AnalyzedTokenReadings(analyzedToken,whTokens[fromPos].getStartPos());
whTokens[fromPos]=replaceTokens(whTokens[fromPos],toReplace);
}
 else {
MatchState matchElementState=matchElement.createState(rule.getLanguage().getSynthesizer(),whTokens[fromPos]);
String prevValue=whTokens[fromPos].toString();
String prevAnot=whTokens[fromPos].getHistoricalAnnotations();
whTokens[fromPos]=matchElementState.filterReadings();
whTokens[fromPos].setWhitespaceBefore(spaceBefore);
annotateChange(whTokens[fromPos],prevValue,prevAnot);
}
}
return whTokens;
}
