{
  final XComponent xComponent=getXComponent();
  final Locale charLocale;
  final XPropertySet xCursorProps;
  try {
    final XModel model=UnoRuntime.queryInterface(XModel.class,xComponent);
    final XTextViewCursorSupplier xViewCursorSupplier=UnoRuntime.queryInterface(XTextViewCursorSupplier.class,model.getCurrentController());
    final XTextViewCursor xCursor=xViewCursorSupplier.getViewCursor();
    if (xCursor.isCollapsed()) {
      xCursorProps=UnoRuntime.queryInterface(XPropertySet.class,xCursor);
    }
 else {
      xCursorProps=UnoRuntime.queryInterface(XPropertySet.class,xCursor.getText().createTextCursorByRange(xCursor.getStart()));
    }
    if (new KhmerDetector().isThisLanguage(xCursor.getText().getString())) {
      return Languages.getLanguageForShortName("km");
    }
    if (new TamilDetector().isThisLanguage(xCursor.getText().getString())) {
      return Languages.getLanguageForShortName("ta");
    }
    final Object obj=xCursorProps.getPropertyValue("CharLocale");
    if (obj == null) {
      return Languages.getLanguageForShortName("en-US");
    }
    charLocale=(Locale)obj;
    boolean langIsSupported=false;
    for (    Language element : Languages.get()) {
      if (charLocale.Language.equalsIgnoreCase(LIBREOFFICE_SPECIAL_LANGUAGE_TAG) && element.getShortNameWithCountryAndVariant().equalsIgnoreCase(charLocale.Variant)) {
        langIsSupported=true;
        break;
      }
      if (element.getShortName().equals(charLocale.Language)) {
        langIsSupported=true;
        break;
      }
    }
    if (!langIsSupported) {
      final String message=Tools.i18n(MESSAGES,"language_not_supported",charLocale.Language);
      JOptionPane.showMessageDialog(null,message);
      return null;
    }
  }
 catch (  Throwable t) {
    showError(t);
    return null;
  }
  return getLanguage(charLocale);
}
