{
  final SingleProofreadingError aError=new SingleProofreadingError();
  aError.nErrorType=TextMarkupType.PROOFREADING;
  aError.aFullComment=ruleMatch.getMessage().replaceAll("<suggestion>","\"").replaceAll("</suggestion>","\"").replaceAll("([\r]*\n)"," ");
  if (!StringTools.isEmpty(ruleMatch.getShortMessage())) {
    aError.aShortComment=ruleMatch.getShortMessage();
  }
 else {
    aError.aShortComment=aError.aFullComment;
  }
  aError.aShortComment=org.languagetool.gui.Tools.shortenComment(aError.aShortComment);
  int numSuggestions=ruleMatch.getSuggestedReplacements().size();
  String[] allSuggestions=ruleMatch.getSuggestedReplacements().toArray(new String[numSuggestions]);
  if (numSuggestions > MAX_SUGGESTIONS) {
    aError.aSuggestions=Arrays.copyOfRange(allSuggestions,0,MAX_SUGGESTIONS);
  }
 else {
    aError.aSuggestions=allSuggestions;
  }
  aError.nErrorStart=ruleMatch.getFromPos() + startIndex;
  aError.nErrorLength=ruleMatch.getToPos() - ruleMatch.getFromPos();
  aError.aRuleIdentifier=ruleMatch.getRule().getId();
  if (ruleMatch.getRule().getUrl() != null) {
    aError.aProperties=new PropertyValue[]{new PropertyValue("FullCommentURL",-1,ruleMatch.getRule().getUrl().toString(),PropertyState.DIRECT_VALUE)};
  }
 else {
    aError.aProperties=new PropertyValue[0];
  }
  return aError;
}
