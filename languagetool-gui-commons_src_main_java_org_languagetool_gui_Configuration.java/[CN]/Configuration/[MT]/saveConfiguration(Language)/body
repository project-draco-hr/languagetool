{
  final Properties props=new Properties();
  final String qualifier=getQualifier(lang);
  addListToProperties(props,DISABLED_RULES_CONFIG_KEY + qualifier,disabledRuleIds);
  addListToProperties(props,ENABLED_RULES_CONFIG_KEY + qualifier,enabledRuleIds);
  addListToProperties(props,DISABLED_CATEGORIES_CONFIG_KEY + qualifier,disabledCategoryNames);
  if (language != null && !language.isExternal()) {
    props.setProperty(LANGUAGE_CONFIG_KEY,language.getShortNameWithCountryAndVariant());
  }
  if (motherTongue != null) {
    props.setProperty(MOTHER_TONGUE_CONFIG_KEY,motherTongue.getShortName());
  }
  props.setProperty(AUTO_DETECT_CONFIG_KEY,Boolean.toString(autoDetect));
  props.setProperty(USE_GUI_CONFIG_KEY,Boolean.toString(guiConfig));
  props.setProperty(SERVER_RUN_CONFIG_KEY,Boolean.toString(runServer));
  props.setProperty(SERVER_PORT_CONFIG_KEY,Integer.toString(serverPort));
  if (null != fontName) {
    props.setProperty(FONT_NAME_CONFIG_KEY,fontName);
  }
  if (fontStyle != FONT_STYLE_INVALID) {
    props.setProperty(FONT_STYLE_CONFIG_KEY,Integer.toString(fontStyle));
  }
  if (fontSize != FONT_SIZE_INVALID) {
    props.setProperty(FONT_SIZE_CONFIG_KEY,Integer.toString(fontSize));
  }
  if (null != this.lookAndFeelName) {
    props.setProperty(LF_NAME_CONFIG_KEY,lookAndFeelName);
  }
  if (externalRuleDirectory != null) {
    props.setProperty(EXTERNAL_RULE_DIRECTORY,externalRuleDirectory);
  }
  for (  final String key : configForOtherLangs.keySet()) {
    props.setProperty(key,configForOtherLangs.get(key));
  }
  try (FileOutputStream fos=new FileOutputStream(configFile)){
    props.store(fos,"LanguageTool configuration");
  }
 }
