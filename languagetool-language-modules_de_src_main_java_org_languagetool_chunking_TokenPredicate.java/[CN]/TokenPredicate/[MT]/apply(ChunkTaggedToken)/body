{
  String[] parts=getDescription().split("=");
  String exprType;
  String exprValue;
  if (parts.length == 1) {
    exprType="string";
    exprValue=parts[0];
  }
 else   if (parts.length == 2) {
    exprType=parts[0];
    exprValue=parts[1];
  }
 else {
    throw new RuntimeException("Could not parse expression: " + getDescription());
  }
  if (exprValue.startsWith("'") && exprValue.endsWith("'")) {
    exprValue=exprValue.substring(1,exprValue.length() - 1);
  }
switch (exprType) {
case "string":
    if (caseSensitive) {
      return analyzedToken.getToken().equals(exprValue);
    }
 else {
      return analyzedToken.getToken().equalsIgnoreCase(exprValue);
    }
case "regex":
  Pattern p1=caseSensitive ? Pattern.compile(exprValue) : Pattern.compile(exprValue,Pattern.CASE_INSENSITIVE);
return p1.matcher(analyzedToken.getToken()).matches();
case "regexCS":
Pattern p2=Pattern.compile(exprValue);
return p2.matcher(analyzedToken.getToken()).matches();
case "chunk":
Pattern chunkPattern=Pattern.compile(exprValue);
for (ChunkTag chunkTag : analyzedToken.getChunkTags()) {
if (chunkPattern.matcher(chunkTag.getChunkTag()).matches()) {
return true;
}
}
return false;
case "pos":
AnalyzedTokenReadings readings=analyzedToken.getReadings();
if (readings != null) {
for (AnalyzedToken token : readings) {
if (token.getPOSTag() != null && token.getPOSTag().contains(exprValue)) {
return true;
}
}
}
return false;
case "posre":
case "posregex":
Pattern posPattern=Pattern.compile(exprValue);
AnalyzedTokenReadings readings2=analyzedToken.getReadings();
if (readings2 != null) {
for (AnalyzedToken token : readings2) {
if (token.getPOSTag() != null && posPattern.matcher(token.getPOSTag()).matches()) {
return true;
}
}
}
return false;
default :
throw new RuntimeException("Expression type not supported: '" + exprType + "'");
}
}
