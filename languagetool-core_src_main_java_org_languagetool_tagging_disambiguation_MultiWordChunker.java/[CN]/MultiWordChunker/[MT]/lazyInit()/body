{
  if (mStartSpace != null) {
    return;
  }
  Map<String,Integer> mStartSpace=new HashMap<>();
  Map<String,Integer> mStartNoSpace=new HashMap<>();
  Map<String,String> mFull=new HashMap<>();
  try (InputStream stream=JLanguageTool.getDataBroker().getFromResourceDirAsStream(filename)){
    List<String> posTokens=loadWords(stream);
    for (    String posToken : posTokens) {
      String[] tokenAndTag=posToken.split("\t");
      if (tokenAndTag.length != 2) {
        throw new RuntimeException("Invalid format in " + filename + ": '"+ posToken+ "', expected two tab-separated parts");
      }
      boolean containsSpace=tokenAndTag[0].indexOf(' ') > 0;
      String firstToken;
      String[] firstTokens;
      if (!containsSpace) {
        firstTokens=new String[tokenAndTag[0].length()];
        firstToken=tokenAndTag[0].substring(0,1);
        for (int i=1; i < tokenAndTag[0].length(); i++) {
          firstTokens[i]=tokenAndTag[0].substring(i - 1,i);
        }
        if (mStartNoSpace.containsKey(firstToken)) {
          if (mStartNoSpace.get(firstToken) < firstTokens.length) {
            mStartNoSpace.put(firstToken,firstTokens.length);
          }
        }
 else {
          mStartNoSpace.put(firstToken,firstTokens.length);
        }
      }
 else {
        firstTokens=tokenAndTag[0].split(" ");
        firstToken=firstTokens[0];
        if (mStartSpace.containsKey(firstToken)) {
          if (mStartSpace.get(firstToken) < firstTokens.length) {
            mStartSpace.put(firstToken,firstTokens.length);
          }
        }
 else {
          mStartSpace.put(firstToken,firstTokens.length);
        }
      }
      mFull.put(tokenAndTag[0],tokenAndTag[1]);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.mStartSpace=mStartSpace;
  this.mStartNoSpace=mStartNoSpace;
  this.mFull=mFull;
}
