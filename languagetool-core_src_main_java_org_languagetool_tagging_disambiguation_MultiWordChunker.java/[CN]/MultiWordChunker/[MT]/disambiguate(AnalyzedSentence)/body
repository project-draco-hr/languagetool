{
  lazyInit();
  final AnalyzedTokenReadings[] anTokens=input.getTokens();
  final AnalyzedTokenReadings[] output=anTokens;
  for (int i=0; i < anTokens.length; i++) {
    String tok=output[i].getToken();
    if (tok.length() < 1) {
      continue;
    }
    if (i + 1 < anTokens.length && !anTokens[i + 1].isWhitespace()) {
      tok=tok.concat(output[i + 1].getToken());
    }
    int myCount=0;
    while (myCount < 2) {
      final StringBuilder tokens=new StringBuilder();
      int finalLen=0;
      if (mStartSpace.containsKey(tok)) {
        final int len=mStartSpace.get(tok);
        int j=i;
        int lenCounter=0;
        while (j < anTokens.length) {
          if (!anTokens[j].isWhitespace()) {
            if ((j == i) && (myCount == 1)) {
              tokens.append(anTokens[j].getToken().toLowerCase());
            }
 else {
              tokens.append(anTokens[j].getToken());
            }
            final String toks=tokens.toString();
            if (mFull.containsKey(toks)) {
              output[i]=prepareNewReading(toks,output[i].getToken(),output[i],false);
              output[finalLen]=prepareNewReading(toks,anTokens[finalLen].getToken(),output[finalLen],true);
            }
          }
 else {
            if (j > 1 && !anTokens[j - 1].isWhitespace()) {
              tokens.append(' ');
              lenCounter++;
            }
            if (lenCounter == len) {
              break;
            }
          }
          j++;
          finalLen=j;
        }
      }
      if (mStartNoSpace.containsKey(tok.substring(0,1))) {
        int j=i;
        while (j < anTokens.length && !anTokens[j].isWhitespace()) {
          if ((j == i) && (myCount == 1)) {
            tokens.append(anTokens[j].getToken().toLowerCase());
          }
 else {
            tokens.append(anTokens[j].getToken());
          }
          final String toks=tokens.toString();
          if (mFull.containsKey(toks)) {
            output[i]=prepareNewReading(toks,anTokens[i].getToken(),output[i],false);
            output[j]=prepareNewReading(toks,anTokens[j].getToken(),output[j],true);
          }
          j++;
        }
      }
      myCount++;
      if (allowFirstCapitalized && StringTools.isCapitalizedWord(tok) && myCount == 1) {
        tok=tok.toLowerCase();
      }
 else {
        myCount=2;
      }
    }
  }
  return new AnalyzedSentence(output);
}
