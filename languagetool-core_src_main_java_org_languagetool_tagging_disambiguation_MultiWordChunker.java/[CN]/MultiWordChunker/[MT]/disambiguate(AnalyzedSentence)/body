{
  lazyInit();
  final AnalyzedTokenReadings[] anTokens=input.getTokens();
  final AnalyzedTokenReadings[] output=anTokens;
  for (int i=0; i < anTokens.length; i++) {
    String tok=output[i].getToken();
    int myCount=0;
    while (myCount < 2) {
      final StringBuilder tokens=new StringBuilder();
      int finalLen=0;
      if (mStartSpace.containsKey(tok)) {
        final int len=mStartSpace.get(tok);
        int j=i;
        int lenCounter=0;
        while (j < anTokens.length) {
          if (!anTokens[j].isWhitespace()) {
            if ((j == i) && (myCount == 1)) {
              tokens.append(anTokens[j].getToken().toLowerCase());
            }
 else {
              tokens.append(anTokens[j].getToken());
            }
            final String toks=tokens.toString();
            if (mFull.containsKey(toks)) {
              output[i]=prepareNewReading(toks,tok,output[i],false);
              output[finalLen]=prepareNewReading(toks,anTokens[finalLen].getToken(),output[finalLen],true);
            }
            lenCounter++;
            if (lenCounter == len) {
              break;
            }
            tokens.append(' ');
          }
          j++;
          finalLen=j;
        }
      }
      if (mStartNoSpace.containsKey(tok)) {
        final int len=mStartNoSpace.get(tok);
        if (i + len <= anTokens.length) {
          for (int j=i; j < i + len; j++) {
            if ((j == i) && (myCount == 1)) {
              tokens.append(anTokens[j].getToken().toLowerCase());
            }
 else {
              tokens.append(anTokens[j].getToken());
            }
            final String toks=tokens.toString();
            if (mFull.containsKey(toks)) {
              output[i]=prepareNewReading(toks,tok,output[i],false);
              output[i + len - 1]=prepareNewReading(toks,anTokens[i + len - 1].getToken(),output[i + len - 1],true);
            }
          }
        }
      }
      myCount++;
      if (bAllowFirstCapitalized && StringTools.isCapitalizedWord(tok)) {
        if (myCount == 1) {
          tok=tok.toLowerCase();
        }
      }
 else {
        myCount=2;
      }
    }
  }
  return new AnalyzedSentence(output);
}
