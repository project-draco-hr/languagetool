{
  lazyInit();
  final AnalyzedTokenReadings[] anTokens=input.getTokens();
  final AnalyzedTokenReadings[] output=anTokens;
  for (int i=0; i < anTokens.length; i++) {
    final String tok=output[i].getToken();
    final StringBuilder tokens=new StringBuilder();
    int finalLen=0;
    if (mStartSpace.containsKey(tok)) {
      final int len=mStartSpace.get(tok);
      int j=i;
      int lenCounter=0;
      while (j < anTokens.length) {
        if (!anTokens[j].isWhitespace()) {
          tokens.append(anTokens[j].getToken());
          final String toks=tokens.toString();
          if (mFull.containsKey(toks)) {
            output[i]=prepareNewReading(toks,tok,output[i],false);
            output[finalLen]=prepareNewReading(toks,anTokens[finalLen].getToken(),output[finalLen],true);
          }
          lenCounter++;
          if (lenCounter == len) {
            break;
          }
          tokens.append(' ');
        }
        j++;
        finalLen=j;
      }
    }
    if (mStartNoSpace.containsKey(tok)) {
      final int len=mStartNoSpace.get(tok);
      if (i + len <= anTokens.length) {
        for (int j=i; j < i + len; j++) {
          tokens.append(anTokens[j].getToken());
          final String toks=tokens.toString();
          if (mFull.containsKey(toks)) {
            output[i]=prepareNewReading(toks,tok,output[i],false);
            output[i + len - 1]=prepareNewReading(toks,anTokens[i + len - 1].getToken(),output[i + len - 1],true);
          }
        }
      }
    }
  }
  return new AnalyzedSentence(output);
}
