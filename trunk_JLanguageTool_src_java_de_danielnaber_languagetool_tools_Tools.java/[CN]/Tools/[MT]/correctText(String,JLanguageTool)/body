{
  final List<RuleMatch> ruleMatches=lt.check(contents);
  if (!ruleMatches.isEmpty()) {
    final StringBuilder sb=new StringBuilder(contents);
    List<String> errors=new ArrayList<String>();
    for (    RuleMatch rm : ruleMatches) {
      final List<String> replacements=rm.getSuggestedReplacements();
      if (!replacements.isEmpty()) {
        errors.add(sb.substring(rm.getFromPos(),rm.getToPos()));
      }
    }
    int offset=0;
    int counter=0;
    for (    RuleMatch rm : ruleMatches) {
      final List<String> replacements=rm.getSuggestedReplacements();
      if (!replacements.isEmpty()) {
        if (errors.get(counter).equals(sb.substring(rm.getFromPos() - offset,rm.getToPos() - offset))) {
          sb.replace(rm.getFromPos() - offset,rm.getToPos() - offset,replacements.get(0));
          offset+=(rm.getToPos() - rm.getFromPos()) - replacements.get(0).length();
        }
        counter++;
      }
    }
    return sb.toString();
  }
  return contents;
}
