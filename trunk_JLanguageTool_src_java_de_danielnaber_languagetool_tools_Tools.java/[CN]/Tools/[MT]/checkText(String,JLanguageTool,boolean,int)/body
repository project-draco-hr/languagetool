{
  if (contextSize == -1) {
    contextSize=DEFAULT_CONTEXT_SIZE;
  }
  long startTime=System.currentTimeMillis();
  List<RuleMatch> ruleMatches=lt.check(contents);
  if (apiFormat) {
    String xml=StringTools.ruleMatchesToXML(ruleMatches,contents,contextSize);
    System.out.print(xml);
  }
 else {
    int i=1;
    for (Iterator<RuleMatch> iter=ruleMatches.iterator(); iter.hasNext(); ) {
      RuleMatch match=(RuleMatch)iter.next();
      System.out.println(i + ".) Line " + (match.getLine() + 1)+ ", column "+ match.getColumn()+ ", Rule ID: "+ match.getRule().getId());
      String msg=match.getMessage();
      msg=msg.replaceAll("<suggestion>","'");
      msg=msg.replaceAll("</suggestion>","'");
      System.out.println("Message: " + msg);
      List repl=match.getSuggestedReplacements();
      if (repl.size() > 0)       System.out.println("Suggestion: " + StringTools.listToString(repl,"; "));
      System.out.println(StringTools.getContext(match.getFromPos(),match.getToPos(),contents,contextSize));
      if (iter.hasNext())       System.out.println();
      i++;
    }
  }
  long endTime=System.currentTimeMillis();
  long time=endTime - startTime;
  float timeInSeconds=(float)time / 1000.0f;
  float sentencesPerSecond=(float)lt.getSentenceCount() / (float)timeInSeconds;
  if (apiFormat) {
    System.out.println("<!--");
  }
  System.out.printf(Locale.ENGLISH,"Time: %dms for %d sentences (%.1f sentences/sec)\n",time,lt.getSentenceCount(),sentencesPerSecond);
  if (apiFormat) {
    System.out.println("-->");
  }
  return ruleMatches.size();
}
