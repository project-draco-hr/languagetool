{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokens();
  int startTokenIdx=-1;
  String tkns="";
  for (int i=0; i < tokens.length; i++) {
    final String tokenStr=tokens[i].getToken();
    if (isPunctuation(tokenStr)) {
      tkns+=tokenStr;
      if (startTokenIdx == -1)       startTokenIdx=i;
      if (i < tokens.length - 1)       continue;
    }
    if (tkns.length() >= 2 && !isPunctsJoinOk(tkns)) {
      final String msg="bad duplication or combination of punctuation signs";
      RuleMatch ruleMatch=new RuleMatch(this,tokens[startTokenIdx].getStartPos(),tokens[startTokenIdx].getStartPos() + tkns.length(),msg,"Punctuation problem");
      ruleMatch.setSuggestedReplacement(tkns.substring(0,1));
      ruleMatches.add(ruleMatch);
    }
    tkns="";
    startTokenIdx=-1;
  }
  return toRuleMatchArray(ruleMatches);
}
