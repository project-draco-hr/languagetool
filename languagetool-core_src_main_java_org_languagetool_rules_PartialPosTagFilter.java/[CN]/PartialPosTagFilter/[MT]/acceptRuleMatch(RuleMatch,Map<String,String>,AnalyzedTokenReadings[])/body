{
  if (!(args.containsKey("no") && args.containsKey("regexp") && args.containsKey("postag_regexp"))) {
    throw new RuntimeException("Set 'no', 'regexp' and 'postag_regexp' for filter " + PartialPosTagFilter.class.getSimpleName());
  }
  int tokenPos=Integer.parseInt(args.get("no"));
  Pattern pattern=Pattern.compile(args.get("regexp"));
  String requiredTagRegexp=args.get("postag_regexp");
  boolean negatePos=args.containsKey("negate_pos");
  String token=patternTokens[tokenPos - 1].getToken();
  Matcher matcher=pattern.matcher(token);
  if (matcher.groupCount() != 1) {
    throw new RuntimeException("Got " + matcher.groupCount() + " groups for regex '"+ pattern.pattern()+ "', expected 1");
  }
  if (matcher.matches()) {
    String partialToken=matcher.group(1);
    List<AnalyzedTokenReadings> tags=tag(partialToken);
    if (tags != null && partialTagHasRequiredTag(tags,requiredTagRegexp,negatePos)) {
      return match;
    }
    return null;
  }
  return null;
}
