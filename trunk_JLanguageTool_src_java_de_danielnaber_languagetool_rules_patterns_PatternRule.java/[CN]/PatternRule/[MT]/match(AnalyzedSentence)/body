{
  List ruleMatches=new ArrayList();
  AnalyzedToken[] tokens=text.getTokensWithoutWhitespace();
  if (patternElements == null) {
    patternElements=getPatternElements(pattern);
  }
  int tokenPos=0;
  AnalyzedToken firstMatchToken=null;
  AnalyzedToken lastMatchToken=null;
  for (int i=0; i < tokens.length; i++) {
    boolean allElementsMatch=true;
    for (int k=0; k < patternElements.length; k++) {
      Element elem=patternElements[k];
      int nextPos=tokenPos + k;
      if (nextPos >= tokens.length) {
        allElementsMatch=false;
        break;
      }
      AnalyzedToken matchToken=tokens[nextPos];
      if (!elem.match(matchToken)) {
        allElementsMatch=false;
        break;
      }
 else {
        lastMatchToken=matchToken;
        if (firstMatchToken == null)         firstMatchToken=matchToken;
      }
    }
    if (allElementsMatch) {
      RuleMatch ruleMatch=new RuleMatch(this,firstMatchToken.getStartPos(),lastMatchToken.getStartPos() + lastMatchToken.getToken().length(),message);
      ruleMatches.add(ruleMatch);
    }
 else {
      firstMatchToken=null;
      lastMatchToken=null;
    }
    tokenPos++;
  }
  return (RuleMatch[])ruleMatches.toArray(new RuleMatch[0]);
}
