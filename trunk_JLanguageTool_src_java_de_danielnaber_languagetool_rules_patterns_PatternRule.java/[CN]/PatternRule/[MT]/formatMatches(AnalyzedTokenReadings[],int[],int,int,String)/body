{
  String errorMessage=errorMsg;
  int matchCounter=0;
  final int[] numbersToMatches=new int[errorMsg.length()];
  boolean newWay=false;
  int errLen=errorMessage.length();
  int errMarker=errorMessage.indexOf("\\");
  boolean numberFollows=false;
  if (errMarker > 0 & errMarker < errLen - 1) {
    numberFollows=errorMessage.charAt(errMarker + 1) >= '1' & errorMessage.charAt(errMarker + 1) <= '9';
  }
  while (errMarker > 0 && numberFollows) {
    final int ind=errorMessage.indexOf("\\");
    if (ind > 0) {
      if (errorMessage.charAt(ind + 1) >= '1' && errorMessage.charAt(ind + 1) <= '9') {
        final int j=errorMessage.charAt(ind + 1) - '1';
        int repTokenPos=0;
        for (int l=0; l <= j; l++) {
          repTokenPos+=positions[l];
        }
        if (suggestionMatches != null) {
          if (matchCounter < suggestionMatches.size()) {
            numbersToMatches[j]=matchCounter;
            if (suggestionMatches.get(matchCounter) != null) {
              suggestionMatches.get(matchCounter).setToken(toks[firstMatchTok + repTokenPos - 1]);
              suggestionMatches.get(matchCounter).setSynthesizer(language[0].getSynthesizer());
              final String leftSide=errorMessage.substring(0,ind);
              String suggestionLeft="";
              String suggestionRight="";
              String rightSide=errorMessage.substring(ind + 2);
              final String[] matches=suggestionMatches.get(matchCounter).toFinalString();
              if (matches.length == 1) {
                errorMessage=leftSide + suggestionLeft + matches[0]+ suggestionRight+ rightSide;
              }
 else {
                suggestionLeft=leftSide.substring(leftSide.lastIndexOf("<suggestion>") + "<suggestion>".length());
                if (suggestionLeft.equals("")) {
                  errorMessage=leftSide;
                }
 else {
                  errorMessage=leftSide.substring(0,leftSide.lastIndexOf("<suggestion>")) + "<suggestion>";
                }
                suggestionRight=rightSide.substring(0,rightSide.indexOf("</suggestion>"));
                if (!suggestionRight.equals("")) {
                  rightSide=rightSide.substring(rightSide.indexOf("</suggestion>"));
                }
                final int lastLeftSugEnd=leftSide.indexOf("</suggestion>");
                final int lastLeftSugStart=leftSide.lastIndexOf("<suggestion>");
                for (                final String formatMatch : matches) {
                  errorMessage+=suggestionLeft + formatMatch + suggestionRight;
                  if (lastLeftSugEnd < lastLeftSugStart && lastLeftSugStart > 0) {
                    errorMessage+="</suggestion>, <suggestion>";
                  }
                }
                final int correctionSug=errorMessage.lastIndexOf(", <suggestion>");
                if (correctionSug + ", <suggestion>".length() == errorMessage.length()) {
                  errorMessage=errorMessage.substring(0,correctionSug);
                }
                errorMessage+=rightSide;
              }
              matchCounter++;
              newWay=true;
            }
          }
 else {
            suggestionMatches.add(suggestionMatches.get(numbersToMatches[j]));
          }
        }
        if (!newWay) {
          errorMessage=errorMessage.replaceAll("\\\\" + (j + 1),toks[firstMatchTok + repTokenPos - 1].getToken());
          errMarker=errorMessage.indexOf("\\");
          numberFollows=false;
          errLen=errorMessage.length();
          if (errMarker > 0 & errMarker < errLen - 1) {
            numberFollows=errorMessage.charAt(errMarker + 1) >= '1' & errorMessage.charAt(errMarker + 1) <= '9';
          }
        }
      }
    }
    errMarker=errorMessage.indexOf("\\");
    numberFollows=false;
    errLen=errorMessage.length();
    if (errMarker > 0 & errMarker < errLen - 1) {
      numberFollows=errorMessage.charAt(errMarker + 1) >= '1' & errorMessage.charAt(errMarker + 1) <= '9';
    }
  }
  return errorMessage;
}
