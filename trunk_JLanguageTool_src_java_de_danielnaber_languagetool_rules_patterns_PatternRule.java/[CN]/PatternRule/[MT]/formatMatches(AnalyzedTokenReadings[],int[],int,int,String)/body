{
  String errorMessage=errorMsg;
  if (firstMatchTok + matchingTok >= toks.length) {
    matchingTok=toks.length - firstMatchTok;
  }
  int matchCounter=0;
  for (int j=0; j < matchingTok; j++) {
    int repTokenPos=0;
    for (int l=0; l <= j; l++) {
      repTokenPos+=positions[l];
    }
    if (errorMessage.indexOf("\\" + (j + 1)) > 0) {
      boolean newWay=false;
      if (suggestionMatches != null) {
        if (matchCounter < suggestionMatches.size()) {
          if (suggestionMatches.get(matchCounter) != null) {
            while (errorMessage.indexOf("\\" + (j + 1)) > 0) {
              suggestionMatches.get(matchCounter).setToken(toks[firstMatchTok + repTokenPos - 1]);
              suggestionMatches.get(matchCounter).setSynthesizer(language[0].getSynthesizer());
              int ind=errorMessage.indexOf("\\" + (j + 1));
              String leftSide=errorMessage.substring(0,ind);
              String suggestionLeft="";
              String suggestionRight="";
              String rightSide=errorMessage.substring(ind + 2);
              String[] matches=suggestionMatches.get(matchCounter).toFinalString();
              if (matches.length == 1) {
                errorMessage=leftSide + suggestionLeft + matches[0]+ suggestionRight+ rightSide;
              }
 else {
                errorMessage=leftSide;
                String prevMatch="";
                int lastLeftSugEnd=leftSide.indexOf("</suggestion>");
                int lastLeftSugStart=leftSide.lastIndexOf("<suggestion>");
                for (                String formatMatch : matches) {
                  if (!prevMatch.equals(formatMatch)) {
                    errorMessage+=suggestionLeft + formatMatch + suggestionRight;
                    if (lastLeftSugEnd == -1 && lastLeftSugStart > 0) {
                      errorMessage+="</suggestion>, <suggestion>";
                    }
                  }
                  prevMatch=formatMatch;
                }
                int correctionSug=errorMessage.lastIndexOf("<suggestion>");
                if (correctionSug + "<suggestion>".length() == errorMessage.length())                 errorMessage=errorMessage.substring(0,correctionSug);
                errorMessage+=rightSide;
              }
              matchCounter++;
              newWay=true;
            }
          }
        }
      }
      if (!newWay) {
        errorMessage=errorMessage.replaceAll("\\\\" + (j + 1),toks[firstMatchTok + repTokenPos - 1].getToken());
      }
    }
  }
  return errorMessage;
}
