{
  String errorMessage=errorMsg;
  if (firstMatchTok + matchingTok >= toks.length) {
    matchingTok=toks.length - firstMatchTok;
  }
  int matchCounter=0;
  boolean newWay=false;
  int errLen=errorMessage.length();
  int errMarker=errorMessage.indexOf("\\");
  boolean numberFollows=false;
  if (errMarker > 0 & errMarker < errLen - 1) {
    numberFollows=errorMessage.charAt(errMarker + 1) >= '1' & errorMessage.charAt(errMarker + 1) <= '9';
  }
  while (errMarker > 0 & numberFollows) {
    int ind=errorMessage.indexOf("\\");
    if (ind > 0) {
      if (errorMessage.charAt(ind + 1) >= '1' & errorMessage.charAt(ind + 1) <= '9') {
        int j=errorMessage.charAt(ind + 1) - '1';
        int repTokenPos=0;
        for (int l=0; l <= j; l++) {
          repTokenPos+=positions[l];
        }
        if (suggestionMatches != null) {
          if (matchCounter < suggestionMatches.size()) {
            if (suggestionMatches.get(matchCounter) != null) {
              suggestionMatches.get(matchCounter).setToken(toks[firstMatchTok + repTokenPos - 1]);
              suggestionMatches.get(matchCounter).setSynthesizer(language[0].getSynthesizer());
              String leftSide=errorMessage.substring(0,ind);
              String suggestionLeft="";
              String suggestionRight="";
              String rightSide=errorMessage.substring(ind + 2);
              String[] matches=suggestionMatches.get(matchCounter).toFinalString();
              if (matches.length == 1) {
                errorMessage=leftSide + suggestionLeft + matches[0]+ suggestionRight+ rightSide;
              }
 else {
                errorMessage=leftSide;
                int lastLeftSugEnd=leftSide.indexOf("</suggestion>");
                int lastLeftSugStart=leftSide.lastIndexOf("<suggestion>");
                for (                String formatMatch : matches) {
                  errorMessage+=suggestionLeft + formatMatch + suggestionRight;
                  if (lastLeftSugEnd == -1 && lastLeftSugStart > 0) {
                    errorMessage+="</suggestion>, <suggestion>";
                  }
                }
                int correctionSug=errorMessage.lastIndexOf("<suggestion>");
                if (correctionSug + "<suggestion>".length() == errorMessage.length())                 errorMessage=errorMessage.substring(0,correctionSug);
                errorMessage+=rightSide;
              }
              matchCounter++;
              newWay=true;
            }
          }
        }
        if (!newWay) {
          errorMessage=errorMessage.replaceAll("\\\\" + (j + 1),toks[firstMatchTok + repTokenPos - 1].getToken());
          errMarker=errorMessage.indexOf("\\");
          numberFollows=false;
          errLen=errorMessage.length();
          if (errMarker > 0 & errMarker < errLen - 1) {
            numberFollows=errorMessage.charAt(errMarker + 1) >= '1' & errorMessage.charAt(errMarker + 1) <= '9';
          }
        }
      }
    }
 else {
      errMarker=errorMessage.indexOf("\\");
      numberFollows=false;
      errLen=errorMessage.length();
      if (errMarker > 0 & errMarker < errLen - 1) {
        numberFollows=errorMessage.charAt(errMarker + 1) >= '1' & errorMessage.charAt(errMarker + 1) <= '9';
      }
    }
  }
  return errorMessage;
}
