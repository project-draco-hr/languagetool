{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  if (tokens.length < 2) {
    return toRuleMatchArray(ruleMatches);
  }
  int matchTokenPos=1;
  final AnalyzedToken token=tokens[matchTokenPos].getAnalyzedToken(0);
  final String firstToken=token.getToken();
  String secondToken=null;
  String thirdToken=null;
  if (tokens.length >= 3 && ("'".equals(firstToken) || "\"".equals(firstToken) || "???".equals(firstToken))) {
    matchTokenPos=2;
    secondToken=tokens[matchTokenPos].getAnalyzedToken(0).getToken();
  }
  final String firstDutchToken=dutchSpecialCase(firstToken,secondToken,tokens);
  if (firstDutchToken != null) {
    thirdToken=firstDutchToken;
    matchTokenPos=3;
  }
  String checkToken=firstToken;
  if (thirdToken != null) {
    checkToken=thirdToken;
  }
 else   if (secondToken != null) {
    checkToken=secondToken;
  }
  final char firstChar=checkToken.charAt(0);
  if (Character.isLowerCase(firstChar)) {
    final RuleMatch ruleMatch=new RuleMatch(this,tokens[matchTokenPos].getStartPos(),tokens[matchTokenPos].getStartPos() + tokens[matchTokenPos].getToken().length(),messages.getString("incorrect_case"));
    ruleMatch.setSuggestedReplacement(Character.toUpperCase(firstChar) + checkToken.substring(1));
    ruleMatches.add(ruleMatch);
  }
  return toRuleMatchArray(ruleMatches);
}
