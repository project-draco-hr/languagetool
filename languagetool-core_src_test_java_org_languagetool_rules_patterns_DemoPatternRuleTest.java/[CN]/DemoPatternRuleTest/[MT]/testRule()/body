{
  PatternRule pr;
  RuleMatch[] matches;
  JLanguageTool langTool=new JLanguageTool(language);
  pr=makePatternRule("one");
  matches=pr.match(langTool.getAnalyzedSentence("A non-matching sentence."));
  assertEquals(0,matches.length);
  matches=pr.match(langTool.getAnalyzedSentence("A matching sentence with one match."));
  assertEquals(1,matches.length);
  assertEquals(25,matches[0].getFromPos());
  assertEquals(28,matches[0].getToPos());
  assertEquals(-1,matches[0].getColumn());
  assertEquals(-1,matches[0].getLine());
  assertEquals("ID1",matches[0].getRule().getId());
  assertTrue(matches[0].getMessage().equals("user visible message"));
  assertTrue(matches[0].getShortMessage().equals("short comment"));
  matches=pr.match(langTool.getAnalyzedSentence("one one and one: three matches"));
  assertEquals(3,matches.length);
  pr=makePatternRule("one two");
  matches=pr.match(langTool.getAnalyzedSentence("this is one not two"));
  assertEquals(0,matches.length);
  matches=pr.match(langTool.getAnalyzedSentence("this is two one"));
  assertEquals(0,matches.length);
  matches=pr.match(langTool.getAnalyzedSentence("this is one two three"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedSentence("one two"));
  assertEquals(1,matches.length);
  pr=makePatternRule("one|foo|xxxx two",false,true);
  matches=pr.match(langTool.getAnalyzedSentence("one foo three"));
  assertEquals(0,matches.length);
  matches=pr.match(langTool.getAnalyzedSentence("one two"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedSentence("foo two"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedSentence("one foo two"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedSentence("y x z one two blah foo"));
  assertEquals(1,matches.length);
  pr=makePatternRule("one|foo|xxxx two|yyy",false,true);
  matches=pr.match(langTool.getAnalyzedSentence("one, yyy"));
  assertEquals(0,matches.length);
  matches=pr.match(langTool.getAnalyzedSentence("one yyy"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedSentence("xxxx two"));
  assertEquals(1,matches.length);
  matches=pr.match(langTool.getAnalyzedSentence("xxxx yyy"));
  assertEquals(1,matches.length);
}
