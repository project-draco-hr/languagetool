{
  AnalyzedTokenReadings tokenReadings=new AnalyzedTokenReadings(new AnalyzedToken("word","POS","lemma"));
  assertEquals(false,tokenReadings.isLinebreak());
  assertEquals(false,tokenReadings.isSentenceEnd());
  assertEquals(false,tokenReadings.isParagraphEnd());
  assertEquals(false,tokenReadings.isSentenceStart());
  tokenReadings.setSentEnd();
  assertEquals(false,tokenReadings.isSentenceStart());
  assertEquals(true,tokenReadings.isSentenceEnd());
  tokenReadings=new AnalyzedTokenReadings(new AnalyzedToken("word",null,"lemma"));
  tokenReadings.addReading(new AnalyzedToken("word","SENT_END",null));
  assertEquals(true,tokenReadings.isSentenceEnd());
  assertEquals(false,tokenReadings.isParagraphEnd());
  tokenReadings.addReading(new AnalyzedToken("word","PARA_END",null));
  assertEquals(true,tokenReadings.isParagraphEnd());
  assertEquals(false,tokenReadings.isSentenceStart());
  tokenReadings.addReading(new AnalyzedToken("word","SENT_START",null));
  assertEquals(false,tokenReadings.isSentenceStart());
  AnalyzedToken aTok=new AnalyzedToken("word","POS","lemma");
  aTok.setWhitespaceBefore(true);
  tokenReadings=new AnalyzedTokenReadings(aTok);
  assertEquals(aTok,tokenReadings.getAnalyzedToken(0));
  AnalyzedToken aTok2=new AnalyzedToken("word","POS","lemma");
  assertTrue(!aTok2.equals(tokenReadings.getAnalyzedToken(0)));
  AnalyzedToken aTok3=new AnalyzedToken("word","POS","lemma");
  aTok3.setWhitespaceBefore(true);
  assertEquals(aTok3,tokenReadings.getAnalyzedToken(0));
  AnalyzedTokenReadings testReadings=new AnalyzedTokenReadings(aTok3);
  testReadings.removeReading(aTok3);
  assertTrue(testReadings.getReadingsLength() == 1);
  assertEquals("word",testReadings.getToken());
  assertTrue(!testReadings.hasPosTag("POS"));
  testReadings.leaveReading(aTok2);
  assertEquals("word",testReadings.getToken());
  assertTrue(!testReadings.hasPosTag("POS"));
  testReadings.removeReading(aTok2);
  assertEquals("word",testReadings.getToken());
  assertTrue(!testReadings.hasPosTag("POS"));
}
