{
  final Unifier uni=new Unifier();
  final Element sgElement=new Element("",false,false,false);
  sgElement.setPosElement(".*[\\.:]sg:.*",true,false);
  uni.setEquivalence("number","singular",sgElement);
  final Element plElement=new Element("",false,false,false);
  plElement.setPosElement(".*[\\.:]pl:.*",true,false);
  uni.setEquivalence("number","plural",plElement);
  final Element femElement=new Element("",false,false,false);
  femElement.setPosElement(".*[\\.:]f([\\.:].*)?",true,false);
  uni.setEquivalence("gender","feminine",femElement);
  final Element mascElement=new Element("",false,false,false);
  mascElement.setPosElement(".*[\\.:]m([\\.:].*)?",true,false);
  uni.setEquivalence("gender","masculine",mascElement);
  final Element neutElement=new Element("",false,false,false);
  neutElement.setPosElement(".*[\\.:]n([\\.:].*)?",true,false);
  uni.setEquivalence("gender","neutral",neutElement);
  final AnalyzedToken sing1=new AnalyzedToken("ma??y","adj:sg:blahblah:m","ma??y");
  AnalyzedToken sing1a=new AnalyzedToken("ma??y","adj:pl:blahblah:f","ma??y");
  AnalyzedToken sing1b=new AnalyzedToken("ma??y","adj:pl:blahblah:f","ma??y");
  AnalyzedToken sing2=new AnalyzedToken("zgarbiony","adj:pl:blahblah:f","zgarbiony");
  final AnalyzedToken sing3=new AnalyzedToken("cz??owiek","subst:sg:blahblah:m","cz??owiek");
  final Map<String,List<String>> equiv=new HashMap<String,List<String>>();
  equiv.put("number",null);
  equiv.put("gender",null);
  boolean satisfied=uni.isSatisfied(sing1,equiv);
  satisfied|=uni.isSatisfied(sing1a,equiv);
  satisfied|=uni.isSatisfied(sing1b,equiv);
  uni.startUnify();
  satisfied&=uni.isSatisfied(sing2,equiv);
  uni.startNextToken();
  satisfied&=uni.isSatisfied(sing3,equiv);
  uni.startNextToken();
  assertEquals(false,satisfied);
  uni.reset();
  satisfied=true;
  satisfied&=uni.isUnified(sing1,equiv,false,false);
  satisfied&=uni.isUnified(sing1a,equiv,false,false);
  satisfied&=uni.isUnified(sing1b,equiv,false,true);
  satisfied&=uni.isUnified(sing2,equiv,false,true);
  satisfied&=uni.isUnified(sing3,equiv,false,true);
  assertEquals(false,satisfied);
  uni.reset();
  sing1a=new AnalyzedToken("osobiste","adj:pl:nom.acc.voc:f.n.m2.m3:pos:aff","osobisty");
  sing1b=new AnalyzedToken("osobiste","adj:sg:nom.acc.voc:n:pos:aff","osobisty");
  sing2=new AnalyzedToken("god??o","subst:sg:nom.acc.voc:n","god??o");
  satisfied=true;
  satisfied&=uni.isUnified(sing1a,equiv,false,false);
  satisfied&=uni.isUnified(sing1b,equiv,false,true);
  satisfied&=uni.isUnified(sing2,equiv,false,true);
  assertEquals(true,satisfied);
  assertEquals("[osobisty/adj:sg:nom.acc.voc:n:pos:aff, god??o/subst:sg:nom.acc.voc:n]",Arrays.toString(uni.getFinalUnified()));
  uni.reset();
  sing1a=new AnalyzedToken("osobiste","adj:pl:nom.acc.voc:f.n.m2.m3:pos:aff","osobisty");
  sing1b=new AnalyzedToken("osobiste","adj:sg:nom.acc.voc:n:pos:aff","osobisty");
  final AnalyzedToken sing2a=new AnalyzedToken("god??o","subst:sg:nom.acc.voc:n","god??o");
  final AnalyzedToken sing2b=new AnalyzedToken("god??o","indecl","god??o");
  satisfied=true;
  satisfied&=uni.isUnified(sing1a,equiv,false,false);
  satisfied&=uni.isUnified(sing1b,equiv,false,true);
  satisfied&=uni.isUnified(sing2a,equiv,false,false);
  satisfied&=uni.isUnified(sing2b,equiv,false,true);
  assertEquals(true,satisfied);
  assertEquals("[osobisty/adj:sg:nom.acc.voc:n:pos:aff, god??o/subst:sg:nom.acc.voc:n]",Arrays.toString(uni.getFinalUnified()));
  uni.reset();
}
