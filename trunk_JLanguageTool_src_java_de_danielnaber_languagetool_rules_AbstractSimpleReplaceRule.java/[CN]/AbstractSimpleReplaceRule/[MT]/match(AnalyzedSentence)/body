{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  for (int i=1; i < tokens.length; i++) {
    final String token=tokens[i].getToken();
    final String origToken=token;
    final String replacement=isCaseSensitive() ? wrongWords.get(token) : wrongWords.get(token.toLowerCase(getLocale()));
    if (replacement != null) {
      final String msg=token + " is not valid, use " + replacement;
      final int pos=tokens[i].getStartPos();
      final RuleMatch potentialRuleMatch=new RuleMatch(this,pos,pos + origToken.length(),msg,"Wrong word");
      if (!isCaseSensitive() && StringTools.startsWithUppercase(token)) {
        potentialRuleMatch.setSuggestedReplacement(StringTools.uppercaseFirstChar(replacement));
      }
 else {
        potentialRuleMatch.setSuggestedReplacement(replacement);
      }
      ruleMatches.add(potentialRuleMatch);
    }
  }
  return toRuleMatchArray(ruleMatches);
}
