{
  Unifier uni=new Unifier();
  Element elLower=new Element("\\p{Ll}+",true,true,false);
  Element elUpper=new Element("\\p{Lu}\\p{Ll}+",true,true,false);
  Element elAllUpper=new Element("\\p{Lu}+$",true,true,false);
  uni.setEquivalence("case-sensitivity","lowercase",elLower);
  uni.setEquivalence("case-sensitivity","uppercase",elUpper);
  uni.setEquivalence("case-sensitivity","alluppercase",elAllUpper);
  AnalyzedToken lower1=new AnalyzedToken("lower","JJR","lower");
  AnalyzedToken lower2=new AnalyzedToken("lowercase","JJ","lowercase");
  AnalyzedToken upper1=new AnalyzedToken("Uppercase","JJ","Uppercase");
  AnalyzedToken upper2=new AnalyzedToken("John","NNP","John");
  AnalyzedToken upperall1=new AnalyzedToken("JOHN","NNP","John");
  AnalyzedToken upperall2=new AnalyzedToken("JAMES","NNP","James");
  Map<String,List<String>> equiv=new HashMap<String,List<String>>();
  List<String> list1=new ArrayList<String>();
  list1.add("lowercase");
  equiv.put("case-sensitivity",list1);
  boolean satisfied=uni.isSatisfied(lower1,equiv);
  satisfied&=uni.isSatisfied(lower2,equiv);
  uni.startUnify();
  assertEquals(true,satisfied);
  uni.reset();
  satisfied=uni.isSatisfied(upper2,equiv);
  uni.startUnify();
  satisfied&=uni.isSatisfied(lower2,equiv);
  assertEquals(false,satisfied);
  uni.reset();
  satisfied=uni.isSatisfied(upper1,equiv);
  uni.startUnify();
  satisfied&=uni.isSatisfied(lower1,equiv);
  assertEquals(false,satisfied);
  uni.reset();
  satisfied=uni.isSatisfied(upper2,equiv);
  uni.startUnify();
  satisfied&=uni.isSatisfied(upper1,equiv);
  assertEquals(false,satisfied);
  uni.reset();
  equiv.clear();
  list1.clear();
  list1.add("uppercase");
  equiv.put("case-sensitivity",list1);
  satisfied=uni.isSatisfied(upper2,equiv);
  uni.startUnify();
  satisfied&=uni.isSatisfied(upper1,equiv);
  assertEquals(true,satisfied);
  uni.reset();
  equiv.clear();
  list1.clear();
  list1.add("alluppercase");
  equiv.put("case-sensitivity",list1);
  satisfied=uni.isSatisfied(upper2,equiv);
  uni.startUnify();
  satisfied&=uni.isSatisfied(upper1,equiv);
  assertEquals(false,satisfied);
  uni.reset();
  satisfied=uni.isSatisfied(upperall2,equiv);
  uni.startUnify();
  satisfied&=uni.isSatisfied(upperall1,equiv);
  assertEquals(true,satisfied);
}
