{
  final long startTime=System.currentTimeMillis();
  final List<RuleMatch> ruleMatches=langTool.check(text);
  final long startTimeMatching=System.currentTimeMillis();
  int i=0;
  for (  final RuleMatch match : ruleMatches) {
    final String output=Tools.makeTexti18n(messages,"result1",new Object[]{i + 1,match.getLine() + 1,match.getColumn()});
    sb.append(output);
    String msg=match.getMessage();
    msg=msg.replaceAll("<suggestion>","<b>");
    msg=msg.replaceAll("</suggestion>","</b>");
    msg=msg.replaceAll("<old>","<b>");
    msg=msg.replaceAll("</old>","</b>");
    sb.append("<b>" + messages.getString("errorMessage") + "</b> "+ msg+ "<br>\n");
    if (match.getSuggestedReplacements().size() > 0) {
      final String repl=StringTools.listToString(match.getSuggestedReplacements(),"; ");
      sb.append("<b>" + messages.getString("correctionMessage") + "</b> "+ repl+ "<br>\n");
    }
    final String context=Tools.getContext(match.getFromPos(),match.getToPos(),text);
    sb.append("<b>" + messages.getString("errorContext") + "</b> "+ context);
    sb.append("<br>\n");
    i++;
  }
  final long endTime=System.currentTimeMillis();
  sb.append(Tools.makeTexti18n(messages,"resultTime",new Object[]{endTime - startTime,endTime - startTimeMatching}));
  return ruleMatches.size();
}
