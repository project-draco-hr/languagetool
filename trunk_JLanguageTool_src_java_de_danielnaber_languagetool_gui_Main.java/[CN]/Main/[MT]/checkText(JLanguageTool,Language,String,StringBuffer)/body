{
  long startTime=System.currentTimeMillis();
  File defaultPatternFile=new File(JLanguageTool.RULES_DIR + File.separator + language.getShortName()+ File.separator+ JLanguageTool.PATTERN_FILE);
  List patternRules=new ArrayList();
  if (defaultPatternFile.exists()) {
    patternRules=langTool.loadPatternRules(defaultPatternFile.getAbsolutePath());
  }
 else {
    sb.append("Pattern file " + defaultPatternFile.getAbsolutePath() + " not found<br>\n");
  }
  for (Iterator iter=patternRules.iterator(); iter.hasNext(); ) {
    Rule rule=(Rule)iter.next();
    langTool.addRule(rule);
  }
  List ruleMatches=langTool.check(text);
  long startTimeMatching=System.currentTimeMillis();
  int i=0;
  for (Iterator iter=ruleMatches.iterator(); iter.hasNext(); ) {
    RuleMatch match=(RuleMatch)iter.next();
    sb.append("<br>\n<b>" + (i + 1) + ". Line "+ (match.getLine() + 1)+ ", column "+ match.getColumn()+ "</b><br>\n");
    String msg=match.getMessage();
    msg=msg.replaceAll("<suggestion>","<b>");
    msg=msg.replaceAll("</suggestion>","</b>");
    msg=msg.replaceAll("<old>","<b>");
    msg=msg.replaceAll("</old>","</b>");
    sb.append("<b>Message:</b> " + msg + "<br>\n");
    sb.append("<b>Context:</b> " + getContext(match.getFromPos(),match.getToPos(),text));
    sb.append("<br>\n");
    i++;
  }
  long endTime=System.currentTimeMillis();
  sb.append("<br>\nTime: " + (endTime - startTime) + "ms (including "+ (endTime - startTimeMatching)+ "ms for rule matching)<br>\n");
  return ruleMatches.size();
}
