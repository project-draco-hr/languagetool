{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  int i=0;
  for (  Rule rule : rules) {
    if (rule instanceof TextLevelRule && !ignoreRule(rule) && paraMode != ParagraphHandling.ONLYNONPARA) {
      RuleMatch[] matches=((TextLevelRule)rule).match(analyzedSentences);
      for (      RuleMatch match : matches) {
        LineColumnRange range=getLineColumnRange(match);
        match.setColumn(range.from.column);
        match.setEndColumn(range.to.column);
        match.setLine(range.from.line);
        match.setEndLine(range.to.line);
      }
      ruleMatches.addAll(Arrays.asList(matches));
    }
  }
  for (  AnalyzedSentence analyzedSentence : analyzedSentences) {
    String sentence=sentences.get(i++);
    try {
      List<RuleMatch> sentenceMatches=checkAnalyzedSentence(paraMode,rules,charCount,lineCount,columnCount,sentence,analyzedSentence,annotatedText);
      ruleMatches.addAll(sentenceMatches);
      charCount+=sentence.length();
      lineCount+=countLineBreaks(sentence);
      int lineBreakPos=sentence.lastIndexOf('\n');
      if (lineBreakPos == -1) {
        columnCount+=sentence.length();
      }
 else {
        if (lineBreakPos == 0) {
          columnCount=sentence.length();
          if (!language.getSentenceTokenizer().singleLineBreaksMarksPara()) {
            columnCount--;
          }
        }
 else {
          columnCount=sentence.length() - lineBreakPos;
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException("Could not check sentence (language: " + language + "): '"+ StringUtils.abbreviate(analyzedSentence.toTextString(),200)+ "'",e);
    }
  }
  return ruleMatches;
}
