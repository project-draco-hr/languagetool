{
  final List<RuleMatch> ruleMatches=new ArrayList<>();
  int i=0;
  for (  final AnalyzedSentence analyzedSentence : analyzedSentences) {
    final String sentence=sentences.get(i++);
    final List<RuleMatch> sentenceMatches=checkAnalyzedSentence(paraMode,rules,charCount,lineCount,columnCount,sentence,analyzedSentence);
    ruleMatches.addAll(sentenceMatches);
    charCount+=sentence.length();
    lineCount+=countLineBreaks(sentence);
    final int lineBreakPos=sentence.lastIndexOf('\n');
    if (lineBreakPos == -1) {
      columnCount+=sentence.length();
    }
 else {
      if (lineBreakPos == 0) {
        columnCount=sentence.length();
        if (!language.getSentenceTokenizer().singleLineBreaksMarksPara()) {
          columnCount--;
        }
      }
 else {
        columnCount=sentence.length() - lineBreakPos;
      }
    }
  }
  return ruleMatches;
}
