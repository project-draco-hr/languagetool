{
  final List<Rule> rules=new ArrayList<>();
  final List<Class<? extends Rule>> languageRules=language.getRelevantRules();
  for (  Class<? extends Rule> ruleClass : languageRules) {
    final Constructor[] constructors=ruleClass.getConstructors();
    try {
      if (constructors.length > 0) {
        boolean constructorFound=addNewlyConstructedRules(language,messages,rules,constructors);
        if (!constructorFound) {
          throw new RuntimeException("No matching constructor found for rule class: " + ruleClass.getName() + " - add at least a constructor with a ResourceBundle parameter");
        }
      }
 else {
        throw new RuntimeException("No public constructor for rule class: " + ruleClass.getName());
      }
    }
 catch (    Exception e) {
      throw new RuntimeException("Failed to load built-in Java rules for language " + language,e);
    }
  }
  return rules.toArray(new Rule[rules.size()]);
}
