{
  if (qName.equals("rule")) {
    id=attrs.getValue("id");
    name=attrs.getValue("name");
    if (inRuleGroup && id == null) {
      id=ruleGroupId;
    }
    if (inRuleGroup && name == null) {
      name=ruleGroupName;
    }
  }
 else   if (qName.equals("rules")) {
    language=Language.getLanguageForShortName(attrs.getValue("lang"));
  }
 else   if (qName.equals("pattern")) {
    inPattern=true;
    if (attrs.getValue("mark") != null && (attrs.getValue("mark_from") != null)) {
      throw new SAXException("You cannot use both mark and mark_from attributes." + "\n Line: " + dLocator.getLineNumber() + ", column: "+ dLocator.getColumnNumber()+ ".");
    }
    if (attrs.getValue("mark") != null && (attrs.getValue("mark_to") != null)) {
      throw new SAXException("You cannot use both mark and mark_to attributes." + "\n Line: " + dLocator.getLineNumber() + ", column: "+ dLocator.getColumnNumber()+ ".");
    }
    if (attrs.getValue("mark") != null) {
      positionCorrection=Integer.parseInt(attrs.getValue("mark"));
    }
    if (attrs.getValue("mark_from") != null) {
      positionCorrection=Integer.parseInt(attrs.getValue("mark_from"));
    }
    if (attrs.getValue("mark_to") != null) {
      endPositionCorrection=Integer.parseInt(attrs.getValue("mark_to"));
      singleTokenCorrection=false;
    }
 else {
      singleTokenCorrection=true;
    }
    if (attrs.getValue("case_sensitive") != null && "yes".equals(attrs.getValue("case_sensitive"))) {
      caseSensitive=true;
    }
  }
 else   if (qName.equals("exception")) {
    inException=true;
    exceptions=new StringBuffer();
    if (attrs.getValue("negate") != null) {
      exceptionStringNegation=attrs.getValue("negate").equals("yes");
    }
    if (attrs.getValue("scope") != null) {
      exceptionValidNext=attrs.getValue("scope").equals("next");
      exceptionValidPrev=attrs.getValue("scope").equals("previous");
    }
    if (attrs.getValue("inflected") != null) {
      exceptionStringInflected=attrs.getValue("inflected").equals("yes");
    }
    if (attrs.getValue("postag") != null) {
      exceptionPosToken=attrs.getValue("postag");
      if (attrs.getValue("postag_regexp") != null) {
        exceptionPosRegExp=attrs.getValue("postag_regexp").equals("yes");
      }
      if (attrs.getValue("negate_pos") != null) {
        exceptionPosNegation=attrs.getValue("negate_pos").equals("yes");
      }
    }
    if (attrs.getValue("regexp") != null) {
      exceptionStringRegExp=attrs.getValue("regexp").equals("yes");
    }
    if (attrs.getValue("spacebefore") != null) {
      exceptionSpaceBefore="yes".equals(attrs.getValue("spacebefore"));
      exceptionSpaceBeforeSet=!"ignore".equals(attrs.getValue("spacebefore"));
    }
  }
 else   if (qName.equals("and")) {
    inAndGroup=true;
  }
 else   if (qName.equals("unify")) {
    inUnification=true;
    uFeature=attrs.getValue("feature");
    if (attrs.getValue("type") != null) {
      uType=attrs.getValue("type");
    }
 else {
      uType="";
    }
    if (attrs.getValue("negate") != null && "yes".equals(attrs.getValue("negate"))) {
      uniNegation=true;
    }
    uniCounter=0;
  }
 else   if (qName.equals("token")) {
    inToken=true;
    if (attrs.getValue("negate") != null) {
      tokenNegated=attrs.getValue("negate").equals("yes");
    }
    if (attrs.getValue("inflected") != null) {
      tokenInflected=attrs.getValue("inflected").equals("yes");
    }
    if (attrs.getValue("skip") != null) {
      skipPos=Integer.parseInt(attrs.getValue("skip"));
    }
    elements=new StringBuffer();
    if (elementList == null) {
      elementList=new ArrayList<Element>();
    }
    if (attrs.getValue("postag") != null) {
      posToken=attrs.getValue("postag");
      if (attrs.getValue("postag_regexp") != null) {
        posRegExp=attrs.getValue("postag_regexp").equals("yes");
      }
      if (attrs.getValue("negate_pos") != null) {
        posNegation=(attrs.getValue("negate_pos").equals("yes"));
      }
    }
    if (attrs.getValue("regexp") != null) {
      stringRegExp=attrs.getValue("regexp").equals("yes");
    }
    if (attrs.getValue("spacebefore") != null) {
      tokenSpaceBefore="yes".equals(attrs.getValue("spacebefore"));
      tokenSpaceBeforeSet=!"ignore".equals(attrs.getValue("spacebefore"));
    }
  }
 else   if (qName.equals("disambig")) {
    inDisamb=true;
    disambiguatedPOS=attrs.getValue("postag");
    if (attrs.getValue("action") != null) {
      disambigAction=DisambiguationPatternRule.DisambiguatorAction.toAction(attrs.getValue("action").toUpperCase());
    }
 else {
      disambigAction=DisambiguationPatternRule.DisambiguatorAction.toAction("REPLACE");
    }
    disamb=new StringBuffer();
  }
 else   if (qName.equals("match")) {
    inMatch=true;
    match=new StringBuffer();
    Match.CaseConversion caseConv=Match.CaseConversion.NONE;
    if (attrs.getValue("case_conversion") != null) {
      caseConv=Match.CaseConversion.toCase(attrs.getValue("case_conversion").toUpperCase());
    }
    final Match mWorker=new Match(attrs.getValue("postag"),attrs.getValue("postag_replace"),"yes".equals(attrs.getValue("postag_regexp")),attrs.getValue("regexp_match"),attrs.getValue("regexp_replace"),caseConv,"yes".equals(attrs.getValue("setpos")));
    if (inDisamb) {
      if (attrs.getValue("no") != null) {
        final int refNumber=Integer.parseInt(attrs.getValue("no"));
        if (refNumber > elementList.size()) {
          throw new SAXException("Only backward references in match elements are possible, tried to specify token " + refNumber + "\n Line: "+ dLocator.getLineNumber()+ ", column: "+ dLocator.getColumnNumber()+ ".");
        }
 else {
          mWorker.setTokenRef(refNumber);
          posSelector=mWorker;
        }
      }
    }
 else     if (inToken) {
      if (attrs.getValue("no") != null) {
        final int refNumber=Integer.parseInt(attrs.getValue("no"));
        if (refNumber > elementList.size()) {
          throw new SAXException("Only backward references in match elements are possible, tried to specify token " + refNumber + "\n Line: "+ dLocator.getLineNumber()+ ", column: "+ dLocator.getColumnNumber()+ ".");
        }
 else {
          mWorker.setTokenRef(refNumber);
          tokenReference=mWorker;
          elements.append("\\" + refNumber);
        }
      }
    }
  }
 else   if (qName.equals("rulegroup")) {
    ruleGroupId=attrs.getValue("id");
    ruleGroupName=attrs.getValue("name");
    inRuleGroup=true;
  }
 else   if (qName.equals("unification")) {
    uFeature=attrs.getValue("feature");
    inUnificationDef=true;
  }
 else   if (qName.equals("equivalence")) {
    uType=attrs.getValue("type");
  }
 else   if (qName.equals("wd")) {
    wdLemma=attrs.getValue("lemma");
    wdPos=attrs.getValue("pos");
    inWord=true;
    wd=new StringBuffer();
  }
}
