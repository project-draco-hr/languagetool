{
  if (qName.equals("rule")) {
    final DisambiguationPatternRule rule=new DisambiguationPatternRule(id,name,language,elementList,disambiguatedPOS,posSelector,disambigAction);
    rule.setStartPositionCorrection(positionCorrection);
    if (!singleTokenCorrection) {
      rule.setEndPositionCorrection(endPositionCorrection);
    }
    if (newWdList != null) {
      if (disambigAction == DisambiguatorAction.ADD || disambigAction == DisambiguatorAction.REMOVE) {
        if (newWdList.size() != (elementList.size() - positionCorrection + endPositionCorrection)) {
          throw new SAXException("Rule error. The number of interpretations specified with wd: " + newWdList.size() + " must be equal to the number of matched tokens."+ "\n Line: "+ dLocator.getLineNumber()+ ", column: "+ dLocator.getColumnNumber()+ ".");
        }
        rule.setNewInterpretations(newWdList.toArray(new AnalyzedToken[newWdList.size()]));
      }
      newWdList.clear();
    }
    caseSensitive=false;
    rules.add(rule);
    if (disambigAction == DisambiguatorAction.UNIFY && (elementList.size() - positionCorrection + endPositionCorrection) != uniCounter) {
      throw new SAXException("Rule error. The number unified tokens: " + uniCounter + " must be equal to the number of matched tokens."+ "\n Line: "+ dLocator.getLineNumber()+ ", column: "+ dLocator.getColumnNumber()+ ".");
    }
    if ((!singleTokenCorrection && (disambigAction == DisambiguatorAction.FILTER || disambigAction == DisambiguatorAction.REPLACE)) && ((elementList.size() - positionCorrection + endPositionCorrection) > 1)) {
      throw new SAXException("Rule error. Cannot replace or filter more than one token at a time." + "\n Line: " + dLocator.getLineNumber() + ", column: "+ dLocator.getColumnNumber()+ ".");
    }
    elementList.clear();
    posSelector=null;
  }
 else   if (qName.equals(EXCEPTION)) {
    inException=false;
    if (!exceptionSet) {
      tokenElement=new Element(elements.toString(),caseSensitive,stringRegExp,tokenInflected);
      exceptionSet=true;
    }
    tokenElement.setNegation(tokenNegated);
    if (!StringTools.isEmpty(exceptions.toString())) {
      tokenElement.setStringException(exceptions.toString(),exceptionStringRegExp,exceptionStringInflected,exceptionStringNegation,exceptionValidNext,exceptionValidPrev);
    }
    if (exceptionPosToken != null) {
      tokenElement.setPosException(exceptionPosToken,exceptionPosRegExp,exceptionPosNegation,exceptionValidNext,exceptionValidPrev);
      exceptionPosToken=null;
    }
    if (exceptionSpaceBeforeSet) {
      tokenElement.setExceptionSpaceBefore(exceptionSpaceBefore);
    }
    resetException();
  }
 else   if (qName.equals(AND)) {
    inAndGroup=false;
    andGroupCounter=0;
    tokenCounter++;
  }
 else   if (qName.equals(UNIFY)) {
    inUnification=false;
  }
 else   if (qName.equals(TOKEN)) {
    if (!exceptionSet || tokenElement == null) {
      tokenElement=new Element(elements.toString(),caseSensitive,stringRegExp,tokenInflected);
      tokenElement.setNegation(tokenNegated);
    }
 else {
      tokenElement.setStringElement(elements.toString());
    }
    if (skipPos != 0) {
      tokenElement.setSkipNext(skipPos);
      skipPos=0;
    }
    if (posToken != null) {
      tokenElement.setPosElement(posToken,posRegExp,posNegation);
      posToken=null;
    }
    if (tokenReference != null) {
      tokenElement.setMatch(tokenReference);
    }
    if (inAndGroup && andGroupCounter > 0) {
      elementList.get(elementList.size() - 1).setAndGroupElement(tokenElement);
    }
 else {
      elementList.add(tokenElement);
    }
    if (inAndGroup) {
      andGroupCounter++;
    }
    if (inUnification) {
      tokenElement.setUnification(uFeature,uType);
      if (uniNegation) {
        tokenElement.setUniNegation();
      }
      uniCounter++;
    }
    if (inUnificationDef) {
      language.getUnifier().setEquivalence(uFeature,uType,tokenElement);
      elementList.clear();
    }
    if (tokenSpaceBeforeSet) {
      tokenElement.setWhitespaceBefore(tokenSpaceBefore);
    }
    resetToken();
  }
 else   if (qName.equals(PATTERN)) {
    inPattern=false;
    if (positionCorrection >= tokenCounter) {
      throw new SAXException("Attemp to mark a token no. (" + positionCorrection + ") that is outside the pattern ("+ tokenCounter+ "). Pattern elements are numbered starting from 0!"+ "\n Line: "+ dLocator.getLineNumber()+ ", column: "+ dLocator.getColumnNumber()+ ".");
    }
    if (tokenCounter - endPositionCorrection < 0) {
      throw new SAXException("Attemp to mark a token no. (" + endPositionCorrection + ") that is outside the pattern ("+ tokenCounter+ "). Pattern elements are numbered starting from 0!"+ "\n Line: "+ dLocator.getLineNumber()+ ", column: "+ dLocator.getColumnNumber()+ ".");
    }
    tokenCounter=0;
  }
 else   if (qName.equals(MATCH)) {
    if (inDisamb) {
      posSelector.setLemmaString(match.toString());
    }
 else     if (inToken) {
      tokenReference.setLemmaString(match.toString());
    }
    inMatch=false;
  }
 else   if (qName.equals(DISAMBIG)) {
    inDisamb=false;
  }
 else   if (qName.equals(RULEGROUP)) {
    inRuleGroup=false;
  }
 else   if (qName.equals(UNIFICATION) && inUnificationDef) {
    inUnificationDef=false;
  }
 else   if (qName.equals(UNIFY) && inUnification) {
    inUnification=false;
  }
 else   if (qName.equals(WD)) {
    addNewWord(wd.toString(),wdLemma,wdPos);
    inWord=false;
  }
}
