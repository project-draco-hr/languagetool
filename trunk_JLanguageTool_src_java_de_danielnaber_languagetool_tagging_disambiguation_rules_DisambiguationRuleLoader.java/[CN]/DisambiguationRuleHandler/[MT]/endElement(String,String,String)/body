{
  if (qName.equals("rule")) {
    DisambiguationPatternRule rule=new DisambiguationPatternRule(id,name,language,elementList,disambiguatedPOS);
    rule.setStartPositionCorrection(positionCorrection);
    rules.add(rule);
    if (suggestions.size() > 0) {
      List<String> l=new ArrayList<String>(suggestions);
      suggestions.clear();
    }
    if (elementList != null) {
      elementList.clear();
    }
  }
 else   if (qName.equals("exception")) {
    inException=false;
    if (!exceptionSet) {
      stringElement=new Element(elements.toString(),caseSensitive,regExpression,tokenInflected);
      exceptionSet=true;
    }
    stringElement.setNegation(tokenNegated);
    if (!exceptions.toString().equals("")) {
      stringElement.setStringException(exceptions.toString(),exceptionStringRegExp,exceptionStringInflected,exceptionStringNegation,exceptionValidNext);
    }
    if (exceptionPosToken != null) {
      stringElement.setPosException(exceptionPosToken,exceptionPosRegExp,exceptionPosNegation,exceptionValidNext);
      exceptionPosToken=null;
    }
  }
 else   if (qName.equals("token")) {
    if (inToken) {
      if (!exceptionSet || stringElement == null) {
        stringElement=new Element(elements.toString(),caseSensitive,regExpression,tokenInflected);
        stringElement.setNegation(tokenNegated);
      }
 else {
        stringElement.setStringElement(elements.toString());
      }
      if (skipPos != 0) {
        stringElement.setSkipNext(skipPos);
        skipPos=0;
      }
      if (posToken != null) {
        stringElement.setPosElement(posToken,regular,posNegation);
        posToken=null;
      }
      elementList.add(stringElement);
      tokenNegated=false;
      tokenInflected=false;
      posNegation=false;
      regular=false;
      exceptionValidNext=true;
    }
    inToken=false;
    regExpression=false;
    exceptionStringNegation=false;
    exceptionStringInflected=false;
    exceptionPosNegation=false;
    exceptionPosRegExp=false;
    exceptionStringRegExp=false;
  }
 else   if (qName.equals("pattern")) {
    inPattern=false;
  }
 else   if (qName.equals("disambig")) {
    inDisamb=false;
  }
 else   if (qName.equals("rulegroup")) {
    inRuleGroup=false;
  }
}
