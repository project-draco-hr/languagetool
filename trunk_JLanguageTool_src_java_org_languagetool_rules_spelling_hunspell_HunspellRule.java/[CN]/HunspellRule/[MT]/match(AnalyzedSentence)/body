{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  if (dictionary == null)   return null;
  for (int i=1; i < tokens.length; i++) {
    final String word=tokens[i].getToken();
    boolean isAlphabetic=true;
    if (word.length() == 1) {
      isAlphabetic=Character.isAlphabetic(word.charAt(0));
    }
    if (isAlphabetic && dictionary.misspelled(word)) {
      final RuleMatch ruleMatch=new RuleMatch(this,tokens[i].getStartPos(),tokens[i].getStartPos() + word.length(),messages.getString("category_typo"),messages.getString("category_typo"));
      List<String> suggestions=dictionary.suggest(word);
      if (suggestions != null) {
        ruleMatch.setSuggestedReplacements(suggestions);
      }
      ruleMatches.add(ruleMatch);
    }
  }
  return toRuleMatchArray(ruleMatches);
}
