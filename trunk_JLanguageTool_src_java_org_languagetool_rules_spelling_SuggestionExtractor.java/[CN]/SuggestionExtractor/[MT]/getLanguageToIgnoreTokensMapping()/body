{
  final Map<Language,Set<String>> langToIgnoreTokens=new HashMap<Language,Set<String>>();
  for (  Language lang : Language.REAL_LANGUAGES) {
    final Set<String> suggestionTokens=new HashSet<String>();
    final JLanguageTool languageTool=new JLanguageTool(lang);
    final Rule spellcheckRule=getSpellcheckRule(languageTool);
    if (spellcheckRule == null) {
      System.out.println("No spellchecker rule found for " + lang);
      continue;
    }
    languageTool.activateDefaultPatternRules();
    final List<Rule> rules=languageTool.getAllRules();
    int tokenCount=0;
    int noErrorCount=0;
    for (    Rule rule : rules) {
      final List<String> tokens=getSuggestionTokens(rule,lang);
      tokenCount+=tokens.size();
      for (      String token : tokens) {
        final AnalyzedSentence analyzedToken=languageTool.getAnalyzedSentence(token);
        final RuleMatch[] matches=spellcheckRule.match(analyzedToken);
        if (matches.length > 0) {
          suggestionTokens.add(token);
        }
 else {
          noErrorCount++;
        }
      }
    }
    System.out.println(lang + ": " + noErrorCount+ " out of "+ tokenCount+ " words ignored because they are known to spellchecker anyway");
    final Language noVariantLanguage=lang.getDefaultVariant() == null ? lang : lang.getDefaultVariant();
    final Set<String> existingTokens=langToIgnoreTokens.get(noVariantLanguage);
    if (existingTokens != null) {
      existingTokens.addAll(suggestionTokens);
    }
 else {
      langToIgnoreTokens.put(noVariantLanguage,suggestionTokens);
    }
  }
  return langToIgnoreTokens;
}
