{
  if (original != null) {
    config.restoreState(original);
  }
  dialog=new JDialog(owner,true);
  dialog.setTitle(messages.getString("guiConfigWindowTitle"));
  KeyStroke stroke=KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0);
  ActionListener actionListener=new ActionListener(){
    @Override public void actionPerformed(    @SuppressWarnings("unused") ActionEvent actionEvent){
      dialog.setVisible(false);
    }
  }
;
  JRootPane rootPane=dialog.getRootPane();
  rootPane.registerKeyboardAction(actionListener,stroke,JComponent.WHEN_IN_FOCUSED_WINDOW);
  JPanel checkBoxPanel=new JPanel();
  checkBoxPanel.setLayout(new GridBagLayout());
  GridBagConstraints cons=new GridBagConstraints();
  cons.anchor=GridBagConstraints.NORTHWEST;
  cons.gridx=0;
  cons.weightx=1.0;
  cons.weighty=1.0;
  cons.fill=GridBagConstraints.BOTH;
  Collections.sort(rules,new CategoryComparator());
  DefaultMutableTreeNode rootNode=createTree(rules);
  configTree=new JTree(getTreeModel(rootNode));
  Language lang=config.getLanguage();
  if (lang == null) {
    lang=Languages.getLanguageForLocale(Locale.getDefault());
  }
  configTree.applyComponentOrientation(ComponentOrientation.getOrientation(lang.getLocale()));
  configTree.setRootVisible(false);
  configTree.setEditable(false);
  configTree.setCellRenderer(new CheckBoxTreeCellRenderer());
  TreeListener.install(configTree);
  checkBoxPanel.add(configTree,cons);
  configTree.addMouseListener(getMouseAdapter());
  JPanel portPanel=new JPanel();
  portPanel.setLayout(new GridBagLayout());
  cons=new GridBagConstraints();
  cons.insets=new Insets(0,4,0,0);
  cons.gridx=0;
  cons.gridy=0;
  cons.anchor=GridBagConstraints.WEST;
  cons.fill=GridBagConstraints.NONE;
  cons.weightx=0.0f;
  if (!insideOffice) {
    createNonOfficeElements(cons,portPanel);
  }
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new GridBagLayout());
  JButton okButton=new JButton(Tools.getLabel(messages.getString("guiOKButton")));
  okButton.setMnemonic(Tools.getMnemonic(messages.getString("guiOKButton")));
  okButton.setActionCommand(ACTION_COMMAND_OK);
  okButton.addActionListener(this);
  JButton cancelButton=new JButton(Tools.getLabel(messages.getString("guiCancelButton")));
  cancelButton.setMnemonic(Tools.getMnemonic(messages.getString("guiCancelButton")));
  cancelButton.setActionCommand(ACTION_COMMAND_CANCEL);
  cancelButton.addActionListener(this);
  cons=new GridBagConstraints();
  cons.insets=new Insets(0,4,0,0);
  buttonPanel.add(okButton,cons);
  buttonPanel.add(cancelButton,cons);
  Container contentPane=dialog.getContentPane();
  contentPane.setLayout(new GridBagLayout());
  cons=new GridBagConstraints();
  cons.insets=new Insets(4,4,4,4);
  cons.gridx=0;
  cons.gridy=0;
  cons.weightx=10.0f;
  cons.weighty=10.0f;
  cons.fill=GridBagConstraints.BOTH;
  contentPane.add(new JScrollPane(checkBoxPanel),cons);
  cons.weightx=0.0f;
  cons.weighty=0.0f;
  cons.gridx=0;
  cons.gridy++;
  cons.fill=GridBagConstraints.NONE;
  cons.anchor=GridBagConstraints.LINE_END;
  contentPane.add(getTreeButtonPanel(),cons);
  cons.gridy++;
  cons.anchor=GridBagConstraints.WEST;
  contentPane.add(getMotherTonguePanel(cons),cons);
  cons.gridy++;
  cons.anchor=GridBagConstraints.WEST;
  contentPane.add(getNgramPanel(cons),cons);
  cons.gridy++;
  cons.anchor=GridBagConstraints.WEST;
  contentPane.add(portPanel,cons);
  cons.fill=GridBagConstraints.HORIZONTAL;
  cons.anchor=GridBagConstraints.WEST;
  for (  JPanel extra : extraPanels) {
    cons.gridy++;
    contentPane.add(extra,cons);
  }
  cons.fill=GridBagConstraints.NONE;
  cons.gridy++;
  cons.anchor=GridBagConstraints.EAST;
  contentPane.add(buttonPanel,cons);
  dialog.pack();
  dialog.setSize(500,500);
  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
  Dimension frameSize=dialog.getSize();
  dialog.setLocation(screenSize.width / 2 - frameSize.width / 2,screenSize.height / 2 - frameSize.height / 2);
  dialog.setLocationByPlatform(true);
  for (  JPanel extra : this.extraPanels) {
    if (extra instanceof SavablePanel) {
      ((SavablePanel)extra).componentShowing();
    }
  }
  dialog.setVisible(true);
}
