{
  ConfusionSetLoader confusionSetLoader=new ConfusionSetLoader();
  InputStream inputStream=JLanguageTool.getDataBroker().getFromResourceDirAsStream(homophonePath);
  Map<String,ConfusionProbabilityRule.ConfusionSet> confusionSetMap=confusionSetLoader.loadConfusionSet(inputStream);
  initMaps(homophoneOccurrences);
  int groupCount=0;
  System.out.println("<rules lang='en'>\n");
  System.out.println("<category name='Auto-generated rules'>\n");
  for (  Map.Entry<String,ConfusionProbabilityRule.ConfusionSet> entry : confusionSetMap.entrySet()) {
    System.err.println(" === " + entry + " === ");
    List<OccurrenceInfo> infos=occurrenceInfos.get(entry.getKey());
    if (infos == null) {
      System.err.println("Could not find occurrence infos for '" + entry.getKey() + "', skipping");
      continue;
    }
    Set cleanSet=new HashSet<>(entry.getValue().getSet());
    cleanSet.remove(entry.getKey());
    String name=StringUtils.join(cleanSet,"/") + " -> " + entry.getKey();
    System.out.println("<rulegroup id='R" + groupCount + "' name=\""+ StringTools.escapeXML(name)+ "\">\n");
    groupCount++;
    for (    OccurrenceInfo occurrenceInfo : infos) {
      String[] parts=occurrenceInfo.ngram.split(" ");
      for (      String variant : entry.getValue().getSet()) {
        if (variant.equals(entry.getKey())) {
          continue;
        }
        printRule(occurrenceInfo,parts,variant);
      }
    }
    System.out.println("</rulegroup>\n");
  }
  System.out.println("</category>");
  System.out.println("</rules>");
  System.err.println("Done. Wrote " + ruleCount + " rules.");
  System.err.println("Rules ignored because of different tokenization: " + tokenFilteredRules);
  System.err.println("Rules ignored because of error probability limit (" + minErrorProb + "): "+ probFilteredRules);
}
