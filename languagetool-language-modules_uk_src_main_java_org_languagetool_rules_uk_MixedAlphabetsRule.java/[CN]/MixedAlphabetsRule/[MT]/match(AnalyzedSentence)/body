{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  int i=0;
  for (  AnalyzedTokenReadings tokenReadings : tokens) {
    String tokenString=tokenReadings.getToken();
    if (MIXED_ALPHABETS.matcher(tokenString).matches()) {
      List<String> replacements=new ArrayList<>();
      if (!LATIN_ONLY.matcher(tokenString).matches() && !LIKELY_LATIN_NUMBER.matcher(tokenString).matches()) {
        replacements.add(toCyrillic(tokenString));
      }
      if (!CYRILLIC_ONLY.matcher(tokenString).matches() || LIKELY_LATIN_NUMBER.matcher(tokenString).matches()) {
        replacements.add(toLatin(tokenString));
      }
      if (replacements.size() > 0) {
        RuleMatch potentialRuleMatch=createRuleMatch(tokenReadings,replacements);
        ruleMatches.add(potentialRuleMatch);
      }
    }
 else     if (LATIN_NUMBER_WITH_CYRILLICS.matcher(tokenString).matches()) {
      List<String> replacements=new ArrayList<>();
      replacements.add(toLatin(tokenString));
      RuleMatch potentialRuleMatch=createRuleMatch(tokenReadings,replacements);
      ruleMatches.add(potentialRuleMatch);
    }
 else     if (i > 1 && COMMON_CYR_LETTERS.matcher(tokenString).matches()) {
      String prevLemma=tokens[i - 1].getAnalyzedToken(0).getLemma();
      if (prevLemma != null && prevLemma.matches("??????????????|??????????|????????????")) {
        List<String> replacements=new ArrayList<>();
        replacements.add(toLatin(tokenString));
        String msg="?????????? ?????????????????? ???????????? ?????????????? ????????????????????";
        RuleMatch potentialRuleMatch=new RuleMatch(this,tokenReadings.getStartPos(),tokenReadings.getEndPos(),msg,getShort());
        potentialRuleMatch.setSuggestedReplacements(replacements);
        ruleMatches.add(potentialRuleMatch);
      }
    }
 else     if (tokenString.endsWith("????")) {
      List<String> replacements=new ArrayList<>();
      int length=tokenString.length();
      replacements.add(tokenString.substring(0,length - 1) + toLatin(tokenString.substring(length - 1,tokenString.length())));
      String msg="?????????? ?????????????????? ???????????? ?????????????? ????????????????????";
      RuleMatch potentialRuleMatch=new RuleMatch(this,tokenReadings.getStartPos(),tokenReadings.getEndPos(),msg,getShort());
      potentialRuleMatch.setSuggestedReplacements(replacements);
      ruleMatches.add(potentialRuleMatch);
    }
    i++;
  }
  return toRuleMatchArray(ruleMatches);
}
