{
  String w=word.replaceFirst("\\.$","");
  if ("unzwar".equals(w)) {
    return Collections.singletonList("und zwar");
  }
 else   if ("desweiteren".equals(w)) {
    return Collections.singletonList("des Weiteren");
  }
 else   if ("wieviel".equals(w)) {
    return Collections.singletonList("wie viel");
  }
 else   if ("wieviele".equals(w)) {
    return Collections.singletonList("wie viele");
  }
 else   if ("wievielen".equals(w)) {
    return Collections.singletonList("wie vielen");
  }
 else   if ("vorteilen".equals(w)) {
    return Collections.singletonList("Vorteilen");
  }
 else   if ("Trons".equals(w)) {
    return Collections.singletonList("Trance");
  }
 else   if ("einzigste".equals(w)) {
    return Collections.singletonList("einzige");
  }
 else   if (word.endsWith("standart")) {
    return Collections.singletonList(word.replaceFirst("standart$","standard"));
  }
 else   if (word.endsWith("standarts")) {
    return Collections.singletonList(word.replaceFirst("standarts$","standards"));
  }
 else   if (word.equals("Rolladen")) {
    return Collections.singletonList("Rollladen");
  }
 else   if (word.equals("Ma??name")) {
    return Collections.singletonList("Ma??nahme");
  }
 else   if (word.equals("Ma??namen")) {
    return Collections.singletonList("Ma??nahmen");
  }
 else   if (word.equals("nanten")) {
    return Collections.singletonList("nannten");
  }
 else   if (!StringTools.startsWithUppercase(word)) {
    String ucWord=StringTools.uppercaseFirstChar(word);
    if (!suggestions.contains(ucWord) && !hunspellDict.misspelled(ucWord)) {
      return Collections.singletonList(ucWord);
    }
  }
  String verbSuggestion=getPastTenseVerbSuggestion(word);
  if (verbSuggestion != null) {
    return Collections.singletonList(verbSuggestion);
  }
  String participleSuggestion=getParticipleSuggestion(word);
  if (participleSuggestion != null) {
    return Collections.singletonList(participleSuggestion);
  }
  if (suggestions.isEmpty() && word.contains("-")) {
    String[] words=word.split("-");
    if (words.length > 1) {
      List<List<String>> suggestionLists=new ArrayList<List<String>>(words.length);
      int startAt=0, stopAt=words.length;
      if (super.ignoreWord(words[0] + "-" + words[1])) {
        startAt=2;
        suggestionLists.add(Collections.singletonList(words[0] + "-" + words[1]));
      }
      if (super.ignoreWord(words[words.length - 2] + "-" + words[words.length - 1])) {
        stopAt=words.length - 2;
      }
      for (int idx=startAt; idx < stopAt; idx++) {
        if (super.ignoreWord(words[idx])) {
          suggestionLists.add(Collections.singletonList(words[idx]));
        }
 else         if (hunspellDict.misspelled(words[idx])) {
          List<String> list=sortSuggestionByQuality(words[idx],super.getSuggestions(words[idx]));
          suggestionLists.add(list);
        }
 else {
          suggestionLists.add(Collections.singletonList(words[idx]));
        }
      }
      if (stopAt < words.length - 1) {
        suggestionLists.add(Collections.singletonList(words[words.length - 2] + "-" + words[words.length - 1]));
      }
      List<String> additionalSuggestions=suggestionLists.get(0);
      for (int idx=1; idx < suggestionLists.size(); idx++) {
        List<String> suggestionList=suggestionLists.get(idx);
        List<String> newList=new ArrayList<>(additionalSuggestions.size() * suggestionList.size());
        for (int first=0; first < additionalSuggestions.size(); first++) {
          for (int last=0; last < suggestionList.size(); last++) {
            newList.add(additionalSuggestions.get(first) + "-" + suggestionList.get(last));
          }
        }
        additionalSuggestions=newList;
      }
      return additionalSuggestions;
    }
  }
  return Collections.emptyList();
}
