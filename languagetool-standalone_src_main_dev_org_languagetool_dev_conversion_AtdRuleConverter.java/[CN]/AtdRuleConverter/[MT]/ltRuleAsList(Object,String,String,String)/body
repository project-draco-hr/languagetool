{
  Collection<HashMap<String,String>> outerList=new ArrayList<>();
  HashMap<String,String> mainRule=(HashMap<String,String>)ruleObject;
  ArrayList<String> currentWarnings=new ArrayList<>();
  String[] mainPattern=mainRule.get("pattern").split("\\ +");
  for (int i=0; i < mainPattern.length; i++) {
    mainPattern[i]=expandMacro(mainPattern[i]);
  }
  mainRule.put("pattern",gluePattern(mainPattern));
  if (isApostropheCase(mainRule.get("pattern").split("\\ +"))) {
    Iterable<HashMap<String,String>> splitRules=handleApostropheCase(mainRule,ruleObject,type);
    for (    HashMap<String,String> splitRule : splitRules) {
      outerList.add(splitRule);
    }
  }
 else {
    outerList.add(mainRule);
  }
  List<String> bigLtRule=new ArrayList<>();
  bigLtRule.add("<!-- " + mainRule.get("ruleString") + " -->");
  if (outerList.size() > 1) {
    bigLtRule.add("<rulegroup id=\"" + id + "\" name=\""+ name+ "\">");
  }
  for (  HashMap<String,String> rule : outerList) {
    ArrayList<String> ltRule=new ArrayList<>();
    if (outerList.size() == 1) {
      ltRule.add(firstIndent + "<rule id=\"" + id+ "\" name=\""+ name+ "\">");
    }
 else {
      ltRule.add(firstIndent + "<rule>");
    }
    String exceptions=null;
    if (rule.containsKey("avoid")) {
      exceptions=getAvoidWords(rule.get("avoid"));
    }
    if (Boolean.parseBoolean(rule.get("casesensitive"))) {
      ltRule.add(secondIndent + "<pattern case_sensitive=\"yes\">");
    }
 else {
      ltRule.add(secondIndent + "<pattern>");
    }
    String[] pattern=rule.get("pattern").split("\\ +");
    String[] newpattern=fixApostrophes(pattern);
    String suggestion=null;
    if (rule.containsKey("word")) {
      suggestion=rule.get("word");
      if (rule.get("pattern").contains("'")) {
        if (!currentWarnings.contains(WARNINGS.APOSTROPHES.value)) {
          currentWarnings.add(WARNINGS.APOSTROPHES.value);
        }
      }
    }
    pattern=newpattern;
    for (    String e : pattern) {
      currentWarnings=getWarningsFromPatternElement(currentWarnings,e);
      ltRule=addTokenHelper(ltRule,e,thirdIndentInt,exceptions);
    }
    ltRule.add(secondIndent + "</pattern>");
    if (suggestion != null) {
      currentWarnings=getWarningsFromSuggestion(currentWarnings,suggestion);
      ltRule=addSuggestion(ltRule,suggestion,pattern,secondIndentInt);
    }
    if (rule.containsKey("explanation")) {
      String explanation=rule.get("explanation");
      ltRule=addExplanation(ltRule,explanation,secondIndentInt);
    }
    if (rule.containsKey("filter")) {
      if (rule.get("filter").equals("kill") || rule.get("filter").equals("die")) {
        ltRule.add(secondIndent + "<disambig action=\"immunize\"/>");
      }
 else {
        currentWarnings=getWarningsFromFilter(currentWarnings,rule.get("filter"));
      }
    }
    ltRule.add(firstIndent + "</rule>");
    bigLtRule.addAll(ltRule);
  }
  if (outerList.size() > 1) {
    bigLtRule.add("</rulegroup>");
  }
  warnings.add(currentWarnings.toArray(new String[currentWarnings.size()]));
  return bigLtRule;
}
