{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  if (reachedEndOfParagraph) {
    reset();
  }
  ruleMatchIndex=getMatchesIndex();
  for (int j=0; j < startSymbols.length; j++) {
    for (int i=1; i < tokens.length; i++) {
      final String token=tokens[i].getToken().trim();
      boolean precededByWhitespace=true;
      if (startSymbols[j].equals(endSymbols[j])) {
        precededByWhitespace=tokens[i - 1].isSentStart() || tokens[i].isWhitespaceBefore() || PUNCTUATION_NO_DOT.matcher(tokens[i - 1].getToken()).matches();
      }
      boolean followedByWhitespace=true;
      if (i < tokens.length - 1 && startSymbols[j].equals(endSymbols[j])) {
        followedByWhitespace=tokens[i + 1].isWhitespaceBefore() || PUNCTUATION.matcher(tokens[i + 1].getToken()).matches();
      }
      if (followedByWhitespace && precededByWhitespace) {
        if (i == tokens.length) {
          precededByWhitespace=false;
        }
 else         if (startSymbols[j].equals(endSymbols[j])) {
          if (!symbolStack.isEmpty()) {
            precededByWhitespace=false;
          }
 else {
            followedByWhitespace=false;
          }
        }
      }
      boolean noException=true;
      if (ruleLang.equals(Language.ENGLISH) && i > 1) {
        if ((precededByWhitespace || followedByWhitespace) && "\"".equals(token) && NUMBER.matcher(tokens[i - 1].getToken()).matches()) {
          noException=false;
        }
        if ((precededByWhitespace || followedByWhitespace) && "'".equals(token) && noException&& (tokens[i - 1].getToken().charAt(tokens[i - 1].getToken().length() - 1) == 's')&& (tokens[i - 1].hasPosTag("NNS") || tokens[i - 1].hasPosTag("NNPS"))) {
          noException=false;
        }
      }
      if (noException && precededByWhitespace && token.equals(startSymbols[j])) {
        symbolStack.push(startSymbols[j] + i);
      }
 else       if (noException && followedByWhitespace && token.equals(endSymbols[j])) {
        if (i > 1 && endSymbols[j].equals(")")) {
          if (!NUMERALS.matcher(tokens[i - 1].getToken()).matches()) {
            if (!symbolStack.isEmpty()) {
              if (symbolStack.peek().startsWith(startSymbols[j])) {
                symbolStack.pop();
              }
 else {
                symbolStack.push(endSymbols[j] + i);
              }
            }
 else {
              symbolStack.push(endSymbols[j] + i);
            }
          }
        }
 else {
          if (!symbolStack.isEmpty()) {
            if (symbolStack.peek().startsWith(startSymbols[j])) {
              symbolStack.pop();
            }
 else {
              symbolStack.push(endSymbols[j] + i);
            }
          }
 else {
            symbolStack.push(endSymbols[j] + i);
          }
        }
      }
    }
    for (    final String sym : symbolStack) {
      final int num=Integer.decode(sym.substring(1));
      final int symbolNum=findSymbolNum(sym.substring(0,1));
      if (symbolNum >= 0) {
        RuleMatch rMatch=createMatch(tokens[num].getStartPos(),symbolNum);
        if (rMatch != null) {
          ruleMatches.add(rMatch);
        }
      }
    }
    symbolStack.clear();
    ruleMatchIndex=0;
  }
  if (tokens[tokens.length - 1].isParaEnd()) {
    reachedEndOfParagraph=true;
  }
  return toRuleMatchArray(ruleMatches);
}
