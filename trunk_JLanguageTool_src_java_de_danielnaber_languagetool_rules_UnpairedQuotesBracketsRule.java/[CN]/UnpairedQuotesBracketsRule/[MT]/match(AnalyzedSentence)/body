{
  List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  AnalyzedTokenReadings[] tokens=text.getTokens();
  AnalyzedToken matchToken=null;
  if (reachedEndOfParagraph) {
    reset();
  }
  int ruleMatchIndex=getMatchesIndex();
  int pos=0;
  for (int j=0; j < startSymbols.length; j++) {
    for (int i=0; i < tokens.length; i++) {
      String token=tokens[i].getToken();
      if (token.trim().equals(startSymbols[j])) {
        symbolCounter[j]++;
        pos=i;
      }
 else       if (token.trim().equals(endSymbols[j])) {
        if (i > 2 && endSymbols[j].equals(")") && symbolCounter[j] == 0) {
          if (!(tokens[i - 1].getToken().matches("(?i)\\d{1,2}?[a-z']*|M*(D?C{0,3}|C[DM])(L?X{0,3}|X[LC])(V?I{0,3}|I[VX])$"))) {
            symbolCounter[j]--;
            pos=i;
          }
        }
 else {
          symbolCounter[j]--;
          pos=i;
        }
      }
    }
    for (int i=0; i < symbolCounter.length; i++) {
      if (symbolCounter[i] != 0) {
        if (ruleMatchArray[i] != 0) {
          if (isInMatches(ruleMatchArray[i] - 1)) {
            setAsDeleted(ruleMatchArray[i] - 1);
            ruleMatchArray[i]=0;
          }
 else {
            ruleMatchIndex++;
            ruleMatchArray[i]=ruleMatchIndex;
            matchToken=tokens[pos].getAnalyzedToken(0);
            String msg=messages.getString("unpaired_brackets");
            @SuppressWarnings("null") RuleMatch ruleMatch=new RuleMatch(this,matchToken.getStartPos(),matchToken.getStartPos() + 1,msg);
            ruleMatches.add(ruleMatch);
          }
        }
 else {
          ruleMatchIndex++;
          ruleMatchArray[i]=ruleMatchIndex;
          matchToken=tokens[pos].getAnalyzedToken(0);
          String msg=messages.getString("unpaired_brackets");
          @SuppressWarnings("null") RuleMatch ruleMatch=new RuleMatch(this,matchToken.getStartPos(),matchToken.getStartPos() + 1,msg);
          ruleMatches.add(ruleMatch);
        }
        symbolCounter[i]=0;
      }
    }
  }
  if (tokens[tokens.length - 1].isParaEnd()) {
    reachedEndOfParagraph=true;
  }
  return toRuleMatchArray(ruleMatches);
}
