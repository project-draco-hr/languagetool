{
  List ruleMatches=new ArrayList();
  AnalyzedToken[] tokens=text.getTokens();
  AnalyzedToken matchToken=null;
  int dotCount=0;
  int commaCount=0;
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i].getToken();
    String nextToken=null;
    if (i < tokens.length - 1)     nextToken=tokens[i + 1].getToken();
    if (token.trim().equals(".")) {
      dotCount++;
      commaCount=0;
      matchToken=tokens[i];
    }
 else     if (token.trim().equals(",")) {
      commaCount++;
      dotCount=0;
      matchToken=tokens[i];
    }
    if (dotCount == 2 && !nextToken.equals(".")) {
      String msg="Two consecutive dots.";
      RuleMatch ruleMatch=new RuleMatch(this,matchToken.getStartPos(),matchToken.getStartPos() + 1,msg);
      ruleMatches.add(ruleMatch);
      dotCount=0;
    }
 else     if (commaCount == 2 && !nextToken.equals(",")) {
      String msg="Two consecutive commas.";
      RuleMatch ruleMatch=new RuleMatch(this,matchToken.getStartPos(),matchToken.getStartPos() + 1,msg);
      ruleMatches.add(ruleMatch);
      commaCount=0;
    }
    if (!token.trim().equals(".") && !token.trim().equals(",")) {
      dotCount=0;
      commaCount=0;
    }
  }
  return toRuleMatchArray(ruleMatches);
}
