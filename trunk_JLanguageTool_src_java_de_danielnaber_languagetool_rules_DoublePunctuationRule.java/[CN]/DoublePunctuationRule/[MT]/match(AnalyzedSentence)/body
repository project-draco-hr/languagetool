{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokens();
  AnalyzedToken matchToken=null;
  int dotCount=0;
  int commaCount=0;
  for (int i=0; i < tokens.length; i++) {
    final String token=tokens[i].getToken();
    String nextToken=null;
    if (i < tokens.length - 1)     nextToken=tokens[i + 1].getToken();
    if (token.trim().equals(".")) {
      dotCount++;
      commaCount=0;
      matchToken=tokens[i].getAnalyzedToken(0);
    }
 else     if (token.trim().equals(",")) {
      commaCount++;
      dotCount=0;
      matchToken=tokens[i].getAnalyzedToken(0);
    }
    if (dotCount == 2 && !".".equals(nextToken)) {
      final String msg=messages.getString("two_dots");
      @SuppressWarnings("null") final int fromPos=Math.max(0,matchToken.getStartPos() - 1);
      final RuleMatch ruleMatch=new RuleMatch(this,fromPos,matchToken.getStartPos() + 1,msg,messages.getString("double_dots_short"));
      ruleMatch.setSuggestedReplacement(".");
      ruleMatches.add(ruleMatch);
      dotCount=0;
    }
 else     if (commaCount == 2 && !",".equals(nextToken)) {
      final String msg=messages.getString("two_commas");
      @SuppressWarnings("null") final int fromPos=Math.max(0,matchToken.getStartPos() - 1);
      final RuleMatch ruleMatch=new RuleMatch(this,fromPos,matchToken.getStartPos() + 1,msg,messages.getString("double_commas_short"));
      ruleMatch.setSuggestedReplacement(",");
      ruleMatches.add(ruleMatch);
      commaCount=0;
    }
    if (!token.trim().equals(".") && !token.trim().equals(",")) {
      dotCount=0;
      commaCount=0;
    }
  }
  return toRuleMatchArray(ruleMatches);
}
