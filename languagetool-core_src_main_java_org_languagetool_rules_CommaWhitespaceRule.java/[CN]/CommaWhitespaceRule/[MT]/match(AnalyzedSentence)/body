{
  final List<RuleMatch> ruleMatches=new ArrayList<>();
  final AnalyzedTokenReadings[] tokens=sentence.getTokens();
  String prevToken="";
  String prevPrevToken="";
  boolean prevWhite=false;
  for (int i=0; i < tokens.length; i++) {
    final String token=tokens[i].getToken();
    final boolean isWhitespace=tokens[i].isWhitespace() || StringTools.isNonBreakingWhitespace(token) || tokens[i].isFieldCode();
    String msg=null;
    String suggestionText=null;
    if (isWhitespace && isLeftBracket(prevToken)) {
      msg=messages.getString("no_space_after");
      suggestionText=prevToken;
    }
 else     if (!isWhitespace && prevToken.equals(getCommaCharacter()) && isNotQuoteOrHyphen(token)&& containsNoNumber(prevPrevToken)&& containsNoNumber(token)&& !",".equals(prevPrevToken)) {
      msg=messages.getString("missing_space_after_comma");
      suggestionText=getCommaCharacter() + " " + tokens[i].getToken();
    }
 else     if (prevWhite) {
      if (isRightBracket(token)) {
        msg=messages.getString("no_space_before");
        suggestionText=token;
      }
 else       if (token.equals(getCommaCharacter())) {
        msg=messages.getString("space_after_comma");
        suggestionText=getCommaCharacter();
        if (i + 1 < tokens.length && getCommaCharacter().equals(tokens[i + 1].getToken())) {
          msg=null;
        }
      }
 else       if (token.equals(".")) {
        msg=messages.getString("no_space_before_dot");
        suggestionText=".";
        if (i + 1 < tokens.length && isNumberOrDot(tokens[i + 1].getToken())) {
          msg=null;
        }
      }
    }
    if (msg != null) {
      final int fromPos=tokens[i - 1].getStartPos();
      final int toPos=tokens[i].getStartPos() + tokens[i].getToken().length();
      final RuleMatch ruleMatch=new RuleMatch(this,fromPos,toPos,msg);
      ruleMatch.setSuggestedReplacement(suggestionText);
      ruleMatches.add(ruleMatch);
    }
    prevPrevToken=prevToken;
    prevToken=token;
    prevWhite=isWhitespace && !tokens[i].isFieldCode();
  }
  return toRuleMatchArray(ruleMatches);
}
