{
  List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  AnalyzedTokenReadings[] tokens=text.getTokens();
  String prevToken="";
  int pos=0;
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i].getToken().trim();
    boolean isWhiteBefore=tokens[i].isWhitespaceBefore();
    pos+=token.length();
    String msg=null;
    int fixPos=0;
    int fixLen=0;
    String suggestionText=null;
    if (token.equals("?") && isWhiteBefore) {
      msg="Point d'interrogation est pr??c??d?? d'une espace fine ins??cable.";
      suggestionText="???";
      fixLen=1;
    }
 else     if (token.equals("!") && isWhiteBefore) {
      msg="Point d'exclamation est pr??c??d?? d'une espace fine ins??cable.";
      suggestionText="??!";
      fixLen=1;
    }
 else     if (token.equals("??") && isWhiteBefore) {
      msg="Le guillemet fermant est pr??c??d?? d'une espace fine ins??cable.";
      suggestionText="????";
      fixLen=1;
    }
 else     if (StringTools.isEmpty(token) && prevToken.equals("??")) {
      msg="Le guillemet ouvrant est suivi d'une espace fine ins??cable.";
      suggestionText="????";
      fixLen=1;
    }
 else     if (token.equals(";") && isWhiteBefore) {
      msg="Point-virgule est pr??c??d?? d'une espace fine ins??cable.";
      suggestionText="??;";
      fixLen=1;
    }
 else     if (token.equals(":") && isWhiteBefore) {
      msg="Deux-points sont pr??c??d?? d'une espace fine ins??cable.";
      suggestionText="??:";
      fixLen=1;
    }
 else     if (token.equals("?") && !isWhiteBefore && !prevToken.equals("!")&& !(prevToken.equals("\u00a0"))) {
      msg="Point d'interrogation est pr??c??d?? d'une espace fine ins??cable.";
      suggestionText=prevToken + "???";
      fixLen=1;
    }
 else     if (token.equals("!") && !isWhiteBefore && !prevToken.equals("?")&& !(prevToken.equals("\u00a0"))) {
      msg="Point d'exclamation est pr??c??d?? d'une espace fine ins??cable.";
      suggestionText=prevToken + "??!";
      fixLen=1;
    }
 else     if (token.equals(";") && !isWhiteBefore && !(prevToken.equals("\u00a0"))) {
      msg="Point-virgule est pr??c??d?? d'une espace fine ins??cable.";
      suggestionText=prevToken + "??;";
      fixLen=1;
    }
 else     if (token.equals(":") && !isWhiteBefore && !(prevToken.equals("\u00a0"))) {
      msg="Deux-points pr??c??d??s d'une espace fine ins??cable.";
      suggestionText=prevToken + "??:";
      fixLen=1;
    }
 else     if (!StringTools.isEmpty(token) && !token.equals("\u00a0") && prevToken.equals("??")) {
      msg="Le guillemet ouvrant est suivi d'une espace fine ins??cable.";
      suggestionText="????";
      fixLen=0;
    }
 else     if (!isWhiteBefore && !prevToken.equals("\u00a0") && token.equals("??")) {
      msg="Le guillemet fermant est pr??c??d?? d'une espace fine ins??cable.";
      suggestionText=prevToken + "????";
      fixLen=1;
    }
    if (msg != null) {
      int fromPos=tokens[i - 1].getStartPos() + fixPos;
      int toPos=tokens[i - 1].getStartPos() + fixPos + fixLen+ tokens[i - 1].getToken().length();
      RuleMatch ruleMatch=new RuleMatch(this,fromPos,toPos,msg,"Ins??rer un espace ins??cable");
      if (suggestionText != null)       ruleMatch.setSuggestedReplacement(suggestionText);
      ruleMatches.add(ruleMatch);
    }
    prevToken=token;
  }
  return toRuleMatchArray(ruleMatches);
}
