{
  List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  AnalyzedTokenReadings[] tokens=text.getTokens();
  String prevToken="";
  int pos=0;
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i].getToken();
    pos+=token.length();
    String msg=null;
    int fixPos=0;
    int fixLen=0;
    String suggestionText=null;
    if (token.trim().equals("?") && prevToken.trim().equals("")) {
      msg="Point d'interrogation, point d'exclamation, point-virgule et deux-points sont suivis d'un blanc et pr??c??d??s d'une espace fine ins??cable";
      suggestionText="???";
      fixLen=1;
    }
 else     if (token.trim().equals("!") && prevToken.trim().equals("")) {
      msg="Point d'interrogation, point d'exclamation, point-virgule et deux-points sont suivis d'un blanc et pr??c??d??s d'une espace fine ins??cable";
      suggestionText="??!";
      fixLen=1;
    }
 else     if (token.trim().equals(";") && prevToken.trim().equals("")) {
      msg="Point d'interrogation, point d'exclamation, point-virgule et deux-points sont pr??c??d??s d'une espace fine ins??cable";
      suggestionText="??;";
      fixLen=1;
    }
 else     if (token.trim().equals(":") && prevToken.trim().equals("")) {
      msg="Point d'interrogation, point d'exclamation, point-virgule et deux-points sont pr??c??d??s d'une espace fine ins??cable";
      suggestionText="??:";
      fixLen=1;
    }
 else     if (token.trim().equals("?") && !prevToken.trim().equals("") && !prevToken.trim().equals("!")&& !(prevToken.trim().charAt(prevToken.length() - 1) == '\u00a0')) {
      msg="Point d'interrogation, point d'exclamation, point-virgule et deux-points sont pr??c??d??s d'une espace fine ins??cable";
      suggestionText=prevToken + "???";
      fixLen=1;
    }
 else     if (token.trim().equals("!") && !prevToken.trim().equals("") && !prevToken.trim().equals("?")&& !(prevToken.trim().charAt(prevToken.length() - 1) == '\u00a0')) {
      msg="Point d'interrogation, point d'exclamation, point-virgule et deux-points sont pr??c??d??s d'une espace fine ins??cable";
      suggestionText=prevToken + "??!";
      fixLen=1;
    }
 else     if (token.trim().equals(";") && !prevToken.trim().equals("") && !(prevToken.trim().charAt(prevToken.length() - 1) == '\u00a0')) {
      msg="Point d'interrogation, point d'exclamation, point-virgule et deux-points sont suivis d'un blanc et pr??c??d??s d'une espace fine ins??cable";
      suggestionText=prevToken + "??;";
      fixLen=1;
    }
 else     if (token.trim().equals(":") && !prevToken.trim().equals("") && !(prevToken.trim().charAt(prevToken.length() - 1) == '\u00a0')) {
      msg="Point d'interrogation, point d'exclamation, point-virgule et deux-points sont suivis d'un blanc et pr??c??d??s d'une espace fine ins??cable";
      suggestionText=prevToken + "??:";
      fixLen=1;
    }
    if (msg != null) {
      int fromPos=tokens[i - 1].getStartPos() + fixPos;
      int toPos=tokens[i - 1].getStartPos() + fixPos + fixLen+ prevToken.length();
      RuleMatch ruleMatch=new RuleMatch(this,fromPos,toPos,msg);
      if (suggestionText != null)       ruleMatch.setSuggestedReplacement(suggestionText);
      ruleMatches.add(ruleMatch);
    }
    prevToken=token;
  }
  return toRuleMatchArray(ruleMatches);
}
