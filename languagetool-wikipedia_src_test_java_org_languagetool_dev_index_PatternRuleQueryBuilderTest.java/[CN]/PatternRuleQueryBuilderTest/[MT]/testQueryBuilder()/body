{
  final StringBuilder sb=new StringBuilder();
  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?> <rules lang=\"en\"> <category name=\"Test\"> <rule id=\"TEST_RULE\" name=\"test\"> <pattern>");
  sb.append("<token skip=\"-1\">How</token>");
  sb.append("<token postag=\"PRP\"></token>");
  sb.append("<token skip=\"1\">thin</token>");
  sb.append("<token postag_regexp=\"yes\" postag=\"JJ|DT\">this</token>");
  sb.append("<token regexp=\"yes\" negate=\"yes\">bad|good</token>");
  sb.append("<token regexp=\"yes\">idea|proposal</token>");
  sb.append("</pattern> </rule> </category> </rules>");
  final InputStream input=new ByteArrayInputStream(sb.toString().getBytes());
  final PatternRuleLoader ruleLoader=new PatternRuleLoader();
  final List<PatternRule> rules=ruleLoader.getRules(input,"test.xml");
  final PatternRuleQueryBuilder patternRuleQueryBuilder=new PatternRuleQueryBuilder(language);
  final Query query=patternRuleQueryBuilder.buildRelaxedQuery(rules.get(0));
  assertEquals("+fieldLowercase:how +fieldLowercase:_pos_prp +fieldLowercase:thin " + "+spanNear([fieldLowercase:this, SpanMultiTermQueryWrapper(fieldLowercase:/_pos_(jj|dt)/)], 0, false) " + "+fieldLowercase:/idea|proposal/",query.toString());
}
