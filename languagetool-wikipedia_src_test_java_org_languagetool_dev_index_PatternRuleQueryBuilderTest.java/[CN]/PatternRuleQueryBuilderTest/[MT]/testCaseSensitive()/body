{
  final InputStream input=new ByteArrayInputStream(("<?xml version='1.0' encoding='UTF-8'?> <rules lang='en'> <category name='Test'>" + "<rule id='TEST_RULE_1' name='test_1'> <pattern case_sensitive='yes'>" + "  <token>How</token>"+ "</pattern> </rule>"+ "<rule id='TEST_RULE_2' name='test_2'> <pattern case_sensitive='yes'>"+ "  <token>how</token>"+ "</pattern> </rule>"+ "<rule id='TEST_RULE_3' name='test_3'> <pattern>"+ "  <token>How</token>"+ "</pattern> </rule>"+ "<rule id='TEST_RULE_4' name='test_4'> <pattern>"+ "  <token>how</token>"+ "</pattern> </rule>"+ "</category> </rules>").getBytes());
  final PatternRuleLoader ruleLoader=new PatternRuleLoader();
  final List<AbstractPatternRule> rules=ruleLoader.getRules(input,"test.xml");
  final PatternRuleQueryBuilder patternRuleQueryBuilder=new PatternRuleQueryBuilder(language,searcher);
  Query query=patternRuleQueryBuilder.buildRelaxedQuery(rules.get(0));
  assertEquals(1,searcher.search(query,null,1000).totalHits);
  query=patternRuleQueryBuilder.buildRelaxedQuery(rules.get(1));
  assertEquals(0,searcher.search(query,null,1000).totalHits);
  query=patternRuleQueryBuilder.buildRelaxedQuery(rules.get(2));
  assertEquals(1,searcher.search(query,null,1000).totalHits);
  query=patternRuleQueryBuilder.buildRelaxedQuery(rules.get(3));
  assertEquals(1,searcher.search(query,null,1000).totalHits);
}
