{
  if (!exceptionSet || patternToken == null) {
    boolean tokenCase=caseSensitive;
    if (tokenLevelCaseSet) {
      tokenCase=tokenLevelCaseSensitive;
    }
    patternToken=new PatternToken(elements.toString(),tokenCase,regExpression,tokenInflected);
    patternToken.setNegation(tokenNegated);
  }
 else {
    patternToken.setStringElement(elements.toString());
  }
  if (skipPos != 0) {
    patternToken.setSkipNext(skipPos);
    skipPos=0;
  }
  if (minOccurrence == 0) {
    patternToken.setMinOccurrence(0);
  }
  if (maxOccurrence != 1) {
    patternToken.setMaxOccurrence(maxOccurrence);
    maxOccurrence=1;
  }
  if (posToken != null) {
    patternToken.setPosElement(posToken,posRegExp,posNegation);
    posToken=null;
  }
  if (chunkTag != null) {
    patternToken.setChunkElement(chunkTag);
    chunkTag=null;
  }
  if (tokenReference != null) {
    patternToken.setMatch(tokenReference);
  }
  if (inAndGroup && andGroupCounter > 0) {
    patternTokens.get(patternTokens.size() - 1).setAndGroupElement(patternToken);
    if (minOccurrence != 1 || maxOccurrence != 1) {
      throw new SAXException("Please set min and max attributes on the " + "first token in the AND group.\n You attempted to set these " + "attributes on the token no. " + (andGroupCounter + 1) + "."+ "\n Line: "+ pLocator.getLineNumber()+ ", column: "+ pLocator.getColumnNumber()+ ".");
    }
  }
 else   if (inOrGroup && orGroupCounter > 0) {
    patternTokens.get(patternTokens.size() - 1).setOrGroupElement(patternToken);
  }
 else {
    if (minOccurrence < 1) {
      patternTokens.add(patternToken);
    }
    for (int i=1; i <= minOccurrence; i++) {
      patternTokens.add(patternToken);
    }
    minOccurrence=1;
  }
  if (inAndGroup) {
    andGroupCounter++;
  }
  if (inOrGroup) {
    orGroupCounter++;
  }
  if (inUnification) {
    patternToken.setUnification(equivalenceFeatures);
  }
  if (inUnificationNeutral) {
    patternToken.setUnificationNeutral();
  }
  patternToken.setInsideMarker(inMarker);
  if (inUnificationDef) {
    language.getUnifierConfiguration().setEquivalence(uFeature,uType,patternToken);
    patternTokens.clear();
  }
  if (tokenSpaceBeforeSet) {
    patternToken.setWhitespaceBefore(tokenSpaceBefore);
  }
  resetToken();
}
