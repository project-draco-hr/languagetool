{
  inToken=true;
  if (lastPhrase) {
    elementList.clear();
  }
  lastPhrase=false;
  tokenNegated=YES.equals(attrs.getValue(NEGATE));
  tokenInflected=YES.equals(attrs.getValue(INFLECTED));
  if (attrs.getValue(SKIP) != null) {
    skipPos=Integer.parseInt(attrs.getValue(SKIP));
  }
  if (attrs.getValue(MAX) != null) {
    maxOccurrence=Integer.parseInt(attrs.getValue(MAX));
  }
  elements=new StringBuilder();
  if (attrs.getValue(POSTAG) != null) {
    posToken=attrs.getValue(POSTAG);
    posRegExp=YES.equals(attrs.getValue(POSTAG_REGEXP));
    posNegation=YES.equals(attrs.getValue(NEGATE_POS));
  }
  regExpression=YES.equals(attrs.getValue(REGEXP));
  if (attrs.getValue(SPACEBEFORE) != null) {
    tokenSpaceBefore=YES.equals(attrs.getValue(SPACEBEFORE));
    tokenSpaceBeforeSet=!IGNORE.equals(attrs.getValue(SPACEBEFORE));
  }
  if (!inAndGroup) {
    tokenCounter++;
  }
}
