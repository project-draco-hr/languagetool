{
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  if (tokens.length > 3) {
    final AnalyzedTokenReadings analyzedToken=tokens[1];
    final String token=analyzedToken.getToken();
    boolean isWord=true;
    if (token.length() == 1) {
      final char c=token.charAt(0);
      if (!Character.isLetter(c)) {
        isWord=false;
      }
    }
    if (isWord && lastToken.equals(token) && !isException(token)&& !isException(tokens[2].getToken())&& !isException(tokens[3].getToken())) {
      final String shortMsg;
      if (isAdverb(analyzedToken)) {
        shortMsg=messages.getString("desc_repetition_beginning_adv");
      }
 else       if (beforeLastToken.equals(token)) {
        shortMsg=messages.getString("desc_repetition_beginning_word");
      }
 else {
        shortMsg="";
      }
      if (!shortMsg.equals("")) {
        final String msg=shortMsg + " " + messages.getString("desc_repetition_beginning_thesaurus");
        final int startPos=analyzedToken.getStartPos();
        final int endPos=startPos + token.length();
        final RuleMatch ruleMatch=new RuleMatch(this,startPos,endPos,msg,shortMsg);
        ruleMatches.add(ruleMatch);
      }
    }
    beforeLastToken=lastToken;
    lastToken=token;
  }
  return toRuleMatchArray(ruleMatches);
}
