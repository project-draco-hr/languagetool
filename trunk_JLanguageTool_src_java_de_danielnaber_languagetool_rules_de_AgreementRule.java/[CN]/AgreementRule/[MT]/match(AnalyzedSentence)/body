{
  List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  int pos=0;
  for (int i=0; i < tokens.length; i++) {
    String posToken=tokens[i].getAnalyzedToken(0).getPOSTag();
    if (posToken != null && posToken.equals(JLanguageTool.SENTENCE_START_TAGNAME))     continue;
    AnalyzedGermanTokenReadings analyzedToken=(AnalyzedGermanTokenReadings)tokens[i];
    boolean isRelevantPronomen=analyzedToken.hasReadingOfType(POSType.PRONOMEN);
    if (i > 0 && tokens[i - 1].getToken().equalsIgnoreCase("vor") && tokens[i].getToken().equalsIgnoreCase("allem"))     isRelevantPronomen=false;
 else     if (tokens[i].getToken().equalsIgnoreCase("er") || tokens[i].getToken().equalsIgnoreCase("sie") || tokens[i].getToken().equalsIgnoreCase("es"))     isRelevantPronomen=false;
 else     if (tokens[i].getToken().equalsIgnoreCase("dessen"))     isRelevantPronomen=false;
 else     if (tokens[i].getToken().equalsIgnoreCase("deren"))     isRelevantPronomen=false;
 else     if (tokens[i].getToken().equalsIgnoreCase("sich"))     isRelevantPronomen=false;
 else     if (tokens[i].getToken().equalsIgnoreCase("unser"))     isRelevantPronomen=false;
 else     if (tokens[i].getToken().equalsIgnoreCase("aller"))     isRelevantPronomen=false;
 else     if (tokens[i].getToken().equalsIgnoreCase("man"))     isRelevantPronomen=false;
    boolean ignore=tokens[i - 1].getToken().equals(",") && tokens[i].getToken().equalsIgnoreCase("das");
    if ((analyzedToken.hasReadingOfType(POSType.DETERMINER) || isRelevantPronomen) && !ignore) {
      int tokenPos=i + 1;
      if (tokenPos >= tokens.length)       break;
      AnalyzedGermanTokenReadings nextToken=(AnalyzedGermanTokenReadings)tokens[tokenPos];
      if (nextToken.hasReadingOfType(POSType.ADJEKTIV)) {
        tokenPos=i + 2;
        if (tokenPos >= tokens.length)         break;
        AnalyzedGermanTokenReadings nextNextToken=(AnalyzedGermanTokenReadings)tokens[tokenPos];
        if (nextNextToken.hasReadingOfType(POSType.NOMEN)) {
          RuleMatch ruleMatch=checkDetAdjNounAgreement((AnalyzedGermanTokenReadings)tokens[i],(AnalyzedGermanTokenReadings)tokens[i + 1],(AnalyzedGermanTokenReadings)tokens[i + 2]);
          if (ruleMatch != null)           ruleMatches.add(ruleMatch);
        }
      }
 else       if (nextToken.hasReadingOfType(POSType.NOMEN)) {
        RuleMatch ruleMatch=checkDetNounAgreement((AnalyzedGermanTokenReadings)tokens[i],(AnalyzedGermanTokenReadings)tokens[i + 1]);
        if (ruleMatch != null)         ruleMatches.add(ruleMatch);
      }
    }
    pos+=tokens[i].getToken().length();
  }
  return toRuleMatchArray(ruleMatches);
}
