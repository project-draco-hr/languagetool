{
  List ruleMatches=new ArrayList();
  AnalyzedToken[] tokens=text.getTokensWithoutWhitespace();
  int pos=0;
  for (int i=0; i < tokens.length; i++) {
    String posToken=tokens[i].getPOSTag();
    if (posToken != null && posToken.equals(JLanguageTool.SENTENCE_START_TAGNAME))     continue;
    AnalyzedGermanToken analyzedToken=(AnalyzedGermanToken)tokens[i];
    if (analyzedToken.hasReadingOfType(POSType.DETERMINER)) {
      int tokenPos=i + 1;
      if (tokenPos >= tokens.length)       break;
      AnalyzedGermanToken nextToken=(AnalyzedGermanToken)tokens[tokenPos];
      if (nextToken.hasReadingOfType(POSType.ADJEKTIV)) {
        tokenPos=i + 2;
        if (tokenPos >= tokens.length)         break;
        AnalyzedGermanToken nextNextToken=(AnalyzedGermanToken)tokens[tokenPos];
        if (nextNextToken.hasReadingOfType(POSType.NOMEN)) {
          RuleMatch ruleMatch=checkDetAdjNounAgreement((AnalyzedGermanToken)tokens[i],(AnalyzedGermanToken)tokens[i + 1],(AnalyzedGermanToken)tokens[i + 2]);
          if (ruleMatch != null)           ruleMatches.add(ruleMatch);
        }
      }
 else       if (nextToken.hasReadingOfType(POSType.NOMEN)) {
        RuleMatch ruleMatch=checkDetNounAgreement((AnalyzedGermanToken)tokens[i],(AnalyzedGermanToken)tokens[i + 1]);
        if (ruleMatch != null)         ruleMatches.add(ruleMatch);
      }
    }
    pos+=tokens[i].getToken().length();
  }
  return toRuleMatchArray(ruleMatches);
}
