{
  if (mStartSpace != null)   return;
  mStartSpace=new HashMap<String,String>();
  mStartNoSpace=new HashMap<String,String>();
  mFull=new HashMap<String,String>();
  final String[] posTokens=TOKEN_DEFINITIONS.split("\n");
  for (  String posToken : posTokens) {
    final String[] tokenAndTag=posToken.split("\\|");
    final boolean containsSpace=tokenAndTag[0].indexOf(' ') > 0;
    String firstToken="";
    String[] firstTokens;
    if (!containsSpace) {
      firstTokens=new String[tokenAndTag[0].length()];
      firstToken=tokenAndTag[0].substring(0,1);
      for (int i=1; i < tokenAndTag[0].length(); i++) {
        firstTokens[i]=tokenAndTag[0].substring(0 + (i - 1),i);
      }
      if (mStartNoSpace.containsKey(firstToken)) {
        if (Integer.parseInt(mStartNoSpace.get(firstToken)) < firstTokens.length) {
          mStartNoSpace.put(firstToken,Integer.toString(firstTokens.length));
        }
      }
 else {
        mStartNoSpace.put(firstToken,Integer.toString(firstTokens.length));
      }
    }
 else {
      firstTokens=tokenAndTag[0].split(" ");
      firstToken=firstTokens[0];
      if (mStartSpace.containsKey(firstToken)) {
        if (Integer.parseInt(mStartSpace.get(firstToken)) < firstTokens.length) {
          mStartSpace.put(firstToken,Integer.toString(firstTokens.length));
        }
      }
 else {
        mStartSpace.put(firstToken,Integer.toString(firstTokens.length));
      }
    }
    mFull.put(tokenAndTag[0],tokenAndTag[1]);
  }
}
