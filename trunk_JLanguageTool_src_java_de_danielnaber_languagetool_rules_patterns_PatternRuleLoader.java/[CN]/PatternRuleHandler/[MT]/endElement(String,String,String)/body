{
  if (qName.equals("rule")) {
    phraseElementInit();
    if (phraseElementList.isEmpty()) {
      final PatternRule rule=new PatternRule(id,language,elementList,description,message.toString(),shortMessage.toString());
      prepareRule(rule);
      rules.add(rule);
    }
 else {
      if (!elementList.isEmpty()) {
        for (        final ArrayList<Element> ph : phraseElementList) {
          ph.addAll(new ArrayList<Element>(elementList));
        }
      }
      for (      final ArrayList<Element> phraseElement : phraseElementList) {
        processElement(phraseElement);
        final PatternRule rule=new PatternRule(id,language,phraseElement,description,message.toString(),shortMessage.toString(),phraseElementList.size() > 1);
        prepareRule(rule);
        rules.add(rule);
      }
    }
    elementList.clear();
    if (phraseElementList != null) {
      phraseElementList.clear();
    }
  }
 else   if (qName.equals(EXCEPTION)) {
    finalizeExceptions();
  }
 else   if (qName.equals(AND)) {
    inAndGroup=false;
    andGroupCounter=0;
    tokenCounter++;
  }
 else   if (qName.equals(TOKEN)) {
    finalizeTokens();
  }
 else   if (qName.equals("pattern")) {
    if (phraseElementList == null || phraseElementList.size() == 0) {
      final int endMarker=elementList.size() + endPositionCorrection;
      if (endMarker <= startPositionCorrection) {
        throw new RuntimeException("Invalid combination of mark_from (" + startPositionCorrection + ") and mark_to ("+ endPositionCorrection+ ") for rule "+ id+ " with "+ elementList.size()+ " tokens: the error position created by mark_from and mark_to is less than one token");
      }
    }
    inPattern=false;
    if (lastPhrase) {
      elementList.clear();
    }
    if (phraseElementList == null || phraseElementList.isEmpty()) {
      checkPositions(0);
    }
 else {
      for (      List<Element> elements : phraseElementList) {
        checkPositions(elements.size());
      }
    }
    tokenCounter=0;
  }
 else   if (qName.equals(EXAMPLE)) {
    if (inCorrectExample) {
      correctExamples.add(correctExample.toString());
    }
 else     if (inIncorrectExample) {
      IncorrectExample example=null;
      final String[] corrections=exampleCorrection.toString().split("\\|");
      if (corrections.length > 0 && corrections[0].length() > 0) {
        example=new IncorrectExample(incorrectExample.toString(),corrections);
      }
 else {
        example=new IncorrectExample(incorrectExample.toString());
      }
      incorrectExamples.add(example);
    }
    inCorrectExample=false;
    inIncorrectExample=false;
    correctExample=new StringBuilder();
    incorrectExample=new StringBuilder();
    exampleCorrection=new StringBuilder();
  }
 else   if (qName.equals("message")) {
    suggestionMatches=addLegacyMatches();
    inMessage=false;
  }
 else   if (qName.equals("short")) {
    inShortMessage=false;
  }
 else   if (qName.equals("match")) {
    if (inMessage) {
      suggestionMatches.get(suggestionMatches.size() - 1).setLemmaString(match.toString());
    }
 else     if (inToken) {
      tokenReference.setLemmaString(match.toString());
    }
    inMatch=false;
  }
 else   if (qName.equals("rulegroup")) {
    inRuleGroup=false;
  }
 else   if (qName.equals("suggestion") && inMessage) {
    message.append("</suggestion>");
    inSuggestion=false;
  }
 else   if (qName.equals(MARKER) && inCorrectExample) {
    correctExample.append("</marker>");
  }
 else   if (qName.equals(MARKER) && inIncorrectExample) {
    incorrectExample.append("</marker>");
  }
 else   if (qName.equals("phrase") && inPhrases) {
    finalizePhrase();
  }
 else   if (qName.equals("includephrases")) {
    elementList.clear();
  }
 else   if (qName.equals("phrases") && inPhrases) {
    inPhrases=false;
  }
 else   if (qName.equals("unification")) {
    inUnificationDef=false;
  }
 else   if (qName.equals("feature")) {
    equivalenceFeatures.put(uFeature,uTypeList);
    uTypeList=new ArrayList<String>();
  }
 else   if (qName.equals("unify")) {
    inUnification=false;
    equivalenceFeatures=new HashMap<String,List<String>>();
  }
}
