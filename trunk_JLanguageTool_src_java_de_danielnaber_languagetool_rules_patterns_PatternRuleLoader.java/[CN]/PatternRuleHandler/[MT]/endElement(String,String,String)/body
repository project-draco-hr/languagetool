{
  if (qName.equals("rule")) {
    if (phraseElementList == null) {
      phraseElementList=new ArrayList<ArrayList<Element>>();
    }
    if (!phraseElementList.isEmpty()) {
      if (!elementList.isEmpty()) {
        Iterator<ArrayList<Element>> phIt=phraseElementList.iterator();
        while (phIt.hasNext()) {
          phIt.next().addAll(new ArrayList<Element>(elementList));
        }
      }
      Iterator<ArrayList<Element>> it=phraseElementList.iterator();
      while (it.hasNext()) {
        PatternRule rule=new PatternRule(id,language,it.next(),description,message.toString(),phraseElementList.size() > 1);
        rule.setStartPositionCorrection(startPositionCorrection);
        rule.setEndPositionCorrection(endPositionCorrection);
        startPositionCorrection=0;
        endPositionCorrection=0;
        rule.setCorrectExamples(correctExamples);
        rule.setIncorrectExamples(incorrectExamples);
        rule.setCategory(category);
        caseSensitive=false;
        rules.add(rule);
      }
    }
 else {
      PatternRule rule=new PatternRule(id,language,elementList,description,message.toString());
      rule.setStartPositionCorrection(startPositionCorrection);
      rule.setEndPositionCorrection(endPositionCorrection);
      startPositionCorrection=0;
      endPositionCorrection=0;
      rule.setCorrectExamples(correctExamples);
      rule.setIncorrectExamples(incorrectExamples);
      rule.setCategory(category);
      caseSensitive=false;
      rules.add(rule);
    }
    if (elementList != null) {
      elementList.clear();
    }
    if (phraseElementList != null) {
      phraseElementList.clear();
    }
  }
 else   if (qName.equals("exception")) {
    inException=false;
    if (!exceptionSet) {
      stringElement=new Element(elements.toString(),caseSensitive,stringRegExp,stringInflected);
      exceptionSet=true;
    }
    stringElement.setNegation(stringNegation);
    if (!exceptions.toString().equals("")) {
      stringElement.setStringException(exceptions.toString(),exceptionStringRegExp,exceptionStringInflected,exceptionStringNegation,exceptionValidNext);
    }
    if (exceptionPosToken != null) {
      stringElement.setPosException(exceptionPosToken,exceptionPosRegExp,exceptionPosNegation,exceptionValidNext);
      exceptionPosToken=null;
    }
  }
 else   if (qName.equals("token")) {
    if (!exceptionSet || stringElement == null) {
      stringElement=new Element(elements.toString(),caseSensitive,stringRegExp,stringInflected);
      stringElement.setNegation(stringNegation);
    }
 else {
      stringElement.setStringElement(elements.toString());
    }
    if (skipPos != 0) {
      stringElement.setSkipNext(skipPos);
      skipPos=0;
    }
    if (posToken != null) {
      stringElement.setPosElement(posToken,posRegExp,posNegation);
      posToken=null;
    }
    elementList.add(stringElement);
    stringNegation=false;
    stringInflected=false;
    posNegation=false;
    posRegExp=false;
    inToken=false;
    stringRegExp=false;
    exceptionStringNegation=false;
    exceptionStringInflected=false;
    exceptionPosNegation=false;
    exceptionPosRegExp=false;
    exceptionStringRegExp=false;
    exceptionValidNext=true;
    exceptionSet=false;
  }
 else   if (qName.equals("pattern")) {
    inPattern=false;
    if (lastPhrase) {
      elementList.clear();
    }
  }
 else   if (qName.equals("example")) {
    if (inCorrectExample) {
      correctExamples.add(correctExample.toString());
    }
 else     if (inIncorrectExample) {
      incorrectExamples.add(incorrectExample.toString());
    }
    inCorrectExample=false;
    inIncorrectExample=false;
    correctExample=new StringBuffer();
    incorrectExample=new StringBuffer();
  }
 else   if (qName.equals("message")) {
    inMessage=false;
  }
 else   if (qName.equals("rulegroup")) {
    inRuleGroup=false;
  }
 else   if (qName.equals("suggestion") && inMessage) {
    message.append("</suggestion>");
  }
 else   if (qName.equals("marker") && inCorrectExample) {
    correctExample.append("</marker>");
  }
 else   if (qName.equals("marker") && inIncorrectExample) {
    incorrectExample.append("</marker>");
  }
 else   if (qName.equals("phrase") && inPhrases) {
    if (phraseMap == null) {
      phraseMap=new HashMap<String,ArrayList<ArrayList<Element>>>();
    }
    if (phraseElementList == null) {
      phraseElementList=new ArrayList<ArrayList<Element>>();
    }
    if (elementList != null) {
      if (!phraseElementList.isEmpty()) {
        Iterator<ArrayList<Element>> phIt=phraseElementList.iterator();
        while (phIt.hasNext()) {
          phIt.next().addAll(new ArrayList<Element>(elementList));
        }
      }
 else {
        phraseElementList.add(new ArrayList<Element>(elementList));
      }
    }
    phraseMap.put(phraseId,new ArrayList<ArrayList<Element>>(phraseElementList));
    if (elementList != null) {
      elementList.clear();
    }
    phraseElementList.clear();
  }
 else   if (qName.equals("includephrases")) {
    elementList.clear();
  }
 else   if (qName.equals("phrases") && inPhrases) {
    inPhrases=false;
  }
}
