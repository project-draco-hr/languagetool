{
  if (qName.equals("rule")) {
    phraseElementInit();
    if (phraseElementList.isEmpty()) {
      final PatternRule rule=new PatternRule(id,language,elementList,description,message.toString());
      prepareRule(rule);
      rules.add(rule);
    }
 else {
      if (!elementList.isEmpty()) {
        for (        final ArrayList<Element> ph : phraseElementList) {
          ph.addAll(new ArrayList<Element>(elementList));
        }
      }
      for (      final ArrayList<Element> phraseElement : phraseElementList) {
        processElement(phraseElement);
        final PatternRule rule=new PatternRule(id,language,phraseElement,description,message.toString(),phraseElementList.size() > 1);
        prepareRule(rule);
        rules.add(rule);
      }
    }
    if (elementList != null) {
      elementList.clear();
    }
    if (phraseElementList != null) {
      phraseElementList.clear();
    }
  }
 else   if (qName.equals("exception")) {
    inException=false;
    if (!exceptionSet) {
      tokenElement=new Element(StringTools.trimWhitespace(elements.toString()),caseSensitive,stringRegExp,tokenInflected);
      exceptionSet=true;
    }
    tokenElement.setNegation(tokenNegated);
    if (!"".equals(exceptions.toString())) {
      tokenElement.setStringException(StringTools.trimWhitespace(exceptions.toString()),exceptionStringRegExp,exceptionStringInflected,exceptionStringNegation,exceptionValidNext,exceptionValidPrev);
    }
    if (exceptionPosToken != null) {
      tokenElement.setPosException(exceptionPosToken,exceptionPosRegExp,exceptionPosNegation,exceptionValidNext,exceptionValidPrev);
      exceptionPosToken=null;
    }
    resetException();
  }
 else   if (qName.equals("and")) {
    inAndGroup=false;
    andGroupCounter=0;
  }
 else   if (qName.equals("token")) {
    if (!exceptionSet || tokenElement == null) {
      tokenElement=new Element(StringTools.trimWhitespace(elements.toString()),caseSensitive,stringRegExp,tokenInflected);
      tokenElement.setNegation(tokenNegated);
    }
 else {
      tokenElement.setStringElement(StringTools.trimWhitespace(elements.toString()));
    }
    if (skipPos != 0) {
      tokenElement.setSkipNext(skipPos);
      skipPos=0;
    }
    if (posToken != null) {
      tokenElement.setPosElement(posToken,posRegExp,posNegation);
      posToken=null;
    }
    if (tokenReference != null) {
      tokenElement.setMatch(tokenReference);
    }
    if (inAndGroup && andGroupCounter > 0) {
      elementList.get(elementList.size() - 1).setAndGroupElement(tokenElement);
    }
 else {
      elementList.add(tokenElement);
    }
    if (inAndGroup) {
      andGroupCounter++;
    }
    resetToken();
  }
 else   if (qName.equals("pattern")) {
    inPattern=false;
    if (lastPhrase) {
      elementList.clear();
    }
  }
 else   if (qName.equals("example")) {
    if (inCorrectExample) {
      correctExamples.add(correctExample.toString());
    }
 else     if (inIncorrectExample) {
      IncorrectExample example=null;
      String[] corrections=exampleCorrection.toString().split("\\|");
      if (corrections.length > 0 && corrections[0].length() > 0) {
        example=new IncorrectExample(incorrectExample.toString(),corrections);
      }
 else {
        example=new IncorrectExample(incorrectExample.toString());
      }
      incorrectExamples.add(example);
    }
    inCorrectExample=false;
    inIncorrectExample=false;
    correctExample=new StringBuffer();
    incorrectExample=new StringBuffer();
    exampleCorrection=new StringBuffer();
  }
 else   if (qName.equals("message")) {
    inMessage=false;
  }
 else   if (qName.equals("match")) {
    if (inMessage) {
      suggestionMatches.get(suggestionMatches.size() - 1).setLemmaString(match.toString());
    }
 else     if (inToken) {
      tokenReference.setLemmaString(match.toString());
    }
    inMatch=false;
  }
 else   if (qName.equals("rulegroup")) {
    inRuleGroup=false;
    subId=0;
  }
 else   if (qName.equals("suggestion") && inMessage) {
    message.append("</suggestion>");
  }
 else   if (qName.equals(MARKER) && inCorrectExample) {
    correctExample.append("</marker>");
  }
 else   if (qName.equals(MARKER) && inIncorrectExample) {
    incorrectExample.append("</marker>");
  }
 else   if (qName.equals("phrase") && inPhrases) {
    if (phraseMap == null) {
      phraseMap=new HashMap<String,ArrayList<ArrayList<Element>>>();
    }
    phraseElementInit();
    if (elementList != null) {
      if (phraseElementList.isEmpty()) {
        phraseElementList.add(new ArrayList<Element>(elementList));
      }
 else {
        for (        final ArrayList<Element> ph : phraseElementList) {
          ph.addAll(new ArrayList<Element>(elementList));
        }
      }
    }
    phraseMap.put(phraseId,new ArrayList<ArrayList<Element>>(phraseElementList));
    if (elementList != null) {
      elementList.clear();
    }
    phraseElementList.clear();
  }
 else   if (qName.equals("includephrases")) {
    elementList.clear();
  }
 else   if (qName.equals("phrases") && inPhrases) {
    inPhrases=false;
  }
}
