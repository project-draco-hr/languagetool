{
  if (qName.equals("category")) {
    final String catName=attrs.getValue("name");
    final String prioStr=attrs.getValue("priority");
    if (prioStr != null) {
      category=new Category(catName,Integer.parseInt(prioStr));
    }
 else {
      category=new Category(catName);
    }
  }
 else   if (qName.equals("rules")) {
    final String languageStr=attrs.getValue("lang");
    language=Language.getLanguageForShortName(languageStr);
    if (language == null) {
      throw new SAXException("Unknown language '" + languageStr + "'");
    }
  }
 else   if (qName.equals("rule")) {
    id=attrs.getValue("id");
    if (inRuleGroup && id == null) {
      id=ruleGroupId;
    }
    description=attrs.getValue("name");
    if (inRuleGroup && description == null) {
      description=ruleGroupDescription;
    }
    correctExamples=new ArrayList<String>();
    incorrectExamples=new ArrayList<String>();
  }
 else   if (qName.equals("pattern")) {
    inPattern=true;
    if (attrs.getValue("mark_from") != null) {
      startPositionCorrection=Integer.parseInt(attrs.getValue("mark_from"));
    }
    if (attrs.getValue("mark_to") != null) {
      endPositionCorrection=Integer.parseInt(attrs.getValue("mark_to"));
    }
    if (attrs.getValue("case_sensitive") != null && YES.equals(attrs.getValue("case_sensitive"))) {
      caseSensitive=true;
    }
  }
 else   if (qName.equals("and")) {
    inAndGroup=true;
  }
 else   if (qName.equals("token")) {
    inToken=true;
    if (lastPhrase && elementList != null) {
      elementList.clear();
    }
    lastPhrase=false;
    if (attrs.getValue(NEGATE) != null) {
      tokenNegated=YES.equals(attrs.getValue(NEGATE));
    }
    if (attrs.getValue(INFLECTED) != null) {
      tokenInflected=YES.equals(attrs.getValue(INFLECTED));
    }
    if (attrs.getValue("skip") != null) {
      skipPos=Integer.parseInt(attrs.getValue("skip"));
    }
    elements=new StringBuffer();
    if (elementList == null) {
      elementList=new ArrayList<Element>();
    }
    if (attrs.getValue(POSTAG) != null) {
      posToken=attrs.getValue(POSTAG);
      if (attrs.getValue(POSTAG_REGEXP) != null) {
        posRegExp=YES.equals(attrs.getValue(POSTAG_REGEXP));
      }
      if (attrs.getValue(NEGATE_POS) != null) {
        posNegation=YES.equals(attrs.getValue(NEGATE_POS));
      }
    }
    if (attrs.getValue(REGEXP) != null) {
      stringRegExp=YES.equals(attrs.getValue(REGEXP));
    }
  }
 else   if (qName.equals("exception")) {
    inException=true;
    exceptions=new StringBuffer();
    if (attrs.getValue(NEGATE) != null) {
      exceptionStringNegation=YES.equals(attrs.getValue(NEGATE));
    }
    if (attrs.getValue("scope") != null) {
      exceptionValidNext=attrs.getValue("scope").equals("next");
    }
    if (attrs.getValue(INFLECTED) != null) {
      exceptionStringInflected=YES.equals(attrs.getValue(INFLECTED));
    }
    if (attrs.getValue(POSTAG) != null) {
      exceptionPosToken=attrs.getValue(POSTAG);
      if (attrs.getValue(POSTAG_REGEXP) != null) {
        exceptionPosRegExp=YES.equals(attrs.getValue(POSTAG_REGEXP));
      }
      if (attrs.getValue(NEGATE_POS) != null) {
        exceptionPosNegation=YES.equals(attrs.getValue(NEGATE_POS));
      }
    }
    if (attrs.getValue(REGEXP) != null) {
      exceptionStringRegExp=YES.equals(attrs.getValue(REGEXP));
    }
  }
 else   if (qName.equals("example") && attrs.getValue("type").equals("correct")) {
    inCorrectExample=true;
    correctExample=new StringBuffer();
  }
 else   if (qName.equals("example") && attrs.getValue("type").equals("incorrect")) {
    inIncorrectExample=true;
    incorrectExample=new StringBuffer();
    if (attrs.getValue("correction") != null) {
      incorrectExample.append("<correction>" + attrs.getValue("correction") + "</correction>");
    }
  }
 else   if (qName.equals("message")) {
    inMessage=true;
    message=new StringBuffer();
  }
 else   if (qName.equals("rulegroup")) {
    ruleGroupId=attrs.getValue("id");
    ruleGroupDescription=attrs.getValue("name");
    inRuleGroup=true;
  }
 else   if (qName.equals("suggestion") && inMessage) {
    message.append("<suggestion>");
  }
 else   if (qName.equals("match")) {
    inMatch=true;
    match=new StringBuffer();
    Match.CaseConversion caseConv=Match.CaseConversion.NONE;
    if (attrs.getValue("case_conversion") != null) {
      caseConv=Match.CaseConversion.toCase(attrs.getValue("case_conversion").toUpperCase());
    }
    final Match mWorker=new Match(attrs.getValue(POSTAG),attrs.getValue("postag_replace"),YES.equals(attrs.getValue(POSTAG_REGEXP)),attrs.getValue("regexp_match"),attrs.getValue("regexp_replace"),caseConv);
    if (inMessage) {
      if (suggestionMatches == null) {
        suggestionMatches=new ArrayList<Match>();
      }
      suggestionMatches.add(mWorker);
      message.append("\\" + attrs.getValue("no"));
    }
 else     if (inToken && attrs.getValue("no") != null) {
      final int refNumber=Integer.parseInt(attrs.getValue("no"));
      if (refNumber > elementList.size()) {
        throw new SAXException("Only backward references in match elements are possible, tried to specify token " + refNumber);
      }
 else {
        mWorker.setTokenRef(refNumber);
        tokenReference=mWorker;
        elements.append("\\" + refNumber);
      }
    }
  }
 else   if (qName.equals(MARKER) && inCorrectExample) {
    correctExample.append("<marker>");
  }
 else   if (qName.equals(MARKER) && inIncorrectExample) {
    incorrectExample.append("<marker>");
  }
 else   if (qName.equals("phrases")) {
    inPhrases=true;
  }
 else   if (qName.equals("includephrases")) {
    phraseElementInit();
    if (elementList == null) {
      elementList=new ArrayList<Element>();
    }
  }
 else   if (qName.equals("phrase") && inPhrases) {
    phraseId=attrs.getValue("id");
  }
 else   if (qName.equals("phraseref") && (attrs.getValue("idref") != null)) {
    phraseIdRef=attrs.getValue("idref");
    if (phraseMap.containsKey(phraseIdRef)) {
      for (      final ArrayList<Element> curPhrEl : phraseMap.get(phraseIdRef)) {
        if (elementList.isEmpty()) {
          phraseElementList.add(new ArrayList<Element>(curPhrEl));
          if (phElementCnt == null) {
            phElementCnt=new ArrayList<ArrayList<Integer>>();
          }
          phElementCnt.add(new ArrayList<Integer>(curPhrEl.size()));
        }
 else {
          final ArrayList<Element> prevList=new ArrayList<Element>(elementList);
          prevList.addAll(curPhrEl);
          if (phElementCnt == null) {
            phElementCnt=new ArrayList<ArrayList<Integer>>();
          }
          for (          Element el : prevList) {
            phElementCnt.add(new ArrayList<Integer>(1));
          }
          phraseElementList.add(new ArrayList<Element>(prevList));
          prevList.clear();
        }
      }
      lastPhrase=true;
    }
  }
}
