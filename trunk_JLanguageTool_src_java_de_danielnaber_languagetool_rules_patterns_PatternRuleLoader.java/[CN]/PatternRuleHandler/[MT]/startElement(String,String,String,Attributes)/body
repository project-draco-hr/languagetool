{
  if (qName.equals("category")) {
    final String catName=attrs.getValue("name");
    final String prioStr=attrs.getValue("priority");
    if (prioStr != null)     category=new Category(catName,Integer.parseInt(prioStr));
 else     category=new Category(catName);
  }
 else   if (qName.equals("rules")) {
    String languageStr=attrs.getValue("lang");
    language=Language.getLanguageForShortName(languageStr);
    if (language == null) {
      throw new SAXException("Unknown language '" + languageStr + "'");
    }
  }
 else   if (qName.equals("rule")) {
    id=attrs.getValue("id");
    if (inRuleGroup && id == null)     id=ruleGroupId;
    description=attrs.getValue("name");
    if (inRuleGroup && description == null)     description=ruleGroupDescription;
    correctExamples=new ArrayList<String>();
    incorrectExamples=new ArrayList<String>();
  }
 else   if (qName.equals("pattern")) {
    inPattern=true;
    if (attrs.getValue("mark_from") != null)     startPositionCorrection=Integer.parseInt(attrs.getValue("mark_from"));
    if (attrs.getValue("mark_to") != null)     endPositionCorrection=Integer.parseInt(attrs.getValue("mark_to"));
    if (attrs.getValue("case_sensitive") != null && attrs.getValue("case_sensitive").equals("yes"))     caseSensitive=true;
  }
 else   if (qName.equals("and")) {
    inAndGroup=true;
  }
 else   if (qName.equals("token")) {
    inToken=true;
    if (lastPhrase && elementList != null) {
      elementList.clear();
    }
    lastPhrase=false;
    if (attrs.getValue("negate") != null) {
      tokenNegated=attrs.getValue("negate").equals("yes");
    }
    if (attrs.getValue("inflected") != null) {
      tokenInflected=attrs.getValue("inflected").equals("yes");
    }
    if (attrs.getValue("skip") != null) {
      skipPos=Integer.parseInt(attrs.getValue("skip"));
    }
    elements=new StringBuffer();
    if (elementList == null) {
      elementList=new ArrayList<Element>();
    }
    if (attrs.getValue("postag") != null) {
      posToken=attrs.getValue("postag");
      if (attrs.getValue("postag_regexp") != null) {
        posRegExp=attrs.getValue("postag_regexp").equals("yes");
      }
      if (attrs.getValue("negate_pos") != null) {
        posNegation=attrs.getValue("negate_pos").equals("yes");
      }
    }
    if (attrs.getValue("regexp") != null) {
      stringRegExp=attrs.getValue("regexp").equals("yes");
    }
  }
 else   if (qName.equals("exception")) {
    inException=true;
    exceptions=new StringBuffer();
    if (attrs.getValue("negate") != null) {
      exceptionStringNegation=attrs.getValue("negate").equals("yes");
    }
    if (attrs.getValue("scope") != null) {
      exceptionValidNext=attrs.getValue("scope").equals("next");
    }
    if (attrs.getValue("inflected") != null) {
      exceptionStringInflected=attrs.getValue("inflected").equals("yes");
    }
    if (attrs.getValue("postag") != null) {
      exceptionPosToken=attrs.getValue("postag");
      if (attrs.getValue("postag_regexp") != null) {
        exceptionPosRegExp=attrs.getValue("postag_regexp").equals("yes");
      }
      if (attrs.getValue("negate_pos") != null) {
        exceptionPosNegation=attrs.getValue("negate_pos").equals("yes");
      }
    }
    if (attrs.getValue("regexp") != null) {
      exceptionStringRegExp=attrs.getValue("regexp").equals("yes");
    }
  }
 else   if (qName.equals("example") && attrs.getValue("type").equals("correct")) {
    inCorrectExample=true;
    correctExample=new StringBuffer();
  }
 else   if (qName.equals("example") && attrs.getValue("type").equals("incorrect")) {
    inIncorrectExample=true;
    incorrectExample=new StringBuffer();
    if (attrs.getValue("correction") != null) {
      incorrectExample.append("<correction>" + attrs.getValue("correction") + "</correction>");
    }
  }
 else   if (qName.equals("message")) {
    inMessage=true;
    message=new StringBuffer();
  }
 else   if (qName.equals("rulegroup")) {
    ruleGroupId=attrs.getValue("id");
    ruleGroupDescription=attrs.getValue("name");
    inRuleGroup=true;
  }
 else   if (qName.equals("suggestion") && inMessage) {
    message.append("<suggestion>");
  }
 else   if (qName.equals("match")) {
    inMatch=true;
    match=new StringBuffer();
    Match.CaseConversion caseConv=Match.CaseConversion.NONE;
    if (attrs.getValue("case_conversion") != null) {
      caseConv=Match.CaseConversion.toCase(attrs.getValue("case_conversion").toUpperCase());
    }
    final Match mWorker=new Match(attrs.getValue("postag"),attrs.getValue("postag_replace"),"yes".equals(attrs.getValue("postag_regexp")),attrs.getValue("regexp_match"),attrs.getValue("regexp_replace"),caseConv);
    if (inMessage) {
      if (suggestionMatches == null) {
        suggestionMatches=new ArrayList<Match>();
      }
      suggestionMatches.add(mWorker);
      message.append("\\" + attrs.getValue("no"));
    }
 else     if (inToken) {
      if (attrs.getValue("no") != null) {
        int refNumber=Integer.parseInt(attrs.getValue("no"));
        if (refNumber > elementList.size()) {
          throw new SAXException("Only backward references in match elements are possible, tried to specify token " + refNumber);
        }
 else {
          mWorker.setTokenRef(refNumber);
          tokenReference=mWorker;
          elements.append("\\" + refNumber);
        }
      }
    }
  }
 else   if (qName.equals("marker") && inCorrectExample) {
    correctExample.append("<marker>");
  }
 else   if (qName.equals("marker") && inIncorrectExample) {
    incorrectExample.append("<marker>");
  }
 else   if (qName.equals("phrases")) {
    inPhrases=true;
  }
 else   if (qName.equals("includephrases")) {
    phraseElementInit();
    if (elementList == null) {
      elementList=new ArrayList<Element>();
    }
  }
 else   if (qName.equals("phrase") && inPhrases) {
    phraseId=attrs.getValue("id");
  }
 else   if (qName.equals("phraseref")) {
    if (attrs.getValue("idref") != null) {
      phraseIdRef=attrs.getValue("idref");
      if (phraseMap.containsKey(phraseIdRef)) {
        ArrayList<ArrayList<Element>> curPhraseElementList=phraseMap.get(phraseIdRef);
        for (        ArrayList<Element> curPhrEl : curPhraseElementList) {
          if (!elementList.isEmpty()) {
            ArrayList<Element> prevList=new ArrayList<Element>(elementList);
            prevList.addAll(curPhrEl);
            phraseElementList.add(new ArrayList<Element>(prevList));
            prevList.clear();
          }
 else {
            phraseElementList.add(new ArrayList<Element>(curPhrEl));
          }
        }
        lastPhrase=true;
      }
    }
  }
}
