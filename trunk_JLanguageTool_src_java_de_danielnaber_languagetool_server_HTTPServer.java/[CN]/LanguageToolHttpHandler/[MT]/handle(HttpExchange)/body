{
  final Map<String,String> parameters=new HashMap<String,String>();
synchronized (instances) {
    final URI requestedUri=t.getRequestURI();
    if ("post".equalsIgnoreCase(t.getRequestMethod())) {
      final InputStreamReader isr=new InputStreamReader(t.getRequestBody(),"utf-8");
      final BufferedReader br=new BufferedReader(isr);
      final String query=br.readLine();
      parseQuery(query,parameters);
    }
 else {
      final String query=requestedUri.getRawQuery();
      parseQuery(query,parameters);
    }
    final long timeStart=System.currentTimeMillis();
    String text=null;
    String sourceText=null;
    try {
      if (StringTools.isEmpty(requestedUri.getRawPath())) {
        t.sendResponseHeaders(HttpURLConnection.HTTP_FORBIDDEN,0);
        throw new RuntimeException("Error: Access to " + requestedUri.getPath() + " denied");
      }
      if (allowedIPs.contains(t.getRemoteAddress().getAddress().toString())) {
        if (requestedUri.getRawPath().endsWith("/Languages")) {
          t.getResponseHeaders().set("Content-Type","text/xml");
          t.getResponseHeaders().set("Content_Encoding","UTF-8");
          final String response=getSupportedLanguagesAsXML();
          t.sendResponseHeaders(HttpURLConnection.HTTP_OK,response.getBytes().length);
          t.getResponseBody().write(response.getBytes());
          t.close();
        }
 else {
          final String langParam=parameters.get("language");
          if (langParam == null) {
            throw new IllegalArgumentException("Missing 'language' parameter");
          }
          final Language lang=Language.getLanguageForShortName(langParam);
          if (lang == null) {
            throw new IllegalArgumentException("Unknown language '" + langParam + "'");
          }
          final String motherTongueParam=parameters.get("motherTongue");
          Language motherTongue=null;
          if (null != motherTongueParam) {
            motherTongue=Language.getLanguageForShortName(motherTongueParam);
          }
          text=parameters.get("text");
          if (text == null) {
            throw new IllegalArgumentException("Missing 'text' parameter");
          }
          List<RuleMatch> matches=null;
          sourceText=parameters.get("srctext");
          if (sourceText == null) {
            final JLanguageTool lt=getLanguageToolInstance(lang,motherTongue);
            print("Checking " + text.length() + " characters of text, language "+ langParam);
            matches=lt.check(text);
          }
 else {
            if (motherTongueParam == null) {
              throw new IllegalArgumentException("Missing 'motherTongue' for bilingual checks");
            }
            print("Checking bilingual text, with source length" + sourceText.length() + "and target length "+ text.length()+ " (characters), source language "+ motherTongue+ "and target language "+ langParam);
            final JLanguageTool trglt=getLanguageToolInstance(lang,null);
            final JLanguageTool srclt=getLanguageToolInstance(motherTongue,null);
            List<BitextRule> bRules=Tools.getBitextRules(motherTongue,lang);
            matches=Tools.checkBitext(sourceText,text,srclt,trglt,bRules);
          }
          t.getResponseHeaders().set("Content-Type","text/xml");
          t.getResponseHeaders().set("Content_Encoding","UTF-8");
          final String response=StringTools.ruleMatchesToXML(matches,text,CONTEXT_SIZE,StringTools.XmlPrintMode.NORMAL_XML);
          print("Check done in " + (System.currentTimeMillis() - timeStart) + "ms");
          t.sendResponseHeaders(HttpURLConnection.HTTP_OK,response.getBytes().length);
          t.getResponseBody().write(response.getBytes());
          t.close();
        }
      }
 else {
        t.sendResponseHeaders(403,0);
        throw new RuntimeException("Error: Access from " + t.getRemoteAddress().toString() + " denied");
      }
    }
 catch (    Exception e) {
      if (HTTPServer.verbose) {
        print("Exceptions was caused by this text: " + text);
      }
      e.printStackTrace();
      final String response="Error: " + StringTools.escapeXML(e.toString());
      t.sendResponseHeaders(500,response.getBytes().length);
      t.getResponseBody().write(response.getBytes());
      t.close();
    }
  }
}
