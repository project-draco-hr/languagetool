{
  AnalyzedTokenReadings[] whTokens=whiteTokens.clone();
  int correctedStPos=0;
  if (startPositionCorrection > 0) {
    for (int l=0; l <= startPositionCorrection; l++) {
      correctedStPos+=tokenPositions[l];
    }
    correctedStPos--;
  }
  int correctedEndPos=0;
  if (endPositionCorrection < 0) {
    int l=0;
    while (l > endPositionCorrection) {
      correctedEndPos-=tokenPositions[matchingTokens + l - 1];
      l--;
    }
  }
  final int fromPos=text.getOriginalPosition(firstMatchToken + correctedStPos);
  final int numRead=whTokens[fromPos].getReadingsLength();
  boolean filtered=false;
switch (disAction) {
case UNIFY:
{
      if (unifiedTokens != null) {
        if (unifiedTokens.length == matchingTokens - startPositionCorrection + endPositionCorrection) {
          for (int i=0; i < unifiedTokens.length; i++) {
            whTokens[text.getOriginalPosition(firstMatchToken + correctedStPos + i)]=unifiedTokens[i];
          }
        }
      }
      break;
    }
case REMOVE:
{
    if (newTokenReadings != null) {
      if (newTokenReadings.length == matchingTokens - startPositionCorrection + endPositionCorrection) {
        for (int i=0; i < newTokenReadings.length; i++) {
          whTokens[text.getOriginalPosition(firstMatchToken + correctedStPos + i)].removeReading(newTokenReadings[i]);
        }
      }
    }
    break;
  }
case ADD:
{
  if (newTokenReadings != null) {
    if (newTokenReadings.length == matchingTokens - startPositionCorrection + endPositionCorrection) {
      for (int i=0; i < newTokenReadings.length; i++) {
        whTokens[text.getOriginalPosition(firstMatchToken + correctedStPos + i)].addReading(newTokenReadings[i]);
      }
    }
  }
  break;
}
case FILTER:
{
if (matchToken == null) {
  final Match tmpMatchToken=new Match(disambiguatedPOS,null,true,disambiguatedPOS,null,Match.CaseConversion.NONE,false);
  tmpMatchToken.setToken(whTokens[fromPos]);
  whTokens[fromPos]=tmpMatchToken.filterReadings(whTokens[fromPos]);
  filtered=true;
}
}
case REPLACE:
default :
{
if (!filtered) {
if (matchToken == null) {
  String lemma="";
  for (int l=0; l < numRead; l++) {
    if (whTokens[fromPos].getAnalyzedToken(l).getPOSTag() != null && (whTokens[fromPos].getAnalyzedToken(l).getPOSTag().equals(disambiguatedPOS) && (whTokens[fromPos].getAnalyzedToken(l).getLemma() != null))) {
      lemma=whTokens[fromPos].getAnalyzedToken(l).getLemma();
    }
  }
  if (StringTools.isEmpty(lemma)) {
    lemma=whTokens[fromPos].getAnalyzedToken(0).getLemma();
  }
  final AnalyzedTokenReadings toReplace=new AnalyzedTokenReadings(new AnalyzedToken(whTokens[fromPos].getToken(),disambiguatedPOS,lemma,whTokens[fromPos].getStartPos()));
  whTokens[fromPos]=toReplace;
}
 else {
  matchToken.setToken(whTokens[fromPos]);
  whTokens[fromPos]=matchToken.filterReadings(whTokens[fromPos]);
}
}
}
}
return whTokens;
}
