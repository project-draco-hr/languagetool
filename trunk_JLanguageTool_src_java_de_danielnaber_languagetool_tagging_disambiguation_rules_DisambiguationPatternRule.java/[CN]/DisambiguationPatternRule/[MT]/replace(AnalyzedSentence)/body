{
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  final AnalyzedTokenReadings[] whTokens=text.getTokens();
  final int[] tokenPositions=new int[tokens.length + 1];
  int tokenPos=0;
  int prevSkipNext=0;
  int skipNext=0;
  int matchPos=0;
  int skipShift=0;
  int skipShiftTotal=0;
  int firstMatchToken=-1;
  final int patternSize=patternElements.size();
  Element elem=null, prevElement=null;
  final boolean startWithSentStart=patternElements.get(0).isSentStart();
  for (int i=0; i < tokens.length; i++) {
    boolean allElementsMatch=true;
    if (patternSize + i > tokens.length) {
      allElementsMatch=false;
      break;
    }
    if (startWithSentStart && i > 0) {
      allElementsMatch=false;
      break;
    }
    int matchingTokens=0;
    for (int k=0; (k < patternSize); k++) {
      if (elem != null) {
        prevElement=elem;
      }
      elem=patternElements.get(k);
      skipNext=elem.getSkipNext();
      final int nextPos=tokenPos + k + skipShiftTotal;
      if (nextPos >= tokens.length) {
        allElementsMatch=false;
        break;
      }
      boolean skipMatch=false, thisMatched=false, prevMatched=false;
      boolean exceptionMatched=false;
      if (prevSkipNext + nextPos >= tokens.length || prevSkipNext < 0) {
        prevSkipNext=tokens.length - (nextPos + 1);
      }
      for (int m=nextPos; m <= nextPos + prevSkipNext; m++) {
        boolean matched=false;
        final int numberOfReadings=tokens[m].getReadingsLength();
        for (int l=0; l < numberOfReadings; l++) {
          final AnalyzedToken matchToken=tokens[m].getAnalyzedToken(l);
          if (prevSkipNext > 0 && prevElement != null && prevElement.scopeNextExceptionMatch(matchToken)) {
            exceptionMatched=true;
            prevMatched=true;
          }
          if (elem.referenceElement() && (firstMatchToken + elem.getMatch().getTokenRef() < tokens.length)) {
            elem.getMatch().setToken(tokens[firstMatchToken + elem.getMatch().getTokenRef()]);
            elem.getMatch().setSynthesizer(language.getSynthesizer());
            elem.compile();
          }
          if (elem.hasAndGroup()) {
            for (            final Element andElement : elem.getAndGroup()) {
              if (andElement.referenceElement() && (firstMatchToken + andElement.getMatch().getTokenRef() < tokens.length)) {
                andElement.getMatch().setToken(tokens[firstMatchToken + andElement.getMatch().getTokenRef()]);
                andElement.getMatch().setSynthesizer(language.getSynthesizer());
                andElement.compile();
              }
            }
            if (l == 0) {
              elem.setupAndGroup();
            }
          }
          thisMatched|=elem.match(matchToken) | elem.andGroupMatch(matchToken);
          if (l + 1 == numberOfReadings && elem.hasAndGroup()) {
            thisMatched&=elem.checkAndGroup(thisMatched);
          }
          exceptionMatched|=(elem.exceptionMatch(matchToken) || elem.andGroupExceptionMatch(matchToken));
          if (elem.hasPreviousException() && m > 0) {
            final int numReadings=tokens[m - 1].getReadingsLength();
            for (int p=0; p < numReadings; p++) {
              final AnalyzedToken matchExceptionToken=tokens[m - 1].getAnalyzedToken(p);
              exceptionMatched|=elem.scopePreviousExceptionMatch(matchExceptionToken);
            }
          }
          if (!(thisMatched || exceptionMatched)) {
            matched|=false;
          }
 else {
            matched=true;
            matchPos=m;
            skipShift=matchPos - nextPos;
            tokenPositions[matchingTokens]=skipShift + 1;
          }
          skipMatch=(skipMatch || matched) && !exceptionMatched;
        }
        if (!(thisMatched || prevMatched)) {
          exceptionMatched=false;
        }
        if (skipMatch) {
          break;
        }
      }
      if (!(thisMatched || prevMatched)) {
        skipMatch=false;
      }
      allElementsMatch=skipMatch;
      if (skipMatch) {
        prevSkipNext=skipNext;
      }
 else {
        prevSkipNext=0;
      }
      if (allElementsMatch) {
        matchingTokens++;
        if (firstMatchToken == -1) {
          firstMatchToken=matchPos;
        }
        skipShiftTotal+=skipShift;
      }
 else {
        skipShiftTotal=0;
        break;
      }
    }
    tokenPos++;
    if (allElementsMatch) {
      int correctedStPos=0;
      if (startPositionCorrection > 0) {
        for (int l=0; l <= startPositionCorrection; l++) {
          correctedStPos+=tokenPositions[l];
        }
        correctedStPos--;
      }
      int correctedEndPos=0;
      if (endPositionCorrection < 0) {
        int l=0;
        while (l > endPositionCorrection) {
          correctedEndPos-=tokenPositions[matchingTokens + l - 1];
          l--;
        }
      }
      final int fromPos=text.getOriginalPosition(firstMatchToken + correctedStPos);
      final int numRead=whTokens[fromPos].getReadingsLength();
      if (matchToken == null) {
        String lemma="";
        for (int l=0; l < numRead; l++) {
          if (whTokens[fromPos].getAnalyzedToken(l).getPOSTag() != null && (whTokens[fromPos].getAnalyzedToken(l).getPOSTag().equals(disambiguatedPOS) && (whTokens[fromPos].getAnalyzedToken(l).getLemma() != null))) {
            lemma=whTokens[fromPos].getAnalyzedToken(l).getLemma();
          }
        }
        if (("").equals(lemma)) {
          lemma=whTokens[fromPos].getAnalyzedToken(0).getLemma();
        }
        final AnalyzedTokenReadings toReplace=new AnalyzedTokenReadings(new AnalyzedToken(whTokens[fromPos].getToken(),disambiguatedPOS,lemma,whTokens[fromPos].getStartPos()));
        whTokens[fromPos]=toReplace;
      }
 else {
        matchToken.setToken(whTokens[fromPos]);
        whTokens[fromPos]=matchToken.filterReadings(whTokens[fromPos]);
      }
    }
 else {
      firstMatchToken=-1;
      skipShiftTotal=0;
    }
  }
  return new AnalyzedSentence(whTokens);
}
