{
  final AnalyzedTokenReadings[] tokens=text.getTokensWithoutWhitespace();
  AnalyzedTokenReadings[] whTokens=text.getTokens();
  final int[] tokenPositions=new int[tokens.length + 1];
  int tokenPos=0;
  int prevSkipNext=0;
  int skipNext=0;
  int matchPos=0;
  int skipShift=0;
  int skipShiftTotal=0;
  int firstMatchToken=-1;
  final int patternSize=patternElements.size();
  Element elem=null, prevElement=null;
  final boolean startWithSentStart=patternElements.get(0).isSentStart();
  language.getUnifier().reset();
  AnalyzedTokenReadings[] unifiedTokens=null;
  for (int i=0; i < tokens.length; i++) {
    boolean allElementsMatch=true;
    if (patternSize + i > tokens.length || startWithSentStart && i > 0) {
      allElementsMatch=false;
      break;
    }
    int matchingTokens=0;
    for (int k=0; k < patternSize; k++) {
      prevElement=elem;
      elem=patternElements.get(k);
      skipNext=elem.getSkipNext();
      final int nextPos=tokenPos + k + skipShiftTotal;
      if (nextPos >= tokens.length) {
        allElementsMatch=false;
        break;
      }
      boolean skipMatch=false, thisMatched=false, prevMatched=false;
      boolean exceptionMatched=false;
      if (prevSkipNext + nextPos >= tokens.length || prevSkipNext < 0) {
        prevSkipNext=tokens.length - (nextPos + 1);
      }
      for (int m=nextPos; m <= nextPos + prevSkipNext; m++) {
        boolean matched=false;
        final int numberOfReadings=tokens[m].getReadingsLength();
        for (int l=0; l < numberOfReadings; l++) {
          final boolean lastReading=l + 1 == numberOfReadings;
          final AnalyzedToken matchToken=tokens[m].getAnalyzedToken(l);
          if (prevSkipNext > 0 && prevElement != null && prevElement.isMatchedByScopeNextException(matchToken)) {
            exceptionMatched=true;
            prevMatched=true;
          }
          if (elem.isReferenceElement()) {
            setupRef(firstMatchToken,elem,tokens);
          }
          if (elem.hasAndGroup()) {
            for (            final Element andElement : elem.getAndGroup()) {
              if (andElement.isReferenceElement()) {
                setupRef(firstMatchToken,andElement,tokens);
              }
            }
            if (l == 0) {
              elem.setupAndGroup();
            }
          }
          thisMatched|=elem.isMatchedCompletely(matchToken);
          if (thisMatched && elem.isUnified()) {
            thisMatched&=language.getUnifier().isUnified(matchToken,elem.getUniFeature(),elem.getUniType(),elem.isUniNegated(),lastReading);
            if (thisMatched) {
              unifiedTokens=language.getUnifier().getFinalUnified();
            }
          }
          if (!elem.isUnified()) {
            language.getUnifier().reset();
          }
          if (l + 1 == numberOfReadings && elem.hasAndGroup()) {
            thisMatched&=elem.checkAndGroup(thisMatched);
          }
          exceptionMatched|=elem.isExceptionMatchedCompletely(matchToken);
          if (elem.hasPreviousException() && m > 0) {
            final int numReadings=tokens[m - 1].getReadingsLength();
            for (int p=0; p < numReadings; p++) {
              final AnalyzedToken matchExceptionToken=tokens[m - 1].getAnalyzedToken(p);
              exceptionMatched|=elem.isMatchedByPreviousException(matchExceptionToken);
            }
          }
          if (thisMatched || exceptionMatched) {
            matched=true;
            matchPos=m;
            skipShift=matchPos - nextPos;
            tokenPositions[matchingTokens]=skipShift + 1;
          }
          skipMatch=(skipMatch || matched) && !exceptionMatched;
        }
        if (!(thisMatched || prevMatched)) {
          exceptionMatched=false;
          skipMatch=false;
        }
        if (skipMatch) {
          break;
        }
      }
      allElementsMatch=skipMatch;
      if (skipMatch) {
        prevSkipNext=skipNext;
        matchingTokens++;
        if (firstMatchToken == -1) {
          firstMatchToken=matchPos;
        }
        skipShiftTotal+=skipShift;
      }
 else {
        prevSkipNext=0;
        skipShiftTotal=0;
        break;
      }
    }
    tokenPos++;
    if (allElementsMatch) {
      whTokens=executeAction(text,whTokens,unifiedTokens,firstMatchToken,matchingTokens,tokenPositions);
    }
    unifiedTokens=null;
    firstMatchToken=-1;
    skipShiftTotal=0;
    language.getUnifier().reset();
  }
  return new AnalyzedSentence(whTokens,text.getWhPositions());
}
