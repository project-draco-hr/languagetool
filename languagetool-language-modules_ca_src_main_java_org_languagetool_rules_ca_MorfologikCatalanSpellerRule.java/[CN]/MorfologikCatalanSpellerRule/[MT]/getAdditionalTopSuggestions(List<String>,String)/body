{
  CatalanTagger tagger=new CatalanTagger();
  Matcher matcher=APOSTROF_INICI_VERBS.matcher(word);
  if (matcher.matches()) {
    String newSuggestion=matcher.group(2);
    if (matchPostagRegexp(tagger.tag(Arrays.asList(newSuggestion)).get(0),VERB_INDSUBJ)) {
      return Collections.singletonList(matcher.group(1) + "'" + matcher.group(2));
    }
  }
  matcher=APOSTROF_INICI_NOM_SING.matcher(word);
  if (matcher.matches()) {
    String newSuggestion=matcher.group(2);
    if (matchPostagRegexp(tagger.tag(Arrays.asList(newSuggestion)).get(0),NOM_SING)) {
      return Collections.singletonList(matcher.group(1) + "'" + matcher.group(2));
    }
  }
  matcher=APOSTROF_INICI_NOM_PLURAL.matcher(word);
  if (matcher.matches()) {
    String newSuggestion=matcher.group(2);
    if (matchPostagRegexp(tagger.tag(Arrays.asList(newSuggestion)).get(0),NOM_PLURAL)) {
      return Collections.singletonList(matcher.group(1) + "'" + matcher.group(2));
    }
  }
  matcher=APOSTROF_FINAL.matcher(word);
  if (matcher.matches()) {
    String newSuggestion=matcher.group(1);
    if (matchPostagRegexp(tagger.tag(Arrays.asList(newSuggestion)).get(0),VERB_INFGERIMP)) {
      return Collections.singletonList(matcher.group(1) + "'" + matcher.group(2));
    }
  }
  matcher=GUIONET_FINAL.matcher(word);
  if (matcher.matches()) {
    String newSuggestion=matcher.group(1);
    if (matchPostagRegexp(tagger.tag(Arrays.asList(newSuggestion)).get(0),VERB_INFGERIMP)) {
      return Collections.singletonList(matcher.group(1) + "-" + matcher.group(2));
    }
  }
  return Collections.emptyList();
}
