{
  boolean isAlphabetic=true;
  final List<RuleMatch> ruleMatches=new ArrayList<RuleMatch>();
  if (word.length() == 1) {
    isAlphabetic=StringTools.isAlphabetic(word.charAt(0));
  }
  if (word.length() > 0 && isAlphabetic && !containsDigit(word) && !LANGUAGETOOL.equals(word) && !speller.isInDictionary(word) && !speller.isInDictionary(word.toLowerCase(conversionLocale))) {
    final List<String> suggestions=new ArrayList<String>();
    suggestions.addAll(speller.findReplacements(word));
    if (!word.toLowerCase(conversionLocale).equals(word)) {
      suggestions.addAll(speller.findReplacements(word.toLowerCase(conversionLocale)));
    }
    suggestions.addAll(speller.replaceRunOnWords(word));
    final RuleMatch ruleMatch=new RuleMatch(this,startPos,startPos + word.length(),messages.getString("spelling"),messages.getString("desc_spelling_short"));
    if (!suggestions.isEmpty()) {
      ruleMatch.setSuggestedReplacements(suggestions);
    }
    ruleMatches.add(ruleMatch);
  }
  return ruleMatches;
}
