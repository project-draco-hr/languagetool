{
  if (needsInit) {
    init();
  }
  final List<String> candidates=new ArrayList<>();
  final List<String> parts=wordSplitter.tokenize(word);
  int partCount=0;
  for (  String part : parts) {
    if (hunspellDict.misspelled(part)) {
      List<String> suggestions=morfoSpeller.getSuggestions(part);
      if (suggestions.size() == 0) {
        suggestions=morfoSpeller.getSuggestions(StringTools.uppercaseFirstChar(part));
      }
      for (      String suggestion : suggestions) {
        final List<String> partsCopy=new ArrayList<>(parts);
        if (partCount > 0 && !parts.get(partCount - 1).endsWith("-")) {
          partsCopy.set(partCount,suggestion.toLowerCase());
        }
 else {
          partsCopy.set(partCount,suggestion);
        }
        candidates.add(StringTools.listToString(partsCopy,""));
      }
    }
    partCount++;
  }
  final List<String> suggestions=getCorrectWords(candidates);
  final List<String> noSplitSuggestions=morfoSpeller.getSuggestions(word);
  if (StringTools.startsWithUppercase(word) && !StringTools.isAllUppercase(word)) {
    final List<String> noSplitLowercaseSuggestions=morfoSpeller.getSuggestions(word.toLowerCase());
    int pos=noSplitSuggestions.size() == 0 ? 0 : 1;
    for (    String suggestion : noSplitLowercaseSuggestions) {
      noSplitSuggestions.add(pos,StringTools.uppercaseFirstChar(suggestion));
      pos=Math.min(pos + 2,noSplitSuggestions.size());
    }
  }
  suggestions.addAll(0,noSplitSuggestions);
  filterDupes(suggestions);
  final List<String> sortedSuggestions=sortSuggestionByQuality(word,suggestions);
  return sortedSuggestions.subList(0,Math.min(MAX_SUGGESTIONS,sortedSuggestions.size()));
}
