{
  inMatch=true;
  match=new StringBuilder();
  Match.CaseConversion caseConversion=Match.CaseConversion.NONE;
  if (attrs.getValue("case_conversion") != null) {
    caseConversion=Match.CaseConversion.toCase(attrs.getValue("case_conversion").toUpperCase());
  }
  Match.IncludeRange includeRange=Match.IncludeRange.NONE;
  if (attrs.getValue("include_skipped") != null) {
    includeRange=Match.IncludeRange.toRange(attrs.getValue("include_skipped").toUpperCase());
  }
  final Match mWorker=new Match(attrs.getValue(POSTAG),attrs.getValue("postag_replace"),YES.equals(attrs.getValue(POSTAG_REGEXP)),attrs.getValue("regexp_match"),attrs.getValue("regexp_replace"),caseConversion,YES.equals(attrs.getValue("setpos")),includeRange);
  mWorker.setInMessageOnly(!inSuggestion);
  if (inMessage) {
    if (suggestionMatches == null) {
      suggestionMatches=new ArrayList<Match>();
    }
    suggestionMatches.add(mWorker);
    message.append("\u0001\\");
    message.append(attrs.getValue("no"));
    if (StringTools.isEmpty(attrs.getValue("no"))) {
      throw new SAXException("References cannot be empty: " + "\n Line: " + pLocator.getLineNumber() + ", column: "+ pLocator.getColumnNumber()+ ".");
    }
 else     if (Integer.parseInt(attrs.getValue("no")) < 1) {
      throw new SAXException("References must be larger than 0: " + attrs.getValue("no") + "\n Line: "+ pLocator.getLineNumber()+ ", column: "+ pLocator.getColumnNumber()+ ".");
    }
  }
 else   if (inToken && attrs.getValue("no") != null) {
    final int refNumber=Integer.parseInt(attrs.getValue("no"));
    if (refNumber > elementList.size()) {
      throw new SAXException("Only backward references in match elements are possible, tried to specify token " + refNumber + "\n Line: "+ pLocator.getLineNumber()+ ", column: "+ pLocator.getColumnNumber()+ ".");
    }
    mWorker.setTokenRef(refNumber);
    tokenReference=mWorker;
    elements.append("\\");
    elements.append(refNumber);
  }
}
