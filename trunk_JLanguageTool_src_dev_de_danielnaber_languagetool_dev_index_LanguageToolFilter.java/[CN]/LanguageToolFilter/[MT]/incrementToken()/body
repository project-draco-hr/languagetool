{
  if (insenStack.size() > 0) {
    final String pop=insenStack.pop();
    restoreState(current);
    termAtt.append(pop);
    posIncrAtt.setPositionIncrement(0);
    typeAtt.setType("insen");
    return true;
  }
  if (posStack.size() > 0) {
    final String pop=posStack.pop();
    restoreState(current);
    termAtt.append(pop);
    posIncrAtt.setPositionIncrement(0);
    typeAtt.setType("pos");
    return true;
  }
  if (tokenIter == null || !tokenIter.hasNext()) {
    if (input.incrementToken()) {
      final AnalyzedSentence sentence=languageTool.getAnalyzedSentence(termAtt.toString());
      final List<AnalyzedTokenReadings> tokenBuffer=Arrays.asList(sentence.getTokens());
      tokenIter=tokenBuffer.iterator();
      if (!tokenIter.hasNext()) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  clearAttributes();
  final AnalyzedTokenReadings tr=tokenIter.next();
  AnalyzedToken at=tr.getAnalyzedToken(0);
  if (tr.isSentStart()) {
    typeAtt.setType("pos");
    termAtt.append(POS_PREFIX + tr.getAnalyzedToken(0).getPOSTag());
    return true;
  }
  if (tr.isWhitespace()) {
    return this.incrementToken();
  }
  offsetAtt.setOffset(tr.getStartPos(),tr.getStartPos() + at.getToken().length());
  insenStack.push(CASE_INSENSITIVE_PREFIX + at.getToken().toLowerCase());
  for (int i=0; i < tr.getReadingsLength(); i++) {
    at=tr.getAnalyzedToken(i);
    if (at.getPOSTag() != null) {
      posStack.push(POS_PREFIX + at.getPOSTag());
    }
  }
  current=captureState();
  termAtt.append(tr.getAnalyzedToken(0).getToken());
  return true;
}
