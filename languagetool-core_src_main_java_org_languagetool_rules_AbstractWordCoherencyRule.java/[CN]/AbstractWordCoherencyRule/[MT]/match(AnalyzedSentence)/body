{
  List<RuleMatch> ruleMatches=new ArrayList<>();
  AnalyzedTokenReadings[] tokens=sentence.getTokensWithoutWhitespace();
  for (  AnalyzedTokenReadings tmpToken : tokens) {
    String token=tmpToken.getToken();
    List<AnalyzedToken> readings=tmpToken.getReadings();
    if (readings.size() > 0) {
      String baseform=readings.get(0).getLemma();
      if (baseform != null) {
        token=baseform;
      }
    }
    if (shouldNotAppearWord.containsKey(token)) {
      RuleMatch otherMatch=shouldNotAppearWord.get(token);
      String otherSpelling=otherMatch.getMessage();
      String msg=getMessage(token,otherSpelling);
      RuleMatch ruleMatch=new RuleMatch(this,tmpToken.getStartPos(),tmpToken.getEndPos(),msg);
      ruleMatch.setSuggestedReplacement(otherSpelling);
      ruleMatches.add(ruleMatch);
    }
 else     if (getWordMap().containsKey(token)) {
      String shouldNotAppear=getWordMap().get(token);
      RuleMatch potentialRuleMatch=new RuleMatch(this,tmpToken.getStartPos(),tmpToken.getEndPos(),token);
      shouldNotAppearWord.put(shouldNotAppear,potentialRuleMatch);
    }
  }
  return toRuleMatchArray(ruleMatches);
}
