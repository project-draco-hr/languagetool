{
  for (  AnalyzedTokenReadings t : sentence.getTokens()) {
    if (t.isWhitespace() && !t.isSentenceStart()) {
      continue;
    }
    odd=!odd;
    sb.append("<tr>");
    sb.append("<td bgcolor=\"");
    if (odd) {
      sb.append("#ffffff");
    }
 else {
      sb.append("#f1f1f1");
    }
    sb.append("\">");
    if (!t.isWhitespace()) {
      sb.append(t.getToken());
      sb.append("<font color='");
      sb.append(TAG_COLOR);
      sb.append("'>[");
    }
    Iterator<AnalyzedToken> iterator=t.iterator();
    while (iterator.hasNext()) {
      final AnalyzedToken token=iterator.next();
      final String posTag=token.getPOSTag();
      if (t.isSentenceStart()) {
        sb.append(StringTools.escapeHTML("<S>"));
      }
 else       if (JLanguageTool.SENTENCE_END_TAGNAME.equals(posTag)) {
        sb.append(StringTools.escapeHTML("</S>"));
      }
 else       if (JLanguageTool.PARAGRAPH_END_TAGNAME.equals(posTag)) {
        sb.append(StringTools.escapeHTML("<P/>"));
      }
 else {
        if (!t.isWhitespace()) {
          sb.append(token);
          if (iterator.hasNext()) {
            sb.append(", ");
          }
        }
      }
    }
    if (!t.isWhitespace()) {
      if (t.getChunkTags().size() > 0) {
        sb.append(',');
        sb.append(StringUtils.join(t.getChunkTags(),"|"));
      }
      if (t.isImmunized()) {
        sb.append("{!}");
      }
      sb.append("]</font>");
    }
 else {
      sb.append(' ');
    }
    sb.append("</td>");
    sb.append("<td bgcolor=\"");
    if (odd) {
      sb.append("#ffffff");
    }
 else {
      sb.append("#f1f1f1");
    }
    sb.append("\">");
    if (!"".equals(t.getHistoricalAnnotations())) {
      sb.append(StringTools.escapeHTML(t.getHistoricalAnnotations()).trim().replace("\n","<br>"));
    }
    sb.append("</td>");
    sb.append("</tr>");
  }
  return odd;
}
