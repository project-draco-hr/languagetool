{
  validatePatternFile(lang);
  System.out.print("Running pattern rule tests for " + lang.getName() + "... ");
  MultiThreadedJLanguageTool languageTool=new MultiThreadedJLanguageTool(lang);
  if (CHECK_WITH_SENTENCE_SPLITTING) {
    disableSpellingRules(languageTool);
  }
  MultiThreadedJLanguageTool allRulesLanguageTool=new MultiThreadedJLanguageTool(lang);
  validateRuleIds(lang,allRulesLanguageTool);
  List<AbstractPatternRule> rules=new ArrayList<>();
  for (  String patternRuleFileName : lang.getRuleFileNames()) {
    rules.addAll(languageTool.loadPatternRules(patternRuleFileName));
  }
  for (  AbstractPatternRule rule : rules) {
    PatternTestTools.warnIfRegexpSyntaxNotKosher(rule.getPatternTokens(),rule.getId(),rule.getSubId(),lang);
    List<DisambiguationPatternRule> antiPatterns=rule.getAntiPatterns();
    for (    DisambiguationPatternRule antiPattern : antiPatterns) {
      PatternTestTools.warnIfRegexpSyntaxNotKosher(antiPattern.getPatternTokens(),antiPattern.getId(),antiPattern.getSubId(),lang);
    }
    if (rule.getCorrectExamples().size() == 0) {
      boolean correctionExists=false;
      for (      IncorrectExample incorrectExample : rule.getIncorrectExamples()) {
        if (incorrectExample.getCorrections().size() > 0) {
          correctionExists=true;
          break;
        }
      }
      if (!correctionExists) {
        fail("Rule " + rule.getFullId() + " in language "+ lang+ " needs at least one <example> with a 'correction' attribute"+ " or one <example> of type='correct'.");
      }
    }
  }
  testGrammarRulesFromXML(rules,languageTool,allRulesLanguageTool,lang);
  System.out.println(rules.size() + " rules tested.");
  allRulesLanguageTool.shutdown();
  languageTool.shutdown();
}
