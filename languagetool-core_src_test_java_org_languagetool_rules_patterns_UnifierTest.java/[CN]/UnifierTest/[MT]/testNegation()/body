{
  final UnifierConfiguration unifierConfig=new UnifierConfiguration();
  unifierConfig.setEquivalence("number","singular",preparePOSElement(".*[\\.:]sg:.*"));
  unifierConfig.setEquivalence("number","plural",preparePOSElement(".*[\\.:]pl:.*"));
  unifierConfig.setEquivalence("gender","feminine",preparePOSElement(".*:f"));
  unifierConfig.setEquivalence("gender","masculine",preparePOSElement(".*:m"));
  final Unifier uni=unifierConfig.createUnifier();
  final AnalyzedToken sing_masc=new AnalyzedToken("parvus","adj:sg:blahblah:m","parvus");
  final AnalyzedToken plur_masc=new AnalyzedToken("parvi","adj:sg:blahblah:m","parvus");
  final AnalyzedToken plur_fem=new AnalyzedToken("parvae","adj:pl:blahblah:f","parvus");
  final AnalyzedToken sing_fem=new AnalyzedToken("parva","adj:sg:blahblah:f","parvus");
  final AnalyzedToken det_sing_fem=new AnalyzedToken("una","det:sg:blahblah:f","unus");
  final AnalyzedToken det_plur_fem=new AnalyzedToken("unae","det:pl:blahblah:f","unus");
  final AnalyzedToken det_sing_masc=new AnalyzedToken("unus","det:sg:blahblah:m","unus");
  final AnalyzedToken det_plur_masc=new AnalyzedToken("uni","det:sg:blahblah:m","unus");
  final AnalyzedToken subst_sing_fem=new AnalyzedToken("discrepatio","subst:sg:blahblah:f","discrepatio");
  final AnalyzedToken subst_plur_fem=new AnalyzedToken("discrepationes","subst:sg:blahblah:f","discrepatio");
  final AnalyzedToken subst_sing_masc=new AnalyzedToken("homo","sg:sg:blahblah:m","homo");
  final AnalyzedToken subst_plur_masc=new AnalyzedToken("homines","sg:sg:blahblah:m","homo");
  final Map<String,List<String>> equiv=new HashMap<>();
  equiv.put("number",null);
  equiv.put("gender",null);
  boolean satisfied=uni.isSatisfied(det_sing_masc,equiv);
  uni.startUnify();
  satisfied&=uni.isSatisfied(sing_masc,equiv);
  uni.startNextToken();
  satisfied&=uni.isSatisfied(subst_sing_masc,equiv);
  uni.startNextToken();
  assertEquals(true,satisfied);
  uni.reset();
  uni.isUnified(det_sing_masc,equiv,true);
  uni.isUnified(sing_masc,equiv,true);
  assertEquals(true,uni.isUnified(subst_sing_masc,equiv,true));
  uni.reset();
  satisfied=uni.isSatisfied(det_sing_masc,equiv);
  uni.startUnify();
  satisfied&=uni.isSatisfied(sing_masc,equiv);
  uni.startNextToken();
  satisfied&=uni.isSatisfied(subst_sing_masc,equiv);
  uni.startNextToken();
  assertEquals(false,!satisfied);
  uni.reset();
  uni.isUnified(det_sing_masc,equiv,true);
  uni.isUnified(sing_masc,equiv,true);
  assertEquals(false,!uni.isUnified(subst_sing_masc,equiv,true));
  uni.reset();
  uni.isUnified(det_sing_fem,equiv,true);
  uni.isUnified(sing_masc,equiv,true);
  assertEquals(true,!uni.isUnified(subst_sing_masc,equiv,true));
  uni.reset();
  uni.isUnified(det_sing_masc,equiv,true);
  uni.isUnified(sing_fem,equiv,true);
  assertEquals(true,!uni.isUnified(subst_sing_masc,equiv,true));
  uni.reset();
  uni.isUnified(det_sing_masc,equiv,true);
  uni.isUnified(sing_masc,equiv,true);
  assertEquals(true,!uni.isUnified(subst_sing_fem,equiv,true));
  uni.reset();
  uni.isUnified(det_sing_masc,equiv,true);
  uni.isUnified(plur_masc,equiv,true);
  assertEquals(true,!uni.isUnified(subst_sing_fem,equiv,true));
  uni.reset();
  uni.isUnified(det_sing_masc,equiv,true);
  uni.isUnified(plur_fem,equiv,true);
  assertEquals(true,!uni.isUnified(subst_sing_fem,equiv,true));
  uni.reset();
  uni.isUnified(det_plur_fem,equiv,true);
  uni.isUnified(plur_fem,equiv,true);
  assertEquals(true,!uni.isUnified(subst_sing_fem,equiv,true));
  uni.reset();
  uni.isUnified(det_sing_fem,equiv,true);
  uni.isUnified(plur_fem,equiv,true);
  assertEquals(true,!uni.isUnified(subst_plur_fem,equiv,true));
  uni.reset();
  uni.isUnified(det_sing_fem,equiv,true);
  uni.isUnified(plur_fem,equiv,true);
  assertEquals(true,!uni.isUnified(subst_plur_masc,equiv,true));
  uni.reset();
  uni.isUnified(det_plur_masc,equiv,true);
  uni.isUnified(plur_fem,equiv,true);
  assertEquals(true,!uni.isUnified(subst_plur_masc,equiv,true));
  uni.reset();
}
