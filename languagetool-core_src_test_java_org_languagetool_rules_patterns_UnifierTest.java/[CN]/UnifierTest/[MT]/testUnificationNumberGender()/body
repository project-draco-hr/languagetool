{
  final UnifierConfiguration unifierConfig=new UnifierConfiguration();
  final Element sgElement=new Element("",false,false,false);
  sgElement.setPosElement(".*[\\.:]sg:.*",true,false);
  unifierConfig.setEquivalence("number","singular",sgElement);
  final Element plElement=new Element("",false,false,false);
  plElement.setPosElement(".*[\\.:]pl:.*",true,false);
  unifierConfig.setEquivalence("number","plural",plElement);
  final Element femElement=new Element("",false,false,false);
  femElement.setPosElement(".*[\\.:]f",true,false);
  unifierConfig.setEquivalence("gender","feminine",femElement);
  final Element mascElement=new Element("",false,false,false);
  mascElement.setPosElement(".*[\\.:]m",true,false);
  unifierConfig.setEquivalence("gender","masculine",mascElement);
  final Unifier uni=unifierConfig.createUnifier();
  final AnalyzedToken sing1=new AnalyzedToken("ma??y","adj:sg:blahblah:m","ma??y");
  final AnalyzedToken sing1a=new AnalyzedToken("ma??a","adj:sg:blahblah:f","ma??y");
  final AnalyzedToken sing1b=new AnalyzedToken("ma??e","adj:pl:blahblah:m","ma??y");
  final AnalyzedToken sing2=new AnalyzedToken("cz??owiek","subst:sg:blahblah:m","cz??owiek");
  final Map<String,List<String>> equiv=new HashMap<>();
  equiv.put("number",null);
  equiv.put("gender",null);
  boolean satisfied=uni.isSatisfied(sing1,equiv);
  satisfied|=uni.isSatisfied(sing1a,equiv);
  satisfied|=uni.isSatisfied(sing1b,equiv);
  uni.startUnify();
  satisfied&=uni.isSatisfied(sing2,equiv);
  uni.startNextToken();
  satisfied&=uni.getFinalUnificationValue(equiv);
  assertEquals(true,satisfied);
  assertEquals("[ma??y[ma??y/adj:sg:blahblah:m*], cz??owiek[cz??owiek/subst:sg:blahblah:m*]]",Arrays.toString(uni.getUnifiedTokens()));
  uni.reset();
}
